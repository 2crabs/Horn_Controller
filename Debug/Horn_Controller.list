
Horn_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800311c  0800311c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800311c  0800311c  0001311c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003130  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003130  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a48b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7d  00000000  00000000  0002a502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ef  00000000  00000000  0002cce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001de7  00000000  00000000  0002d4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbcf  00000000  00000000  0002f2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cad0  00000000  00000000  0003ce85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000244c  00000000  00000000  000c9958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cbda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030b8 	.word	0x080030b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030b8 	.word	0x080030b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <TCA6424_Init>:
#include "TCA6424.h"

HAL_StatusTypeDef TCA6424_Init(TCA6424 *dev, I2C_HandleTypeDef *i2c, GPIO_TypeDef *gpio, uint16_t rstPin){
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af04      	add	r7, sp, #16
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	001a      	movs	r2, r3
 800022e:	1cbb      	adds	r3, r7, #2
 8000230:	801a      	strh	r2, [r3, #0]
	dev->i2cHandle = i2c;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]
	dev->gpioHandle = gpio;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
	dev->resetPin = rstPin;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	1cba      	adds	r2, r7, #2
 8000242:	8812      	ldrh	r2, [r2, #0]
 8000244:	811a      	strh	r2, [r3, #8]

	/* Pin needs to be pulled low to reset device to a known state */
	HAL_GPIO_WritePin(dev->gpioHandle, dev->resetPin, GPIO_PIN_RESET);
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6858      	ldr	r0, [r3, #4]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	891b      	ldrh	r3, [r3, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	0019      	movs	r1, r3
 8000252:	f001 fb05 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fd76 	bl	8000d48 <HAL_Delay>
	HAL_GPIO_WritePin(dev->gpioHandle, dev->resetPin, GPIO_PIN_SET);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	6858      	ldr	r0, [r3, #4]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	891b      	ldrh	r3, [r3, #8]
 8000264:	2201      	movs	r2, #1
 8000266:	0019      	movs	r1, r3
 8000268:	f001 fafa 	bl	8001860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f000 fd6b 	bl	8000d48 <HAL_Delay>

	/* Sets port 0 pins as input to make sure the device is responding */
	uint8_t dummyReg = 0xFF;
 8000272:	2117      	movs	r1, #23
 8000274:	187b      	adds	r3, r7, r1
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, TCA6424_REG_CONFIG0, I2C_MEMADD_SIZE_8BIT, &dummyReg, 1, 100);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	6818      	ldr	r0, [r3, #0]
 800027e:	2364      	movs	r3, #100	; 0x64
 8000280:	9302      	str	r3, [sp, #8]
 8000282:	2301      	movs	r3, #1
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	187b      	adds	r3, r7, r1
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2301      	movs	r3, #1
 800028c:	220c      	movs	r2, #12
 800028e:	2144      	movs	r1, #68	; 0x44
 8000290:	f001 fb9a 	bl	80019c8 <HAL_I2C_Mem_Write>
 8000294:	0003      	movs	r3, r0
}
 8000296:	0018      	movs	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	b006      	add	sp, #24
 800029c:	bd80      	pop	{r7, pc}

0800029e <TCA6424_WriteRegister>:

HAL_StatusTypeDef TCA6424_WriteRegister(TCA6424 *dev, uint8_t reg, uint8_t *data){
 800029e:	b590      	push	{r4, r7, lr}
 80002a0:	b089      	sub	sp, #36	; 0x24
 80002a2:	af04      	add	r7, sp, #16
 80002a4:	60f8      	str	r0, [r7, #12]
 80002a6:	607a      	str	r2, [r7, #4]
 80002a8:	240b      	movs	r4, #11
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	1c0a      	adds	r2, r1, #0
 80002ae:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	2364      	movs	r3, #100	; 0x64
 80002bc:	9302      	str	r3, [sp, #8]
 80002be:	2301      	movs	r3, #1
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2301      	movs	r3, #1
 80002c8:	2144      	movs	r1, #68	; 0x44
 80002ca:	f001 fb7d 	bl	80019c8 <HAL_I2C_Mem_Write>
 80002ce:	0003      	movs	r3, r0
}
 80002d0:	0018      	movs	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b005      	add	sp, #20
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <TCA6424_WriteRegisters>:

HAL_StatusTypeDef TCA6424_WriteRegisters(TCA6424 *dev, uint8_t reg, uint8_t *data, uint8_t size){
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af04      	add	r7, sp, #16
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	0008      	movs	r0, r1
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	0019      	movs	r1, r3
 80002e6:	240b      	movs	r4, #11
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	1c02      	adds	r2, r0, #0
 80002ec:	701a      	strb	r2, [r3, #0]
 80002ee:	250a      	movs	r5, #10
 80002f0:	197b      	adds	r3, r7, r5
 80002f2:	1c0a      	adds	r2, r1, #0
 80002f4:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 100);
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	6818      	ldr	r0, [r3, #0]
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	b29a      	uxth	r2, r3
 8000300:	197b      	adds	r3, r7, r5
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	2164      	movs	r1, #100	; 0x64
 8000308:	9102      	str	r1, [sp, #8]
 800030a:	9301      	str	r3, [sp, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2301      	movs	r3, #1
 8000312:	2144      	movs	r1, #68	; 0x44
 8000314:	f001 fb58 	bl	80019c8 <HAL_I2C_Mem_Write>
 8000318:	0003      	movs	r3, r0
}
 800031a:	0018      	movs	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	b004      	add	sp, #16
 8000320:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000324 <TCA6424_SetAsOutputs>:

HAL_StatusTypeDef TCA6424_SetAsOutputs(TCA6424 *dev){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint8_t config[3] = {0x00, 0x00, 0x00};
 800032c:	200c      	movs	r0, #12
 800032e:	183b      	adds	r3, r7, r0
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <TCA6424_SetAsOutputs+0x2c>)
 8000332:	8811      	ldrh	r1, [r2, #0]
 8000334:	8019      	strh	r1, [r3, #0]
 8000336:	7892      	ldrb	r2, [r2, #2]
 8000338:	709a      	strb	r2, [r3, #2]
	return TCA6424_WriteRegisters(dev, TCA6424_REG_CONFIG0 | TCA6424_AUTO_INCREMENT, config, 3);
 800033a:	183a      	adds	r2, r7, r0
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	2303      	movs	r3, #3
 8000340:	218c      	movs	r1, #140	; 0x8c
 8000342:	f7ff ffc9 	bl	80002d8 <TCA6424_WriteRegisters>
 8000346:	0003      	movs	r3, r0
}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}
 8000350:	080030d0 	.word	0x080030d0

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fc87 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f8b7 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 fa21 	bl	80007a8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000366:	f000 f919 	bl	800059c <MX_ADC_Init>
  MX_CAN_Init();
 800036a:	f000 f97f 	bl	800066c <MX_CAN_Init>
  MX_I2C1_Init();
 800036e:	f000 f9b3 	bl	80006d8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000372:	f000 f9f1 	bl	8000758 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  TCA6424_Init(&ioExpander, &hi2c1, GPIOB, IO_RST_Pin);
 8000376:	4a50      	ldr	r2, [pc, #320]	; (80004b8 <main+0x164>)
 8000378:	4950      	ldr	r1, [pc, #320]	; (80004bc <main+0x168>)
 800037a:	4851      	ldr	r0, [pc, #324]	; (80004c0 <main+0x16c>)
 800037c:	2310      	movs	r3, #16
 800037e:	f7ff ff4f 	bl	8000220 <TCA6424_Init>
  TCA6424_SetAsOutputs(&ioExpander);
 8000382:	4b4f      	ldr	r3, [pc, #316]	; (80004c0 <main+0x16c>)
 8000384:	0018      	movs	r0, r3
 8000386:	f7ff ffcd 	bl	8000324 <TCA6424_SetAsOutputs>
  uint16_t i = 0;
 800038a:	231e      	movs	r3, #30
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	2200      	movs	r2, #0
 8000390:	801a      	strh	r2, [r3, #0]
  uint8_t digit1[10] = DIGIT1_VALUES;
 8000392:	2310      	movs	r3, #16
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	4a4b      	ldr	r2, [pc, #300]	; (80004c4 <main+0x170>)
 8000398:	ca03      	ldmia	r2!, {r0, r1}
 800039a:	c303      	stmia	r3!, {r0, r1}
 800039c:	8812      	ldrh	r2, [r2, #0]
 800039e:	801a      	strh	r2, [r3, #0]
  uint8_t digit23[10] = DIGIT23_VALUES;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4a49      	ldr	r2, [pc, #292]	; (80004c8 <main+0x174>)
 80003a4:	ca03      	ldmia	r2!, {r0, r1}
 80003a6:	c303      	stmia	r3!, {r0, r1}
 80003a8:	8812      	ldrh	r2, [r2, #0]
 80003aa:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */


	  uint8_t hundreds = i / 100;
 80003ac:	251e      	movs	r5, #30
 80003ae:	197b      	adds	r3, r7, r5
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	2164      	movs	r1, #100	; 0x64
 80003b4:	0018      	movs	r0, r3
 80003b6:	f7ff fea7 	bl	8000108 <__udivsi3>
 80003ba:	0003      	movs	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	231d      	movs	r3, #29
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	701a      	strb	r2, [r3, #0]
	  uint8_t tens = (i / 10) % 10;
 80003c4:	197b      	adds	r3, r7, r5
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	210a      	movs	r1, #10
 80003ca:	0018      	movs	r0, r3
 80003cc:	f7ff fe9c 	bl	8000108 <__udivsi3>
 80003d0:	0003      	movs	r3, r0
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	210a      	movs	r1, #10
 80003d6:	0018      	movs	r0, r3
 80003d8:	f7ff ff1c 	bl	8000214 <__aeabi_uidivmod>
 80003dc:	000b      	movs	r3, r1
 80003de:	b29a      	uxth	r2, r3
 80003e0:	261c      	movs	r6, #28
 80003e2:	19bb      	adds	r3, r7, r6
 80003e4:	701a      	strb	r2, [r3, #0]
	  uint8_t units = i % 10;
 80003e6:	197b      	adds	r3, r7, r5
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	210a      	movs	r1, #10
 80003ec:	0018      	movs	r0, r3
 80003ee:	f7ff ff11 	bl	8000214 <__aeabi_uidivmod>
 80003f2:	000b      	movs	r3, r1
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	201b      	movs	r0, #27
 80003f8:	183b      	adds	r3, r7, r0
 80003fa:	701a      	strb	r2, [r3, #0]

	  HAL_TickFreqTypeDef freq = HAL_GetTickFreq();
 80003fc:	221a      	movs	r2, #26
 80003fe:	18bc      	adds	r4, r7, r2
 8000400:	f000 fc98 	bl	8000d34 <HAL_GetTickFreq>
 8000404:	0003      	movs	r3, r0
 8000406:	7023      	strb	r3, [r4, #0]

	 uint8_t ioPort0 = digit1[hundreds] | (digit23[tens] << 7);
 8000408:	231d      	movs	r3, #29
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2210      	movs	r2, #16
 8000410:	18ba      	adds	r2, r7, r2
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	b25a      	sxtb	r2, r3
 8000416:	19bb      	adds	r3, r7, r6
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	1d39      	adds	r1, r7, #4
 800041c:	5ccb      	ldrb	r3, [r1, r3]
 800041e:	01db      	lsls	r3, r3, #7
 8000420:	b25b      	sxtb	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b25b      	sxtb	r3, r3
 8000426:	b2da      	uxtb	r2, r3
 8000428:	1cfb      	adds	r3, r7, #3
 800042a:	701a      	strb	r2, [r3, #0]
	 uint8_t ioPort1 = (digit23[tens] >> 1) | (digit23[units] << 6);
 800042c:	19bb      	adds	r3, r7, r6
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	1d3a      	adds	r2, r7, #4
 8000432:	5cd3      	ldrb	r3, [r2, r3]
 8000434:	085b      	lsrs	r3, r3, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	b25a      	sxtb	r2, r3
 800043a:	201b      	movs	r0, #27
 800043c:	183b      	adds	r3, r7, r0
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	1d39      	adds	r1, r7, #4
 8000442:	5ccb      	ldrb	r3, [r1, r3]
 8000444:	019b      	lsls	r3, r3, #6
 8000446:	b25b      	sxtb	r3, r3
 8000448:	4313      	orrs	r3, r2
 800044a:	b25b      	sxtb	r3, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	1cbb      	adds	r3, r7, #2
 8000450:	701a      	strb	r2, [r3, #0]
	 uint8_t ioPort2 = (digit23[units] >> 2);
 8000452:	183b      	adds	r3, r7, r0
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	1d3a      	adds	r2, r7, #4
 8000458:	5cd3      	ldrb	r3, [r2, r3]
 800045a:	089b      	lsrs	r3, r3, #2
 800045c:	b2da      	uxtb	r2, r3
 800045e:	1c7b      	adds	r3, r7, #1
 8000460:	701a      	strb	r2, [r3, #0]
	 TCA6424_WriteRegister(&ioExpander, TCA6424_REG_OUT0, &ioPort0);
 8000462:	1cfa      	adds	r2, r7, #3
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <main+0x16c>)
 8000466:	2104      	movs	r1, #4
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff18 	bl	800029e <TCA6424_WriteRegister>
	 TCA6424_WriteRegister(&ioExpander, TCA6424_REG_OUT1, &ioPort1);
 800046e:	1cba      	adds	r2, r7, #2
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <main+0x16c>)
 8000472:	2105      	movs	r1, #5
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff12 	bl	800029e <TCA6424_WriteRegister>
	 TCA6424_WriteRegister(&ioExpander, TCA6424_REG_OUT2, &ioPort2);
 800047a:	1c7a      	adds	r2, r7, #1
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <main+0x16c>)
 800047e:	2106      	movs	r1, #6
 8000480:	0018      	movs	r0, r3
 8000482:	f7ff ff0c 	bl	800029e <TCA6424_WriteRegister>
	 HAL_Delay(50);
 8000486:	2032      	movs	r0, #50	; 0x32
 8000488:	f000 fc5e 	bl	8000d48 <HAL_Delay>
	 i = HAL_GetTick()/1000;
 800048c:	f000 fc48 	bl	8000d20 <HAL_GetTick>
 8000490:	0002      	movs	r2, r0
 8000492:	23fa      	movs	r3, #250	; 0xfa
 8000494:	0099      	lsls	r1, r3, #2
 8000496:	0010      	movs	r0, r2
 8000498:	f7ff fe36 	bl	8000108 <__udivsi3>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	197b      	adds	r3, r7, r5
 80004a2:	801a      	strh	r2, [r3, #0]
	 if (i >= 999){
 80004a4:	197b      	adds	r3, r7, r5
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	4a08      	ldr	r2, [pc, #32]	; (80004cc <main+0x178>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d800      	bhi.n	80004b0 <main+0x15c>
 80004ae:	e77d      	b.n	80003ac <main+0x58>
		 i = 0;
 80004b0:	197b      	adds	r3, r7, r5
 80004b2:	2200      	movs	r2, #0
 80004b4:	801a      	strh	r2, [r3, #0]
  {
 80004b6:	e779      	b.n	80003ac <main+0x58>
 80004b8:	48000400 	.word	0x48000400
 80004bc:	20000090 	.word	0x20000090
 80004c0:	20000104 	.word	0x20000104
 80004c4:	080030d4 	.word	0x080030d4
 80004c8:	080030e0 	.word	0x080030e0
 80004cc:	000003e6 	.word	0x000003e6

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b099      	sub	sp, #100	; 0x64
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	242c      	movs	r4, #44	; 0x2c
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	; 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fdbd 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	231c      	movs	r3, #28
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 fdb5 	bl	8003060 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2318      	movs	r3, #24
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fdae 	bl	8003060 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2213      	movs	r2, #19
 800050a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2201      	movs	r2, #1
 800051c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2210      	movs	r2, #16
 8000522:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2210      	movs	r2, #16
 8000528:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fea6 	bl	8002284 <HAL_RCC_OscConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800053c:	f000 f9ee 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	211c      	movs	r1, #28
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2101      	movs	r1, #1
 800055e:	0018      	movs	r0, r3
 8000560:	f002 fa16 	bl	8002990 <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000568:	f000 f9d8 	bl	800091c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <SystemClock_Config+0xc8>)
 8000570:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	22c0      	movs	r2, #192	; 0xc0
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	0018      	movs	r0, r3
 8000584:	f002 fb52 	bl	8002c2c <HAL_RCCEx_PeriphCLKConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800058c:	f000 f9c6 	bl	800091c <Error_Handler>
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b019      	add	sp, #100	; 0x64
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	00010020 	.word	0x00010020

0800059c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	230c      	movs	r3, #12
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 fd58 	bl	8003060 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_ADC_Init+0xc8>)
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <MX_ADC_Init+0xcc>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <MX_ADC_Init+0xc8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_ADC_Init+0xc8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <MX_ADC_Init+0xc8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC_Init+0xc8>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_ADC_Init+0xc8>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC_Init+0xc8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005da:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_ADC_Init+0xc8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_ADC_Init+0xc8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC_Init+0xc8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_ADC_Init+0xc8>)
 80005ee:	22c2      	movs	r2, #194	; 0xc2
 80005f0:	32ff      	adds	r2, #255	; 0xff
 80005f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_ADC_Init+0xc8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC_Init+0xc8>)
 80005fc:	2224      	movs	r2, #36	; 0x24
 80005fe:	2100      	movs	r1, #0
 8000600:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_ADC_Init+0xc8>)
 8000604:	2201      	movs	r2, #1
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_ADC_Init+0xc8>)
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fbc0 	bl	8000d90 <HAL_ADC_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000614:	f000 f982 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2206      	movs	r2, #6
 800061c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	0152      	lsls	r2, r2, #5
 8000624:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	0552      	lsls	r2, r2, #21
 800062c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800062e:	1d3a      	adds	r2, r7, #4
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_ADC_Init+0xc8>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fceb 	bl	8001010 <HAL_ADC_ConfigChannel>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800063e:	f000 f96d 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2209      	movs	r2, #9
 8000646:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000648:	1d3a      	adds	r2, r7, #4
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_ADC_Init+0xc8>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fcde 	bl	8001010 <HAL_ADC_ConfigChannel>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000658:	f000 f960 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b004      	add	sp, #16
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40012400 	.word	0x40012400

0800066c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_CAN_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_CAN_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_CAN_Init+0x64>)
 8000678:	2204      	movs	r2, #4
 800067a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_CAN_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_CAN_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_CAN_Init+0x64>)
 800068a:	22a0      	movs	r2, #160	; 0xa0
 800068c:	02d2      	lsls	r2, r2, #11
 800068e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_CAN_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_CAN_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CAN_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_CAN_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CAN_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_CAN_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CAN_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_CAN_Init+0x64>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fdb5 	bl	800122c <HAL_CAN_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80006c6:	f000 f929 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000068 	.word	0x20000068
 80006d4:	40006400 	.word	0x40006400

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 f8c1 	bl	800189c <HAL_I2C_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 f8fd 	bl	800091c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x74>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fd14 	bl	8002154 <HAL_I2CEx_ConfigAnalogFilter>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f8f4 	bl	800091c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fd57 	bl	80021ec <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 f8eb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090
 8000750:	40005400 	.word	0x40005400
 8000754:	0000020b 	.word	0x0000020b

08000758 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_RTC_Init+0x44>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_RTC_Init+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_RTC_Init+0x44>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_RTC_Init+0x44>)
 800076a:	2263      	movs	r2, #99	; 0x63
 800076c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_RTC_Init+0x44>)
 8000770:	4a0c      	ldr	r2, [pc, #48]	; (80007a4 <MX_RTC_Init+0x4c>)
 8000772:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_RTC_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_RTC_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_RTC_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_RTC_Init+0x44>)
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fb3d 	bl	8002e08 <HAL_RTC_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000792:	f000 f8c3 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000e4 	.word	0x200000e4
 80007a0:	40002800 	.word	0x40002800
 80007a4:	0000270f 	.word	0x0000270f

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 fc51 	bl	8003060 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b54      	ldr	r3, [pc, #336]	; (8000910 <MX_GPIO_Init+0x168>)
 80007c0:	695a      	ldr	r2, [r3, #20]
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_GPIO_Init+0x168>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	02c9      	lsls	r1, r1, #11
 80007c8:	430a      	orrs	r2, r1
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	4b50      	ldr	r3, [pc, #320]	; (8000910 <MX_GPIO_Init+0x168>)
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	02db      	lsls	r3, r3, #11
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <MX_GPIO_Init+0x168>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <MX_GPIO_Init+0x168>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	03c9      	lsls	r1, r1, #15
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	4b49      	ldr	r3, [pc, #292]	; (8000910 <MX_GPIO_Init+0x168>)
 80007ea:	695a      	ldr	r2, [r3, #20]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	03db      	lsls	r3, r3, #15
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b46      	ldr	r3, [pc, #280]	; (8000910 <MX_GPIO_Init+0x168>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b45      	ldr	r3, [pc, #276]	; (8000910 <MX_GPIO_Init+0x168>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0289      	lsls	r1, r1, #10
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b42      	ldr	r3, [pc, #264]	; (8000910 <MX_GPIO_Init+0x168>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	029b      	lsls	r3, r3, #10
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|RELAY2_Pin, GPIO_PIN_RESET);
 8000812:	2390      	movs	r3, #144	; 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2200      	movs	r2, #0
 8000818:	2118      	movs	r1, #24
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f820 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000820:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x16c>)
 8000822:	2200      	movs	r2, #0
 8000824:	2168      	movs	r1, #104	; 0x68
 8000826:	0018      	movs	r0, r3
 8000828:	f001 f81a 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_RST_GPIO_Port, IO_RST_Pin, GPIO_PIN_SET);
 800082c:	4b39      	ldr	r3, [pc, #228]	; (8000914 <MX_GPIO_Init+0x16c>)
 800082e:	2201      	movs	r2, #1
 8000830:	2110      	movs	r1, #16
 8000832:	0018      	movs	r0, r3
 8000834:	f001 f814 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin CUR_FAULT_Pin START_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|CUR_FAULT_Pin|START_Pin;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	4a37      	ldr	r2, [pc, #220]	; (8000918 <MX_GPIO_Init+0x170>)
 800083c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	193a      	adds	r2, r7, r4
 800084c:	2390      	movs	r3, #144	; 0x90
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fe9c 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_Pin RELAY2_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY2_Pin;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2218      	movs	r2, #24
 800085c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2203      	movs	r2, #3
 800086e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	193a      	adds	r2, r7, r4
 8000872:	2390      	movs	r3, #144	; 0x90
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fe89 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2220      	movs	r2, #32
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000890:	193a      	adds	r2, r7, r4
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fe79 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : HORN_IN_Pin */
  GPIO_InitStruct.Pin = HORN_IN_Pin;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HORN_IN_GPIO_Port, &GPIO_InitStruct);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <MX_GPIO_Init+0x16c>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f000 fe6a 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2208      	movs	r2, #8
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_GPIO_Init+0x16c>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f000 fe58 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_RST_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = IO_RST_Pin|LED1_Pin|LED2_Pin;
 80008e0:	0021      	movs	r1, r4
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2270      	movs	r2, #112	; 0x70
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <MX_GPIO_Init+0x16c>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fe45 	bl	8001590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b009      	add	sp, #36	; 0x24
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400
 8000918:	00008084 	.word	0x00008084

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x50>)
 8000930:	699a      	ldr	r2, [r3, #24]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_MspInit+0x50>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	619a      	str	r2, [r3, #24]
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x50>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x50>)
 8000948:	69da      	ldr	r2, [r3, #28]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x50>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0549      	lsls	r1, r1, #21
 8000950:	430a      	orrs	r2, r1
 8000952:	61da      	str	r2, [r3, #28]
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x50>)
 8000956:	69da      	ldr	r2, [r3, #28]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	055b      	lsls	r3, r3, #21
 800095c:	4013      	ands	r3, r2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x54>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_MspInit+0x54>)
 8000968:	2110      	movs	r1, #16
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	40010000 	.word	0x40010000

08000980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b08b      	sub	sp, #44	; 0x2c
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	2414      	movs	r4, #20
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	2314      	movs	r3, #20
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f002 fb64 	bl	8003060 <memset>
  if(hadc->Instance==ADC1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <HAL_ADC_MspInit+0xbc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d148      	bne.n	8000a34 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0089      	lsls	r1, r1, #2
 80009ac:	430a      	orrs	r2, r1
 80009ae:	619a      	str	r2, [r3, #24]
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009b2:	699a      	ldr	r2, [r3, #24]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	0289      	lsls	r1, r1, #10
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	02c9      	lsls	r1, r1, #11
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_ADC_MspInit+0xc0>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	02db      	lsls	r3, r3, #11
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA6     ------> ADC_IN6
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = CUR_Pin;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2203      	movs	r2, #3
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CUR_GPIO_Port, &GPIO_InitStruct);
 8000a08:	193a      	adds	r2, r7, r4
 8000a0a:	2390      	movs	r3, #144	; 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fdbd 	bl	8001590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_Pin;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2202      	movs	r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2203      	movs	r2, #3
 8000a20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_ADC_MspInit+0xc4>)
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0010      	movs	r0, r2
 8000a30:	f000 fdae 	bl	8001590 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b00b      	add	sp, #44	; 0x2c
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	40012400 	.word	0x40012400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000400 	.word	0x48000400

08000a48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2414      	movs	r4, #20
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fb00 	bl	8003060 <memset>
  if(hcan->Instance==CAN)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_CAN_MspInit+0x94>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d133      	bne.n	8000ad2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0489      	lsls	r1, r1, #18
 8000a74:	430a      	orrs	r2, r1
 8000a76:	61da      	str	r2, [r3, #28]
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a7a:	69da      	ldr	r2, [r3, #28]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	049b      	lsls	r3, r3, #18
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0289      	lsls	r1, r1, #10
 8000a90:	430a      	orrs	r2, r1
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_CAN_MspInit+0x98>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	029b      	lsls	r3, r3, #10
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	22c0      	movs	r2, #192	; 0xc0
 8000aa6:	0152      	lsls	r2, r2, #5
 8000aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2202      	movs	r2, #2
 8000ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2203      	movs	r2, #3
 8000abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	187a      	adds	r2, r7, r1
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fd5f 	bl	8001590 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b00b      	add	sp, #44	; 0x2c
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40006400 	.word	0x40006400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b08b      	sub	sp, #44	; 0x2c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2414      	movs	r4, #20
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f002 fab2 	bl	8003060 <memset>
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <HAL_I2C_MspInit+0x90>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d132      	bne.n	8000b6c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	02c9      	lsls	r1, r1, #11
 8000b10:	430a      	orrs	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	22c0      	movs	r2, #192	; 0xc0
 8000b26:	0052      	lsls	r2, r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2212      	movs	r2, #18
 8000b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2201      	movs	r2, #1
 8000b42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_I2C_MspInit+0x98>)
 8000b48:	0019      	movs	r1, r3
 8000b4a:	0010      	movs	r0, r2
 8000b4c:	f000 fd20 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b52:	69da      	ldr	r2, [r3, #28]
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0389      	lsls	r1, r1, #14
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	61da      	str	r2, [r3, #28]
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_I2C_MspInit+0x94>)
 8000b60:	69da      	ldr	r2, [r3, #28]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	039b      	lsls	r3, r3, #14
 8000b66:	4013      	ands	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b00b      	add	sp, #44	; 0x2c
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	40005400 	.word	0x40005400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	48000400 	.word	0x48000400

08000b80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_RTC_MspInit+0x28>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_RTC_MspInit+0x2c>)
 8000b94:	6a1a      	ldr	r2, [r3, #32]
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_RTC_MspInit+0x2c>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0209      	lsls	r1, r1, #8
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b002      	add	sp, #8
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40002800 	.word	0x40002800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f892 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bec:	f7ff fff7 	bl	8000bde <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <LoopForever+0x6>)
    LDR R1, [R0]
 8000bf2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000bf4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <LoopForever+0xa>)
    CMP R1, R2
 8000bf8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000bfa:	d105      	bne.n	8000c08 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000bfc:	4811      	ldr	r0, [pc, #68]	; (8000c44 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000bfe:	4912      	ldr	r1, [pc, #72]	; (8000c48 <LoopForever+0x12>)
    STR R1, [R0]
 8000c00:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000c02:	4812      	ldr	r0, [pc, #72]	; (8000c4c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000c04:	4912      	ldr	r1, [pc, #72]	; (8000c50 <LoopForever+0x1a>)
    STR R1, [R0]
 8000c06:	6001      	str	r1, [r0, #0]

08000c08 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000c0a:	4913      	ldr	r1, [pc, #76]	; (8000c58 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <LoopForever+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000c20:	4c10      	ldr	r4, [pc, #64]	; (8000c64 <LoopForever+0x2e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2e:	f002 fa1f 	bl	8003070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fb8f 	bl	8000354 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000c3c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000c40:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000c44:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000c48:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000c4c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000c50:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	08003124 	.word	0x08003124
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	20000114 	.word	0x20000114

08000c68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_IRQHandler>
	...

08000c6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <HAL_Init+0x24>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_Init+0x24>)
 8000c76:	2110      	movs	r1, #16
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f809 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c82:	f7ff fe51 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_InitTick+0x5c>)
 8000c9e:	681c      	ldr	r4, [r3, #0]
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	23fa      	movs	r3, #250	; 0xfa
 8000ca8:	0098      	lsls	r0, r3, #2
 8000caa:	f7ff fa2d 	bl	8000108 <__udivsi3>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	0019      	movs	r1, r3
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	f7ff fa28 	bl	8000108 <__udivsi3>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fc5b 	bl	8001576 <HAL_SYSTICK_Config>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e00f      	b.n	8000ce8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d80b      	bhi.n	8000ce6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fc38 	bl	800154c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_InitTick+0x64>)
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b003      	add	sp, #12
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	001a      	movs	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x20>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	18d2      	adds	r2, r2, r3
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_IncTick+0x20>)
 8000d0e:	601a      	str	r2, [r3, #0]
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000110 	.word	0x20000110

08000d20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <HAL_GetTick+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	20000110 	.word	0x20000110

08000d34 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <HAL_GetTickFreq+0x10>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20000008 	.word	0x20000008

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffe6 	bl	8000d20 <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	001a      	movs	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	189b      	adds	r3, r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	f7ff ffd6 	bl	8000d20 <HAL_GetTick>
 8000d74:	0002      	movs	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e125      	b.n	8000ffa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f7ff fdda 	bl	8000980 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d000      	beq.n	8000dd8 <HAL_ADC_Init+0x48>
 8000dd6:	e103      	b.n	8000fe0 <HAL_ADC_Init+0x250>
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d000      	beq.n	8000de4 <HAL_ADC_Init+0x54>
 8000de2:	e0fd      	b.n	8000fe0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2204      	movs	r2, #4
 8000dec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000dee:	d000      	beq.n	8000df2 <HAL_ADC_Init+0x62>
 8000df0:	e0f6      	b.n	8000fe0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	4a83      	ldr	r2, [pc, #524]	; (8001004 <HAL_ADC_Init+0x274>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d112      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d009      	beq.n	8000e32 <HAL_ADC_Init+0xa2>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	401a      	ands	r2, r3
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_Init+0xa6>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0xa8>
 8000e36:	2300      	movs	r3, #0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d116      	bne.n	8000e6a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2218      	movs	r2, #24
 8000e44:	4393      	bics	r3, r2
 8000e46:	0019      	movs	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	0899      	lsrs	r1, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4964      	ldr	r1, [pc, #400]	; (8001008 <HAL_ADC_Init+0x278>)
 8000e76:	400a      	ands	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7e1b      	ldrb	r3, [r3, #24]
 8000e7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e5b      	ldrb	r3, [r3, #25]
 8000e84:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e86:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7e9b      	ldrb	r3, [r3, #26]
 8000e8c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <HAL_ADC_Init+0x10e>
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	015b      	lsls	r3, r3, #5
 8000e9c:	e000      	b.n	8000ea0 <HAL_ADC_Init+0x110>
 8000e9e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ea0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ea6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_Init+0x124>
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_Init+0x126>
 8000eb4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000eb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2124      	movs	r1, #36	; 0x24
 8000ebc:	5c5b      	ldrb	r3, [r3, r1]
 8000ebe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ec0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7edb      	ldrb	r3, [r3, #27]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d115      	bne.n	8000efc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e9b      	ldrb	r3, [r3, #26]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0252      	lsls	r2, r2, #9
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	e00b      	b.n	8000efc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee8:	2220      	movs	r2, #32
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	23c2      	movs	r3, #194	; 0xc2
 8000f02:	33ff      	adds	r3, #255	; 0xff
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d007      	beq.n	8000f18 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d9      	ldr	r1, [r3, #12]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d01b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d017      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d013      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d00f      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00b      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d007      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d003      	beq.n	8000f6c <HAL_ADC_Init+0x1dc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d112      	bne.n	8000f92 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2107      	movs	r1, #7
 8000f78:	438a      	bics	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6959      	ldr	r1, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f86:	2207      	movs	r2, #7
 8000f88:	401a      	ands	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_ADC_Init+0x27c>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10b      	bne.n	8000fba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fac:	2203      	movs	r2, #3
 8000fae:	4393      	bics	r3, r2
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fb8:	e01c      	b.n	8000ff4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	2212      	movs	r2, #18
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2201      	movs	r2, #1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fde:	e009      	b.n	8000ff4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	781b      	ldrb	r3, [r3, #0]
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	fffffefd 	.word	0xfffffefd
 8001008:	fffe0219 	.word	0xfffe0219
 800100c:	833fffe7 	.word	0x833fffe7

08001010 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101a:	230f      	movs	r3, #15
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	429a      	cmp	r2, r3
 8001030:	d011      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00d      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	2b02      	cmp	r3, #2
 8001040:	d009      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	2b03      	cmp	r3, #3
 8001048:	d005      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104e:	2b04      	cmp	r3, #4
 8001050:	d001      	beq.n	8001056 <HAL_ADC_ConfigChannel+0x46>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2234      	movs	r2, #52	; 0x34
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x54>
 8001060:	2302      	movs	r3, #2
 8001062:	e0d0      	b.n	8001206 <HAL_ADC_ConfigChannel+0x1f6>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2101      	movs	r1, #1
 800106a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2204      	movs	r2, #4
 8001074:	4013      	ands	r3, r2
 8001076:	d000      	beq.n	800107a <HAL_ADC_ConfigChannel+0x6a>
 8001078:	e0b4      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a64      	ldr	r2, [pc, #400]	; (8001210 <HAL_ADC_ConfigChannel+0x200>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d100      	bne.n	8001086 <HAL_ADC_ConfigChannel+0x76>
 8001084:	e082      	b.n	800118c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	055b      	lsls	r3, r3, #21
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d037      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d033      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d02f      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d02b      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d027      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d023      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	2b06      	cmp	r3, #6
 80010d6:	d01f      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d01b      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	2107      	movs	r1, #7
 80010ec:	400b      	ands	r3, r1
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d012      	beq.n	8001118 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2107      	movs	r1, #7
 80010fe:	438a      	bics	r2, r1
 8001100:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6959      	ldr	r1, [r3, #20]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2207      	movs	r2, #7
 800110e:	401a      	ands	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d007      	beq.n	8001130 <HAL_ADC_ConfigChannel+0x120>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b11      	cmp	r3, #17
 8001126:	d003      	beq.n	8001130 <HAL_ADC_ConfigChannel+0x120>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d163      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001130:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_ADC_ConfigChannel+0x204>)
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d009      	beq.n	8001150 <HAL_ADC_ConfigChannel+0x140>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b11      	cmp	r3, #17
 8001142:	d102      	bne.n	800114a <HAL_ADC_ConfigChannel+0x13a>
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	03db      	lsls	r3, r3, #15
 8001148:	e004      	b.n	8001154 <HAL_ADC_ConfigChannel+0x144>
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	045b      	lsls	r3, r3, #17
 800114e:	e001      	b.n	8001154 <HAL_ADC_ConfigChannel+0x144>
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	041b      	lsls	r3, r3, #16
 8001154:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <HAL_ADC_ConfigChannel+0x204>)
 8001156:	430b      	orrs	r3, r1
 8001158:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d14a      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_ConfigChannel+0x208>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	492d      	ldr	r1, [pc, #180]	; (800121c <HAL_ADC_ConfigChannel+0x20c>)
 8001168:	0018      	movs	r0, r3
 800116a:	f7fe ffcd 	bl	8000108 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	001a      	movs	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	189b      	adds	r3, r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800117c:	e002      	b.n	8001184 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3b01      	subs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f9      	bne.n	800117e <HAL_ADC_ConfigChannel+0x16e>
 800118a:	e035      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2101      	movs	r1, #1
 8001198:	4099      	lsls	r1, r3
 800119a:	000b      	movs	r3, r1
 800119c:	43d9      	mvns	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d007      	beq.n	80011be <HAL_ADC_ConfigChannel+0x1ae>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b11      	cmp	r3, #17
 80011b4:	d003      	beq.n	80011be <HAL_ADC_ConfigChannel+0x1ae>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d11c      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_ADC_ConfigChannel+0x204>)
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d007      	beq.n	80011da <HAL_ADC_ConfigChannel+0x1ca>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x1c6>
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <HAL_ADC_ConfigChannel+0x210>)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1cc>
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_ConfigChannel+0x214>)
 80011d8:	e000      	b.n	80011dc <HAL_ADC_ConfigChannel+0x1cc>
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x218>)
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_ADC_ConfigChannel+0x204>)
 80011de:	400b      	ands	r3, r1
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e009      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e8:	2220      	movs	r2, #32
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2234      	movs	r2, #52	; 0x34
 80011fc:	2100      	movs	r1, #0
 80011fe:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	781b      	ldrb	r3, [r3, #0]
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	00001001 	.word	0x00001001
 8001214:	40012708 	.word	0x40012708
 8001218:	20000000 	.word	0x20000000
 800121c:	000f4240 	.word	0x000f4240
 8001220:	ffbfffff 	.word	0xffbfffff
 8001224:	feffffff 	.word	0xfeffffff
 8001228:	ff7fffff 	.word	0xff7fffff

0800122c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0f0      	b.n	8001420 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2220      	movs	r2, #32
 8001242:	5c9b      	ldrb	r3, [r3, r2]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff fbfb 	bl	8000a48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001262:	f7ff fd5d 	bl	8000d20 <HAL_GetTick>
 8001266:	0003      	movs	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800126a:	e013      	b.n	8001294 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800126c:	f7ff fd58 	bl	8000d20 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d90c      	bls.n	8001294 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	0292      	lsls	r2, r2, #10
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	2105      	movs	r1, #5
 800128e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0c5      	b.n	8001420 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d0e5      	beq.n	800126c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2102      	movs	r1, #2
 80012ac:	438a      	bics	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b0:	f7ff fd36 	bl	8000d20 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b8:	e013      	b.n	80012e2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ba:	f7ff fd31 	bl	8000d20 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	d90c      	bls.n	80012e2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0292      	lsls	r2, r2, #10
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2220      	movs	r2, #32
 80012da:	2105      	movs	r1, #5
 80012dc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e09e      	b.n	8001420 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	4013      	ands	r3, r2
 80012ec:	d1e5      	bne.n	80012ba <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	438a      	bics	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e5b      	ldrb	r3, [r3, #25]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	438a      	bics	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7e9b      	ldrb	r3, [r3, #26]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2120      	movs	r1, #32
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2120      	movs	r1, #32
 8001368:	438a      	bics	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7edb      	ldrb	r3, [r3, #27]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2110      	movs	r1, #16
 8001380:	438a      	bics	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2110      	movs	r1, #16
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7f1b      	ldrb	r3, [r3, #28]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d108      	bne.n	80013b0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2108      	movs	r1, #8
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2108      	movs	r1, #8
 80013bc:	438a      	bics	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7f5b      	ldrb	r3, [r3, #29]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2104      	movs	r1, #4
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2104      	movs	r1, #4
 80013e6:	438a      	bics	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	431a      	orrs	r2, r3
 8001400:	0011      	movs	r1, r2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	2101      	movs	r1, #1
 800141c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b004      	add	sp, #16
 8001426:	bd80      	pop	{r7, pc}

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	0002      	movs	r2, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b7f      	cmp	r3, #127	; 0x7f
 800143c:	d828      	bhi.n	8001490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <__NVIC_SetPriority+0xd4>)
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	33c0      	adds	r3, #192	; 0xc0
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	589b      	ldr	r3, [r3, r2]
 800144e:	1dfa      	adds	r2, r7, #7
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	0011      	movs	r1, r2
 8001454:	2203      	movs	r2, #3
 8001456:	400a      	ands	r2, r1
 8001458:	00d2      	lsls	r2, r2, #3
 800145a:	21ff      	movs	r1, #255	; 0xff
 800145c:	4091      	lsls	r1, r2
 800145e:	000a      	movs	r2, r1
 8001460:	43d2      	mvns	r2, r2
 8001462:	401a      	ands	r2, r3
 8001464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	019b      	lsls	r3, r3, #6
 800146a:	22ff      	movs	r2, #255	; 0xff
 800146c:	401a      	ands	r2, r3
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	2303      	movs	r3, #3
 8001476:	4003      	ands	r3, r0
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <__NVIC_SetPriority+0xd4>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	430a      	orrs	r2, r1
 8001488:	33c0      	adds	r3, #192	; 0xc0
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800148e:	e031      	b.n	80014f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <__NVIC_SetPriority+0xd8>)
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0019      	movs	r1, r3
 8001498:	230f      	movs	r3, #15
 800149a:	400b      	ands	r3, r1
 800149c:	3b08      	subs	r3, #8
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3306      	adds	r3, #6
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	18d3      	adds	r3, r2, r3
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1dfa      	adds	r2, r7, #7
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	0011      	movs	r1, r2
 80014b0:	2203      	movs	r2, #3
 80014b2:	400a      	ands	r2, r1
 80014b4:	00d2      	lsls	r2, r2, #3
 80014b6:	21ff      	movs	r1, #255	; 0xff
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	43d2      	mvns	r2, r2
 80014be:	401a      	ands	r2, r3
 80014c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	019b      	lsls	r3, r3, #6
 80014c6:	22ff      	movs	r2, #255	; 0xff
 80014c8:	401a      	ands	r2, r3
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	2303      	movs	r3, #3
 80014d2:	4003      	ands	r3, r0
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <__NVIC_SetPriority+0xd8>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	001c      	movs	r4, r3
 80014e0:	230f      	movs	r3, #15
 80014e2:	4023      	ands	r3, r4
 80014e4:	3b08      	subs	r3, #8
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	430a      	orrs	r2, r1
 80014ea:	3306      	adds	r3, #6
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	18c3      	adds	r3, r0, r3
 80014f0:	3304      	adds	r3, #4
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b003      	add	sp, #12
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	045b      	lsls	r3, r3, #17
 8001514:	429a      	cmp	r2, r3
 8001516:	d301      	bcc.n	800151c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001518:	2301      	movs	r3, #1
 800151a:	e010      	b.n	800153e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <SysTick_Config+0x44>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	3a01      	subs	r2, #1
 8001522:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001524:	2301      	movs	r3, #1
 8001526:	425b      	negs	r3, r3
 8001528:	2103      	movs	r1, #3
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff ff7c 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x44>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x44>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	210f      	movs	r1, #15
 8001558:	187b      	adds	r3, r7, r1
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	187b      	adds	r3, r7, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b25b      	sxtb	r3, r3
 8001566:	0011      	movs	r1, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	b004      	add	sp, #16
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff ffbf 	bl	8001504 <SysTick_Config>
 8001586:	0003      	movs	r3, r0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b002      	add	sp, #8
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	e149      	b.n	8001834 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4091      	lsls	r1, r2
 80015aa:	000a      	movs	r2, r1
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_GPIO_Init+0x28>
 80015b6:	e13a      	b.n	800182e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	2201      	movs	r2, #1
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	4013      	ands	r3, r2
 800163a:	2b03      	cmp	r3, #3
 800163c:	d017      	beq.n	800166e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	409a      	lsls	r2, r3
 8001660:	0013      	movs	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2203      	movs	r2, #3
 8001674:	4013      	ands	r3, r2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d123      	bne.n	80016c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	08da      	lsrs	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3208      	adds	r2, #8
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	58d3      	ldr	r3, [r2, r3]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	220f      	movs	r2, #15
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2107      	movs	r1, #7
 80016a6:	400b      	ands	r3, r1
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	2203      	movs	r2, #3
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	43da      	mvns	r2, r3
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	029b      	lsls	r3, r3, #10
 80016fe:	4013      	ands	r3, r2
 8001700:	d100      	bne.n	8001704 <HAL_GPIO_Init+0x174>
 8001702:	e094      	b.n	800182e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_GPIO_Init+0x2bc>)
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <HAL_GPIO_Init+0x2bc>)
 800170a:	2101      	movs	r1, #1
 800170c:	430a      	orrs	r2, r1
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_GPIO_Init+0x2bc>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x2c0>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	589b      	ldr	r3, [r3, r2]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	409a      	lsls	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	2390      	movs	r3, #144	; 0x90
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	429a      	cmp	r2, r3
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_Init+0x1d6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a41      	ldr	r2, [pc, #260]	; (8001854 <HAL_GPIO_Init+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x1d2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a40      	ldr	r2, [pc, #256]	; (8001858 <HAL_GPIO_Init+0x2c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_Init+0x1ce>
 800175a:	2302      	movs	r3, #2
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x1d8>
 800175e:	2305      	movs	r3, #5
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x1d8>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x1d8>
 8001766:	2300      	movs	r3, #0
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	2103      	movs	r1, #3
 800176c:	400a      	ands	r2, r1
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x2c0>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_GPIO_Init+0x2cc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	035b      	lsls	r3, r3, #13
 800179e:	4013      	ands	r3, r2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	039b      	lsls	r3, r3, #14
 80017c8:	4013      	ands	r3, r2
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_GPIO_Init+0x2cc>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	029b      	lsls	r3, r3, #10
 80017f2:	4013      	ands	r3, r2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_GPIO_Init+0x2cc>)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_GPIO_Init+0x2cc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	4013      	ands	r3, r2
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_GPIO_Init+0x2cc>)
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	40da      	lsrs	r2, r3
 800183c:	1e13      	subs	r3, r2, #0
 800183e:	d000      	beq.n	8001842 <HAL_GPIO_Init+0x2b2>
 8001840:	e6ae      	b.n	80015a0 <HAL_GPIO_Init+0x10>
  } 
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	48000400 	.word	0x48000400
 8001858:	48000800 	.word	0x48000800
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	0008      	movs	r0, r1
 800186a:	0011      	movs	r1, r2
 800186c:	1cbb      	adds	r3, r7, #2
 800186e:	1c02      	adds	r2, r0, #0
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	1c7b      	adds	r3, r7, #1
 8001874:	1c0a      	adds	r2, r1, #0
 8001876:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	1c7b      	adds	r3, r7, #1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001880:	1cbb      	adds	r3, r7, #2
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001888:	e003      	b.n	8001892 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800188a:	1cbb      	adds	r3, r7, #2
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e082      	b.n	80019b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	; 0x41
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff f90d 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	2124      	movs	r1, #36	; 0x24
 80018d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_I2C_Init+0x120>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4931      	ldr	r1, [pc, #196]	; (80019c0 <HAL_I2C_Init+0x124>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0209      	lsls	r1, r1, #8
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e007      	b.n	800192a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2184      	movs	r1, #132	; 0x84
 8001924:	0209      	lsls	r1, r1, #8
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d104      	bne.n	800193c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	491f      	ldr	r1, [pc, #124]	; (80019c4 <HAL_I2C_Init+0x128>)
 8001948:	430a      	orrs	r2, r1
 800194a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	491a      	ldr	r1, [pc, #104]	; (80019c0 <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	431a      	orrs	r2, r3
 8001966:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69d9      	ldr	r1, [r3, #28]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1a      	ldr	r2, [r3, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2241      	movs	r2, #65	; 0x41
 80019a0:	2120      	movs	r1, #32
 80019a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2242      	movs	r2, #66	; 0x42
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	f0ffffff 	.word	0xf0ffffff
 80019c0:	ffff7fff 	.word	0xffff7fff
 80019c4:	02008000 	.word	0x02008000

080019c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	000c      	movs	r4, r1
 80019d2:	0010      	movs	r0, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	230a      	movs	r3, #10
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	1c22      	adds	r2, r4, #0
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	2308      	movs	r3, #8
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	1c02      	adds	r2, r0, #0
 80019e4:	801a      	strh	r2, [r3, #0]
 80019e6:	1dbb      	adds	r3, r7, #6
 80019e8:	1c0a      	adds	r2, r1, #0
 80019ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2241      	movs	r2, #65	; 0x41
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d000      	beq.n	80019fa <HAL_I2C_Mem_Write+0x32>
 80019f8:	e10c      	b.n	8001c14 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_I2C_Mem_Write+0x42>
 8001a00:	232c      	movs	r3, #44	; 0x2c
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0ff      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	5c9b      	ldrb	r3, [r3, r2]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_Mem_Write+0x5c>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0f8      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	2101      	movs	r1, #1
 8001a2a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f978 	bl	8000d20 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	0219      	lsls	r1, r3, #8
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2319      	movs	r3, #25
 8001a40:	2201      	movs	r2, #1
 8001a42:	f000 f975 	bl	8001d30 <I2C_WaitOnFlagUntilTimeout>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0e3      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2241      	movs	r2, #65	; 0x41
 8001a52:	2121      	movs	r1, #33	; 0x21
 8001a54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2242      	movs	r2, #66	; 0x42
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	222c      	movs	r2, #44	; 0x2c
 8001a6e:	18ba      	adds	r2, r7, r2
 8001a70:	8812      	ldrh	r2, [r2, #0]
 8001a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	881c      	ldrh	r4, [r3, #0]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	230a      	movs	r3, #10
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	8819      	ldrh	r1, [r3, #0]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	0023      	movs	r3, r4
 8001a96:	f000 f8c5 	bl	8001c24 <I2C_RequestMemoryWrite>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2240      	movs	r2, #64	; 0x40
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0b5      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2bff      	cmp	r3, #255	; 0xff
 8001ab2:	d911      	bls.n	8001ad8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	22ff      	movs	r2, #255	; 0xff
 8001ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	045c      	lsls	r4, r3, #17
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	8819      	ldrh	r1, [r3, #0]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	2300      	movs	r3, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	0023      	movs	r3, r4
 8001ad2:	f000 fb05 	bl	80020e0 <I2C_TransferConfig>
 8001ad6:	e012      	b.n	8001afe <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	049c      	lsls	r4, r3, #18
 8001aec:	230a      	movs	r3, #10
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	8819      	ldrh	r1, [r3, #0]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	0023      	movs	r3, r4
 8001afa:	f000 faf1 	bl	80020e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 f961 	bl	8001dcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e081      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03a      	beq.n	8001bc2 <HAL_I2C_Mem_Write+0x1fa>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d136      	bne.n	8001bc2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	f000 f8e5 	bl	8001d30 <I2C_WaitOnFlagUntilTimeout>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e053      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	d911      	bls.n	8001b9c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	22ff      	movs	r2, #255	; 0xff
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	045c      	lsls	r4, r3, #17
 8001b88:	230a      	movs	r3, #10
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	8819      	ldrh	r1, [r3, #0]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	2300      	movs	r3, #0
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	0023      	movs	r3, r4
 8001b96:	f000 faa3 	bl	80020e0 <I2C_TransferConfig>
 8001b9a:	e012      	b.n	8001bc2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	049c      	lsls	r4, r3, #18
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	8819      	ldrh	r1, [r3, #0]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	0023      	movs	r3, r4
 8001bbe:	f000 fa8f 	bl	80020e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d198      	bne.n	8001afe <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 f940 	bl	8001e58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bd8:	1e03      	subs	r3, r0, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e01a      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2220      	movs	r2, #32
 8001be6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	490b      	ldr	r1, [pc, #44]	; (8001c20 <HAL_I2C_Mem_Write+0x258>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2241      	movs	r2, #65	; 0x41
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2242      	movs	r2, #66	; 0x42
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b007      	add	sp, #28
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	fe00e800 	.word	0xfe00e800

08001c24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	000c      	movs	r4, r1
 8001c2e:	0010      	movs	r0, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	250a      	movs	r5, #10
 8001c34:	197b      	adds	r3, r7, r5
 8001c36:	1c22      	adds	r2, r4, #0
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	1c02      	adds	r2, r0, #0
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	1dbb      	adds	r3, r7, #6
 8001c44:	1c0a      	adds	r2, r1, #0
 8001c46:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c48:	1dbb      	adds	r3, r7, #6
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	045c      	lsls	r4, r3, #17
 8001c52:	197b      	adds	r3, r7, r5
 8001c54:	8819      	ldrh	r1, [r3, #0]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <I2C_RequestMemoryWrite+0xc4>)
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	0023      	movs	r3, r4
 8001c5e:	f000 fa3f 	bl	80020e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 f8af 	bl	8001dcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e033      	b.n	8001cde <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c76:	1dbb      	adds	r3, r7, #6
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7e:	2308      	movs	r3, #8
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c8c:	e019      	b.n	8001cc2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c8e:	2308      	movs	r3, #8
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	6a39      	ldr	r1, [r7, #32]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 f890 	bl	8001dcc <I2C_WaitOnTXISFlagUntilTimeout>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e014      	b.n	8001cde <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc2:	6a3a      	ldr	r2, [r7, #32]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	0013      	movs	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	f000 f82e 	bl	8001d30 <I2C_WaitOnFlagUntilTimeout>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d001      	beq.n	8001cdc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	0018      	movs	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b004      	add	sp, #16
 8001ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	80002000 	.word	0x80002000

08001cec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d103      	bne.n	8001d0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d007      	beq.n	8001d28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	430a      	orrs	r2, r1
 8001d26:	619a      	str	r2, [r3, #24]
  }
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d40:	e030      	b.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	d02d      	beq.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d48:	f7fe ffea 	bl	8000d20 <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d302      	bcc.n	8001d5e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d122      	bne.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	4013      	ands	r3, r2
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	4153      	adcs	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	001a      	movs	r2, r3
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d113      	bne.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	2220      	movs	r2, #32
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2241      	movs	r2, #65	; 0x41
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2242      	movs	r2, #66	; 0x42
 8001d94:	2100      	movs	r1, #0
 8001d96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e00f      	b.n	8001dc4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4013      	ands	r3, r2
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	425a      	negs	r2, r3
 8001db4:	4153      	adcs	r3, r2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	001a      	movs	r2, r3
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d0bf      	beq.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b004      	add	sp, #16
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dd8:	e032      	b.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 f87d 	bl	8001ee0 <I2C_IsErrorOccurred>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e030      	b.n	8001e50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	d025      	beq.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df4:	f7fe ff94 	bl	8000d20 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d302      	bcc.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11a      	bne.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d013      	beq.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2241      	movs	r2, #65	; 0x41
 8001e28:	2120      	movs	r1, #32
 8001e2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2242      	movs	r2, #66	; 0x42
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	2100      	movs	r1, #0
 8001e3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e007      	b.n	8001e50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d1c5      	bne.n	8001dda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e64:	e02f      	b.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 f837 	bl	8001ee0 <I2C_IsErrorOccurred>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e02d      	b.n	8001ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7a:	f7fe ff51 	bl	8000d20 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d302      	bcc.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11a      	bne.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2220      	movs	r2, #32
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d013      	beq.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2241      	movs	r2, #65	; 0x41
 8001eae:	2120      	movs	r1, #32
 8001eb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2242      	movs	r2, #66	; 0x42
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2240      	movs	r2, #64	; 0x40
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d1c8      	bne.n	8001e66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b004      	add	sp, #16
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2327      	movs	r3, #39	; 0x27
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2210      	movs	r2, #16
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <I2C_IsErrorOccurred+0x2e>
 8001f0c:	e082      	b.n	8002014 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2210      	movs	r2, #16
 8001f14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f16:	e060      	b.n	8001fda <I2C_IsErrorOccurred+0xfa>
 8001f18:	2427      	movs	r4, #39	; 0x27
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	193a      	adds	r2, r7, r4
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3301      	adds	r3, #1
 8001f26:	d058      	beq.n	8001fda <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f28:	f7fe fefa 	bl	8000d20 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d306      	bcc.n	8001f46 <I2C_IsErrorOccurred+0x66>
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	193a      	adds	r2, r7, r4
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d149      	bne.n	8001fda <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	01db      	lsls	r3, r3, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f54:	2013      	movs	r0, #19
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	2142      	movs	r1, #66	; 0x42
 8001f5c:	5c52      	ldrb	r2, [r2, r1]
 8001f5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d126      	bne.n	8001fc2 <I2C_IsErrorOccurred+0xe2>
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d021      	beq.n	8001fc2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d01d      	beq.n	8001fc2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	01c9      	lsls	r1, r1, #7
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f98:	f7fe fec2 	bl	8000d20 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa0:	e00f      	b.n	8001fc2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fa2:	f7fe febd 	bl	8000d20 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b19      	cmp	r3, #25
 8001fae:	d908      	bls.n	8001fc2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fb8:	2327      	movs	r3, #39	; 0x27
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]

              break;
 8001fc0:	e00b      	b.n	8001fda <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2127      	movs	r1, #39	; 0x27
 8001fce:	187a      	adds	r2, r7, r1
 8001fd0:	1879      	adds	r1, r7, r1
 8001fd2:	7809      	ldrb	r1, [r1, #0]
 8001fd4:	7011      	strb	r1, [r2, #0]
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d1e3      	bne.n	8001fa2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d004      	beq.n	8001ff2 <I2C_IsErrorOccurred+0x112>
 8001fe8:	2327      	movs	r3, #39	; 0x27
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d092      	beq.n	8001f18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ff2:	2327      	movs	r3, #39	; 0x27
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d103      	bne.n	8002004 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	2204      	movs	r2, #4
 8002008:	4313      	orrs	r3, r2
 800200a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800200c:	2327      	movs	r3, #39	; 0x27
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4013      	ands	r3, r2
 8002024:	d00c      	beq.n	8002040 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2201      	movs	r2, #1
 800202a:	4313      	orrs	r3, r2
 800202c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	0052      	lsls	r2, r2, #1
 8002036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002038:	2327      	movs	r3, #39	; 0x27
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4013      	ands	r3, r2
 8002048:	d00c      	beq.n	8002064 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2208      	movs	r2, #8
 800204e:	4313      	orrs	r3, r2
 8002050:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	00d2      	lsls	r2, r2, #3
 800205a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800205c:	2327      	movs	r3, #39	; 0x27
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d00c      	beq.n	8002088 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2202      	movs	r2, #2
 8002072:	4313      	orrs	r3, r2
 8002074:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002080:	2327      	movs	r3, #39	; 0x27
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002088:	2327      	movs	r3, #39	; 0x27
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01d      	beq.n	80020ce <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff fe29 	bl	8001cec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	490d      	ldr	r1, [pc, #52]	; (80020dc <I2C_IsErrorOccurred+0x1fc>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2241      	movs	r2, #65	; 0x41
 80020ba:	2120      	movs	r1, #32
 80020bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2242      	movs	r2, #66	; 0x42
 80020c2:	2100      	movs	r1, #0
 80020c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2240      	movs	r2, #64	; 0x40
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020ce:	2327      	movs	r3, #39	; 0x27
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b00b      	add	sp, #44	; 0x2c
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	fe00e800 	.word	0xfe00e800

080020e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	0008      	movs	r0, r1
 80020ea:	0011      	movs	r1, r2
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	240a      	movs	r4, #10
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	1c02      	adds	r2, r0, #0
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	2009      	movs	r0, #9
 80020f8:	183b      	adds	r3, r7, r0
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	059b      	lsls	r3, r3, #22
 8002104:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	0419      	lsls	r1, r3, #16
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002112:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	4313      	orrs	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212a:	0d51      	lsrs	r1, r2, #21
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	00d2      	lsls	r2, r2, #3
 8002130:	400a      	ands	r2, r1
 8002132:	4907      	ldr	r1, [pc, #28]	; (8002150 <I2C_TransferConfig+0x70>)
 8002134:	430a      	orrs	r2, r1
 8002136:	43d2      	mvns	r2, r2
 8002138:	401a      	ands	r2, r3
 800213a:	0011      	movs	r1, r2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b007      	add	sp, #28
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	03ff63ff 	.word	0x03ff63ff

08002154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2241      	movs	r2, #65	; 0x41
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	d138      	bne.n	80021dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002174:	2302      	movs	r3, #2
 8002176:	e032      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2241      	movs	r2, #65	; 0x41
 8002184:	2124      	movs	r1, #36	; 0x24
 8002186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4911      	ldr	r1, [pc, #68]	; (80021e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2241      	movs	r2, #65	; 0x41
 80021cc:	2120      	movs	r1, #32
 80021ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2240      	movs	r2, #64	; 0x40
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e000      	b.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
  }
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b002      	add	sp, #8
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	ffffefff 	.word	0xffffefff

080021ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2241      	movs	r2, #65	; 0x41
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d139      	bne.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2240      	movs	r2, #64	; 0x40
 8002206:	5c9b      	ldrb	r3, [r3, r2]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800220c:	2302      	movs	r3, #2
 800220e:	e033      	b.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2240      	movs	r2, #64	; 0x40
 8002214:	2101      	movs	r1, #1
 8002216:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2124      	movs	r1, #36	; 0x24
 800221e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2241      	movs	r2, #65	; 0x41
 8002266:	2120      	movs	r1, #32
 8002268:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	fffff0ff 	.word	0xfffff0ff

08002284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f000 fb76 	bl	8002984 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d100      	bne.n	80022a4 <HAL_RCC_OscConfig+0x20>
 80022a2:	e08e      	b.n	80023c2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022a4:	4bc5      	ldr	r3, [pc, #788]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	220c      	movs	r2, #12
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00e      	beq.n	80022ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b0:	4bc2      	ldr	r3, [pc, #776]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	220c      	movs	r2, #12
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d117      	bne.n	80022ec <HAL_RCC_OscConfig+0x68>
 80022bc:	4bbf      	ldr	r3, [pc, #764]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	401a      	ands	r2, r3
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d10e      	bne.n	80022ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ce:	4bbb      	ldr	r3, [pc, #748]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	029b      	lsls	r3, r3, #10
 80022d6:	4013      	ands	r3, r2
 80022d8:	d100      	bne.n	80022dc <HAL_RCC_OscConfig+0x58>
 80022da:	e071      	b.n	80023c0 <HAL_RCC_OscConfig+0x13c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d000      	beq.n	80022e6 <HAL_RCC_OscConfig+0x62>
 80022e4:	e06c      	b.n	80023c0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f000 fb4c 	bl	8002984 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x80>
 80022f4:	4bb1      	ldr	r3, [pc, #708]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	0249      	lsls	r1, r1, #9
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e02f      	b.n	8002364 <HAL_RCC_OscConfig+0xe0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <HAL_RCC_OscConfig+0xa2>
 800230c:	4bab      	ldr	r3, [pc, #684]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4baa      	ldr	r3, [pc, #680]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002312:	49ab      	ldr	r1, [pc, #684]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4ba8      	ldr	r3, [pc, #672]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4ba7      	ldr	r3, [pc, #668]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800231e:	49a9      	ldr	r1, [pc, #676]	; (80025c4 <HAL_RCC_OscConfig+0x340>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e01e      	b.n	8002364 <HAL_RCC_OscConfig+0xe0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0xc8>
 800232e:	4ba3      	ldr	r3, [pc, #652]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4ba2      	ldr	r3, [pc, #648]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	02c9      	lsls	r1, r1, #11
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	4b9f      	ldr	r3, [pc, #636]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	0249      	lsls	r1, r1, #9
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0xe0>
 800234c:	4b9b      	ldr	r3, [pc, #620]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b9a      	ldr	r3, [pc, #616]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002352:	499b      	ldr	r1, [pc, #620]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002354:	400a      	ands	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b98      	ldr	r3, [pc, #608]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800235e:	4999      	ldr	r1, [pc, #612]	; (80025c4 <HAL_RCC_OscConfig+0x340>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d014      	beq.n	8002396 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fcd8 	bl	8000d20 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002376:	f7fe fcd3 	bl	8000d20 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e2fd      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	029b      	lsls	r3, r3, #10
 8002390:	4013      	ands	r3, r2
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0xf2>
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fcc3 	bl	8000d20 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fcbe 	bl	8000d20 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e2e8      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	4b82      	ldr	r3, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x11c>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	d100      	bne.n	80023ce <HAL_RCC_OscConfig+0x14a>
 80023cc:	e06c      	b.n	80024a8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	220c      	movs	r2, #12
 80023d4:	4013      	ands	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d8:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	220c      	movs	r2, #12
 80023de:	4013      	ands	r3, r2
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d11f      	bne.n	8002424 <HAL_RCC_OscConfig+0x1a0>
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	401a      	ands	r2, r3
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d005      	beq.n	800240c <HAL_RCC_OscConfig+0x188>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2bb      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	22f8      	movs	r2, #248	; 0xf8
 8002412:	4393      	bics	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00da      	lsls	r2, r3, #3
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e041      	b.n	80024a8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d024      	beq.n	8002476 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b62      	ldr	r3, [pc, #392]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002432:	2101      	movs	r1, #1
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fc72 	bl	8000d20 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fc6d 	bl	8000d20 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e297      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d0f1      	beq.n	8002442 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b57      	ldr	r3, [pc, #348]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	22f8      	movs	r2, #248	; 0xf8
 8002464:	4393      	bics	r3, r2
 8002466:	0019      	movs	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	00da      	lsls	r2, r3, #3
 800246e:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e018      	b.n	80024a8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 800247c:	2101      	movs	r1, #1
 800247e:	438a      	bics	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fc4d 	bl	8000d20 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fc48 	bl	8000d20 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e272      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d1f1      	bne.n	800248c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2208      	movs	r2, #8
 80024ae:	4013      	ands	r3, r2
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d019      	beq.n	80024ee <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024be:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	430a      	orrs	r2, r1
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fc2b 	bl	8000d20 <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe fc26 	bl	8000d20 <HAL_GetTick>
 80024d4:	0002      	movs	r2, r0
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e250      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0f1      	beq.n	80024d0 <HAL_RCC_OscConfig+0x24c>
 80024ec:	e018      	b.n	8002520 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	438a      	bics	r2, r1
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fc11 	bl	8000d20 <HAL_GetTick>
 80024fe:	0003      	movs	r3, r0
 8002500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe fc0c 	bl	8000d20 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e236      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d1f1      	bne.n	8002504 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d100      	bne.n	800252c <HAL_RCC_OscConfig+0x2a8>
 800252a:	e0b5      	b.n	8002698 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252c:	201f      	movs	r0, #31
 800252e:	183b      	adds	r3, r7, r0
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	055b      	lsls	r3, r3, #21
 800253c:	4013      	ands	r3, r2
 800253e:	d110      	bne.n	8002562 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0549      	lsls	r1, r1, #21
 800254a:	430a      	orrs	r2, r1
 800254c:	61da      	str	r2, [r3, #28]
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	055b      	lsls	r3, r3, #21
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800255c:	183b      	adds	r3, r7, r0
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4013      	ands	r3, r2
 800256c:	d11a      	bne.n	80025a4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 8002574:	2180      	movs	r1, #128	; 0x80
 8002576:	0049      	lsls	r1, r1, #1
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257c:	f7fe fbd0 	bl	8000d20 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7fe fbcb 	bl	8000d20 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1f5      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10f      	bne.n	80025cc <HAL_RCC_OscConfig+0x348>
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	621a      	str	r2, [r3, #32]
 80025b8:	e036      	b.n	8002628 <HAL_RCC_OscConfig+0x3a4>
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	40021000 	.word	0x40021000
 80025c0:	fffeffff 	.word	0xfffeffff
 80025c4:	fffbffff 	.word	0xfffbffff
 80025c8:	40007000 	.word	0x40007000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10c      	bne.n	80025ee <HAL_RCC_OscConfig+0x36a>
 80025d4:	4bca      	ldr	r3, [pc, #808]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	4bc9      	ldr	r3, [pc, #804]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025da:	2101      	movs	r1, #1
 80025dc:	438a      	bics	r2, r1
 80025de:	621a      	str	r2, [r3, #32]
 80025e0:	4bc7      	ldr	r3, [pc, #796]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	4bc6      	ldr	r3, [pc, #792]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	2104      	movs	r1, #4
 80025e8:	438a      	bics	r2, r1
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e01c      	b.n	8002628 <HAL_RCC_OscConfig+0x3a4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x38c>
 80025f6:	4bc2      	ldr	r3, [pc, #776]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	4bc1      	ldr	r3, [pc, #772]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80025fc:	2104      	movs	r1, #4
 80025fe:	430a      	orrs	r2, r1
 8002600:	621a      	str	r2, [r3, #32]
 8002602:	4bbf      	ldr	r3, [pc, #764]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	4bbe      	ldr	r3, [pc, #760]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	621a      	str	r2, [r3, #32]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0x3a4>
 8002610:	4bbb      	ldr	r3, [pc, #748]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	4bba      	ldr	r3, [pc, #744]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002616:	2101      	movs	r1, #1
 8002618:	438a      	bics	r2, r1
 800261a:	621a      	str	r2, [r3, #32]
 800261c:	4bb8      	ldr	r3, [pc, #736]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	4bb7      	ldr	r3, [pc, #732]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002622:	2104      	movs	r1, #4
 8002624:	438a      	bics	r2, r1
 8002626:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7fe fb76 	bl	8000d20 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e009      	b.n	800264e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe fb71 	bl	8000d20 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4aaf      	ldr	r2, [pc, #700]	; (8002904 <HAL_RCC_OscConfig+0x680>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e19a      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264e:	4bac      	ldr	r3, [pc, #688]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x3b6>
 8002658:	e013      	b.n	8002682 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fb61 	bl	8000d20 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fb5c 	bl	8000d20 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	4aa5      	ldr	r2, [pc, #660]	; (8002904 <HAL_RCC_OscConfig+0x680>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e185      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	4ba1      	ldr	r3, [pc, #644]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002682:	231f      	movs	r3, #31
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b9c      	ldr	r3, [pc, #624]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	4b9b      	ldr	r3, [pc, #620]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002692:	499d      	ldr	r1, [pc, #628]	; (8002908 <HAL_RCC_OscConfig+0x684>)
 8002694:	400a      	ands	r2, r1
 8002696:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2210      	movs	r2, #16
 800269e:	4013      	ands	r3, r2
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d12a      	bne.n	8002700 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026aa:	4b95      	ldr	r3, [pc, #596]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ae:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026b0:	2104      	movs	r1, #4
 80026b2:	430a      	orrs	r2, r1
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80026b6:	4b92      	ldr	r3, [pc, #584]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ba:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026bc:	2101      	movs	r1, #1
 80026be:	430a      	orrs	r2, r1
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fb2d 	bl	8000d20 <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026cc:	f7fe fb28 	bl	8000d20 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e152      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d0f1      	beq.n	80026cc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026e8:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	22f8      	movs	r2, #248	; 0xf8
 80026ee:	4393      	bics	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	00da      	lsls	r2, r3, #3
 80026f8:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
 80026fe:	e034      	b.n	800276a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	3305      	adds	r3, #5
 8002706:	d111      	bne.n	800272c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002708:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800270a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270c:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800270e:	2104      	movs	r1, #4
 8002710:	438a      	bics	r2, r1
 8002712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002714:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	22f8      	movs	r2, #248	; 0xf8
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	00da      	lsls	r2, r3, #3
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002726:	430a      	orrs	r2, r1
 8002728:	635a      	str	r2, [r3, #52]	; 0x34
 800272a:	e01e      	b.n	800276a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800272c:	4b74      	ldr	r3, [pc, #464]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800272e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002730:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002732:	2104      	movs	r1, #4
 8002734:	430a      	orrs	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002738:	4b71      	ldr	r3, [pc, #452]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800273a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273c:	4b70      	ldr	r3, [pc, #448]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800273e:	2101      	movs	r1, #1
 8002740:	438a      	bics	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002744:	f7fe faec 	bl	8000d20 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800274e:	f7fe fae7 	bl	8000d20 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e111      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d1f1      	bne.n	800274e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	d05c      	beq.n	800282e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002774:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	220c      	movs	r2, #12
 800277a:	4013      	ands	r3, r2
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d00e      	beq.n	800279e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002780:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	220c      	movs	r2, #12
 8002786:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002788:	2b08      	cmp	r3, #8
 800278a:	d114      	bne.n	80027b6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800278c:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	23c0      	movs	r3, #192	; 0xc0
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	401a      	ands	r2, r3
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	429a      	cmp	r2, r3
 800279c:	d10b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800279e:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	4013      	ands	r3, r2
 80027a8:	d040      	beq.n	800282c <HAL_RCC_OscConfig+0x5a8>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d03c      	beq.n	800282c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e6      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80027be:	4b50      	ldr	r3, [pc, #320]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c2:	4b4f      	ldr	r3, [pc, #316]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0249      	lsls	r1, r1, #9
 80027c8:	430a      	orrs	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe faa8 	bl	8000d20 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d6:	f7fe faa3 	bl	8000d20 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0cd      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x552>
 80027f4:	e01b      	b.n	800282e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80027fc:	4943      	ldr	r1, [pc, #268]	; (800290c <HAL_RCC_OscConfig+0x688>)
 80027fe:	400a      	ands	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe fa8d 	bl	8000d20 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800280c:	f7fe fa88 	bl	8000d20 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b2      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x588>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800282c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d100      	bne.n	8002838 <HAL_RCC_OscConfig+0x5b4>
 8002836:	e0a4      	b.n	8002982 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	220c      	movs	r2, #12
 800283e:	4013      	ands	r3, r2
 8002840:	2b08      	cmp	r3, #8
 8002842:	d100      	bne.n	8002846 <HAL_RCC_OscConfig+0x5c2>
 8002844:	e078      	b.n	8002938 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b02      	cmp	r3, #2
 800284c:	d14c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002854:	492e      	ldr	r1, [pc, #184]	; (8002910 <HAL_RCC_OscConfig+0x68c>)
 8002856:	400a      	ands	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe fa61 	bl	8000d20 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fa5c 	bl	8000d20 <HAL_GetTick>
 8002868:	0002      	movs	r2, r0
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e086      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	049b      	lsls	r3, r3, #18
 800287e:	4013      	ands	r3, r2
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	220f      	movs	r2, #15
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002892:	430a      	orrs	r2, r1
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_RCC_OscConfig+0x690>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	431a      	orrs	r2, r3
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0449      	lsls	r1, r1, #17
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fa2f 	bl	8000d20 <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fa2a 	bl	8000d20 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e054      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	049b      	lsls	r3, r3, #18
 80028e2:	4013      	ands	r3, r2
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x644>
 80028e6:	e04c      	b.n	8002982 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_OscConfig+0x67c>)
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x68c>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fa14 	bl	8000d20 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fc:	e015      	b.n	800292a <HAL_RCC_OscConfig+0x6a6>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	40021000 	.word	0x40021000
 8002904:	00001388 	.word	0x00001388
 8002908:	efffffff 	.word	0xefffffff
 800290c:	fffeffff 	.word	0xfffeffff
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fa02 	bl	8000d20 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e02c      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_RCC_OscConfig+0x708>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	049b      	lsls	r3, r3, #18
 8002932:	4013      	ands	r3, r2
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x694>
 8002936:	e024      	b.n	8002982 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e01f      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x708>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_RCC_OscConfig+0x708>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	025b      	lsls	r3, r3, #9
 8002956:	401a      	ands	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	429a      	cmp	r2, r3
 800295e:	d10e      	bne.n	800297e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	220f      	movs	r2, #15
 8002964:	401a      	ands	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d107      	bne.n	800297e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	23f0      	movs	r3, #240	; 0xf0
 8002972:	039b      	lsls	r3, r3, #14
 8002974:	401a      	ands	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b008      	add	sp, #32
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0bf      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d911      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2201      	movs	r2, #1
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0a6      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2202      	movs	r2, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d015      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2204      	movs	r2, #4
 80029e6:	4013      	ands	r3, r2
 80029e8:	d006      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029ea:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 80029f0:	21e0      	movs	r1, #224	; 0xe0
 80029f2:	00c9      	lsls	r1, r1, #3
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	22f0      	movs	r2, #240	; 0xf0
 80029fe:	4393      	bics	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4013      	ands	r3, r2
 8002a14:	d04c      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	029b      	lsls	r3, r3, #10
 8002a26:	4013      	ands	r3, r2
 8002a28:	d120      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07a      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	049b      	lsls	r3, r3, #18
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d114      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06e      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e062      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e05b      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	4393      	bics	r3, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe f94e 	bl	8000d20 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a88:	e009      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8a:	f7fe f949 	bl	8000d20 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_RCC_ClockConfig+0x1a4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e042      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1ec      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d211      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x19c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e020      	b.n	8002b24 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4a11      	ldr	r2, [pc, #68]	; (8002b38 <HAL_RCC_ClockConfig+0x1a8>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	0019      	movs	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b00:	f000 f820 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002b04:	0001      	movs	r1, r0
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1a0>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	220f      	movs	r2, #15
 8002b0e:	4013      	ands	r3, r2
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1ac>)
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	000a      	movs	r2, r1
 8002b16:	40da      	lsrs	r2, r3
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f7fe f8b9 	bl	8000c94 <HAL_InitTick>
  
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	00001388 	.word	0x00001388
 8002b38:	fffff8ff 	.word	0xfffff8ff
 8002b3c:	080030ec 	.word	0x080030ec
 8002b40:	20000000 	.word	0x20000000

08002b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	220c      	movs	r2, #12
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d046      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xb8>
 8002b6e:	d848      	bhi.n	8002c02 <HAL_RCC_GetSysClockFreq+0xbe>
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d002      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0x36>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d003      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x3c>
 8002b78:	e043      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b7c:	613b      	str	r3, [r7, #16]
      break;
 8002b7e:	e043      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0c9b      	lsrs	r3, r3, #18
 8002b84:	220f      	movs	r2, #15
 8002b86:	4013      	ands	r3, r2
 8002b88:	4a24      	ldr	r2, [pc, #144]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xd8>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	220f      	movs	r2, #15
 8002b94:	4013      	ands	r3, r2
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	025b      	lsls	r3, r3, #9
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	481a      	ldr	r0, [pc, #104]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bb0:	f7fd faaa 	bl	8000108 <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4353      	muls	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	23c0      	movs	r3, #192	; 0xc0
 8002bc4:	025b      	lsls	r3, r3, #9
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d109      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	4814      	ldr	r0, [pc, #80]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002bd4:	f7fd fa98 	bl	8000108 <__udivsi3>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	001a      	movs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4353      	muls	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	4810      	ldr	r0, [pc, #64]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002be8:	f7fd fa8e 	bl	8000108 <__udivsi3>
 8002bec:	0003      	movs	r3, r0
 8002bee:	001a      	movs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4353      	muls	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	613b      	str	r3, [r7, #16]
      break;
 8002bfa:	e005      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002bfe:	613b      	str	r3, [r7, #16]
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xe4>)
 8002c04:	613b      	str	r3, [r7, #16]
      break;
 8002c06:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c08:	693b      	ldr	r3, [r7, #16]
}
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	01e84800 	.word	0x01e84800
 8002c1c:	080030fc 	.word	0x080030fc
 8002c20:	0800310c 	.word	0x0800310c
 8002c24:	02dc6c00 	.word	0x02dc6c00
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	025b      	lsls	r3, r3, #9
 8002c44:	4013      	ands	r3, r2
 8002c46:	d100      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002c48:	e08e      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2017      	movs	r0, #23
 8002c4c:	183b      	adds	r3, r7, r0
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	055b      	lsls	r3, r3, #21
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	0549      	lsls	r1, r1, #21
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
 8002c6c:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	055b      	lsls	r3, r3, #21
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	183b      	adds	r3, r7, r0
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d11a      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b58      	ldr	r3, [pc, #352]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	0049      	lsls	r1, r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe f841 	bl	8000d20 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7fe f83c 	bl	8000d20 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e097      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	23c0      	movs	r3, #192	; 0xc0
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d034      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	23c0      	movs	r3, #192	; 0xc0
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d02c      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cee:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0249      	lsls	r1, r1, #9
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfc:	4b3c      	ldr	r3, [pc, #240]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d02:	493e      	ldr	r1, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d08:	4b39      	ldr	r3, [pc, #228]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	4013      	ands	r3, r2
 8002d14:	d013      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe f803 	bl	8000d20 <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fd fffe 	bl	8000d20 <HAL_GetTick>
 8002d24:	0002      	movs	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	4a35      	ldr	r2, [pc, #212]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e058      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d52:	2317      	movs	r3, #23
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d62:	4928      	ldr	r1, [pc, #160]	; (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d64:	400a      	ands	r2, r1
 8002d66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	2203      	movs	r2, #3
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	2210      	movs	r2, #16
 8002d96:	4393      	bics	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	029b      	lsls	r3, r3, #10
 8002dac:	4013      	ands	r3, r2
 8002dae:	d009      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	4393      	bics	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2240      	movs	r2, #64	; 0x40
 8002dd6:	4393      	bics	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b006      	add	sp, #24
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40007000 	.word	0x40007000
 8002df8:	fffffcff 	.word	0xfffffcff
 8002dfc:	fffeffff 	.word	0xfffeffff
 8002e00:	00001388 	.word	0x00001388
 8002e04:	efffffff 	.word	0xefffffff

08002e08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e081      	b.n	8002f26 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7f5b      	ldrb	r3, [r3, #29]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fd fea3 	bl	8000b80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2210      	movs	r2, #16
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d05c      	beq.n	8002f08 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	22ca      	movs	r2, #202	; 0xca
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2253      	movs	r2, #83	; 0x53
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e5e:	250f      	movs	r5, #15
 8002e60:	197c      	adds	r4, r7, r5
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 f88f 	bl	8002f88 <RTC_EnterInitMode>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002e6e:	0028      	movs	r0, r5
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12c      	bne.n	8002ed2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	492b      	ldr	r1, [pc, #172]	; (8002f30 <HAL_RTC_Init+0x128>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	041a      	lsls	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ec4:	183c      	adds	r4, r7, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f8a0 	bl	800300e <RTC_ExitInitMode>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d110      	bne.n	8002efe <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4913      	ldr	r1, [pc, #76]	; (8002f34 <HAL_RTC_Init+0x12c>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	22ff      	movs	r2, #255	; 0xff
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
 8002f06:	e003      	b.n	8002f10 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	ff8fffbf 	.word	0xff8fffbf
 8002f34:	fffbffff 	.word	0xfffbffff

08002f38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_RTC_WaitForSynchro+0x4c>)
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f4c:	f7fd fee8 	bl	8000d20 <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f54:	e00a      	b.n	8002f6c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f56:	f7fd fee3 	bl	8000d20 <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad2      	subs	r2, r2, r3
 8002f60:	23fa      	movs	r3, #250	; 0xfa
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d901      	bls.n	8002f6c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e006      	b.n	8002f7a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2220      	movs	r2, #32
 8002f74:	4013      	ands	r3, r2
 8002f76:	d0ee      	beq.n	8002f56 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	00017959 	.word	0x00017959

08002f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d12b      	bne.n	8003000 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fd feb2 	bl	8000d20 <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fc0:	e013      	b.n	8002fea <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fc2:	f7fd fead 	bl	8000d20 <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	200f      	movs	r0, #15
 8002fce:	183b      	adds	r3, r7, r0
 8002fd0:	1839      	adds	r1, r7, r0
 8002fd2:	7809      	ldrb	r1, [r1, #0]
 8002fd4:	7019      	strb	r1, [r3, #0]
 8002fd6:	23fa      	movs	r3, #250	; 0xfa
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d905      	bls.n	8002fea <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2240      	movs	r2, #64	; 0x40
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d104      	bne.n	8003000 <RTC_EnterInitMode+0x78>
 8002ff6:	230f      	movs	r3, #15
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d1e0      	bne.n	8002fc2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bd80      	pop	{r7, pc}

0800300e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800300e:	b590      	push	{r4, r7, lr}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003016:	240f      	movs	r4, #15
 8003018:	193b      	adds	r3, r7, r4
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	438a      	bics	r2, r1
 800302c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2220      	movs	r2, #32
 8003036:	4013      	ands	r3, r2
 8003038:	d10b      	bne.n	8003052 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ff7b 	bl	8002f38 <HAL_RTC_WaitForSynchro>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d005      	beq.n	8003052 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2204      	movs	r2, #4
 800304a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800304c:	193b      	adds	r3, r7, r4
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003052:	230f      	movs	r3, #15
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	781b      	ldrb	r3, [r3, #0]
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b005      	add	sp, #20
 800305e:	bd90      	pop	{r4, r7, pc}

08003060 <memset>:
 8003060:	0003      	movs	r3, r0
 8003062:	1882      	adds	r2, r0, r2
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <__libc_init_array>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	2600      	movs	r6, #0
 8003074:	4c0c      	ldr	r4, [pc, #48]	; (80030a8 <__libc_init_array+0x38>)
 8003076:	4d0d      	ldr	r5, [pc, #52]	; (80030ac <__libc_init_array+0x3c>)
 8003078:	1b64      	subs	r4, r4, r5
 800307a:	10a4      	asrs	r4, r4, #2
 800307c:	42a6      	cmp	r6, r4
 800307e:	d109      	bne.n	8003094 <__libc_init_array+0x24>
 8003080:	2600      	movs	r6, #0
 8003082:	f000 f819 	bl	80030b8 <_init>
 8003086:	4c0a      	ldr	r4, [pc, #40]	; (80030b0 <__libc_init_array+0x40>)
 8003088:	4d0a      	ldr	r5, [pc, #40]	; (80030b4 <__libc_init_array+0x44>)
 800308a:	1b64      	subs	r4, r4, r5
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	42a6      	cmp	r6, r4
 8003090:	d105      	bne.n	800309e <__libc_init_array+0x2e>
 8003092:	bd70      	pop	{r4, r5, r6, pc}
 8003094:	00b3      	lsls	r3, r6, #2
 8003096:	58eb      	ldr	r3, [r5, r3]
 8003098:	4798      	blx	r3
 800309a:	3601      	adds	r6, #1
 800309c:	e7ee      	b.n	800307c <__libc_init_array+0xc>
 800309e:	00b3      	lsls	r3, r6, #2
 80030a0:	58eb      	ldr	r3, [r5, r3]
 80030a2:	4798      	blx	r3
 80030a4:	3601      	adds	r6, #1
 80030a6:	e7f2      	b.n	800308e <__libc_init_array+0x1e>
 80030a8:	0800311c 	.word	0x0800311c
 80030ac:	0800311c 	.word	0x0800311c
 80030b0:	08003120 	.word	0x08003120
 80030b4:	0800311c 	.word	0x0800311c

080030b8 <_init>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030be:	bc08      	pop	{r3}
 80030c0:	469e      	mov	lr, r3
 80030c2:	4770      	bx	lr

080030c4 <_fini>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr
