
Horn_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec4  08002ec4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08002ed8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002ed8  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009adc  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc7  00000000  00000000  00029b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ca  00000000  00000000  0002c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018500  00000000  00000000  0002c912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d421  00000000  00000000  00044e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c72e  00000000  00000000  00052233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023b4  00000000  00000000  000de964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e0d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e7c 	.word	0x08002e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e7c 	.word	0x08002e7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc7d 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8ad 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa17 	bl	8000660 <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f90f 	bl	8000454 <MX_ADC_Init>
  MX_CAN_Init();
 8000236:	f000 f975 	bl	8000524 <MX_CAN_Init>
  MX_I2C1_Init();
 800023a:	f000 f9a9 	bl	8000590 <MX_I2C1_Init>
  MX_RTC_Init();
 800023e:	f000 f9e7 	bl	8000610 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf [2];
  buf[0] = 0x0c;
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	220c      	movs	r2, #12
 8000246:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	705a      	strb	r2, [r3, #1]
  HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 800024e:	1dfc      	adds	r4, r7, #7
 8000250:	1d3a      	adds	r2, r7, #4
 8000252:	484c      	ldr	r0, [pc, #304]	; (8000384 <main+0x164>)
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2302      	movs	r3, #2
 800025c:	2144      	movs	r1, #68	; 0x44
 800025e:	f001 fb1f 	bl	80018a0 <HAL_I2C_Master_Transmit>
 8000262:	0003      	movs	r3, r0
 8000264:	7023      	strb	r3, [r4, #0]
  buf[0] = 0x0d;
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	220d      	movs	r2, #13
 800026a:	701a      	strb	r2, [r3, #0]
  result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 800026c:	1dfc      	adds	r4, r7, #7
 800026e:	1d3a      	adds	r2, r7, #4
 8000270:	4844      	ldr	r0, [pc, #272]	; (8000384 <main+0x164>)
 8000272:	23fa      	movs	r3, #250	; 0xfa
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2302      	movs	r3, #2
 800027a:	2144      	movs	r1, #68	; 0x44
 800027c:	f001 fb10 	bl	80018a0 <HAL_I2C_Master_Transmit>
 8000280:	0003      	movs	r3, r0
 8000282:	7023      	strb	r3, [r4, #0]
  buf[0] = 0x0e;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	220e      	movs	r2, #14
 8000288:	701a      	strb	r2, [r3, #0]
  result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 800028a:	1dfc      	adds	r4, r7, #7
 800028c:	1d3a      	adds	r2, r7, #4
 800028e:	483d      	ldr	r0, [pc, #244]	; (8000384 <main+0x164>)
 8000290:	23fa      	movs	r3, #250	; 0xfa
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2302      	movs	r3, #2
 8000298:	2144      	movs	r1, #68	; 0x44
 800029a:	f001 fb01 	bl	80018a0 <HAL_I2C_Master_Transmit>
 800029e:	0003      	movs	r3, r0
 80002a0:	7023      	strb	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 buf[0] = 0x04;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2204      	movs	r2, #4
 80002a6:	701a      	strb	r2, [r3, #0]
	 buf[1] = 0xff;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	22ff      	movs	r2, #255	; 0xff
 80002ac:	705a      	strb	r2, [r3, #1]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 80002ae:	1dfc      	adds	r4, r7, #7
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4834      	ldr	r0, [pc, #208]	; (8000384 <main+0x164>)
 80002b4:	23fa      	movs	r3, #250	; 0xfa
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2302      	movs	r3, #2
 80002bc:	2144      	movs	r1, #68	; 0x44
 80002be:	f001 faef 	bl	80018a0 <HAL_I2C_Master_Transmit>
 80002c2:	0003      	movs	r3, r0
 80002c4:	7023      	strb	r3, [r4, #0]
	 buf[0] = 0x05;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2205      	movs	r2, #5
 80002ca:	701a      	strb	r2, [r3, #0]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 80002cc:	1dfc      	adds	r4, r7, #7
 80002ce:	1d3a      	adds	r2, r7, #4
 80002d0:	482c      	ldr	r0, [pc, #176]	; (8000384 <main+0x164>)
 80002d2:	23fa      	movs	r3, #250	; 0xfa
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2302      	movs	r3, #2
 80002da:	2144      	movs	r1, #68	; 0x44
 80002dc:	f001 fae0 	bl	80018a0 <HAL_I2C_Master_Transmit>
 80002e0:	0003      	movs	r3, r0
 80002e2:	7023      	strb	r3, [r4, #0]
	 buf[0] = 0x06;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2206      	movs	r2, #6
 80002e8:	701a      	strb	r2, [r3, #0]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 80002ea:	1dfc      	adds	r4, r7, #7
 80002ec:	1d3a      	adds	r2, r7, #4
 80002ee:	4825      	ldr	r0, [pc, #148]	; (8000384 <main+0x164>)
 80002f0:	23fa      	movs	r3, #250	; 0xfa
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2302      	movs	r3, #2
 80002f8:	2144      	movs	r1, #68	; 0x44
 80002fa:	f001 fad1 	bl	80018a0 <HAL_I2C_Master_Transmit>
 80002fe:	0003      	movs	r3, r0
 8000300:	7023      	strb	r3, [r4, #0]

	 HAL_Delay(2000);
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	00db      	lsls	r3, r3, #3
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fc70 	bl	8000bec <HAL_Delay>
	 buf[0] = 0x04;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2204      	movs	r2, #4
 8000310:	701a      	strb	r2, [r3, #0]
	 buf[1] = 0x00;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	705a      	strb	r2, [r3, #1]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 8000318:	1dfc      	adds	r4, r7, #7
 800031a:	1d3a      	adds	r2, r7, #4
 800031c:	4819      	ldr	r0, [pc, #100]	; (8000384 <main+0x164>)
 800031e:	23fa      	movs	r3, #250	; 0xfa
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2302      	movs	r3, #2
 8000326:	2144      	movs	r1, #68	; 0x44
 8000328:	f001 faba 	bl	80018a0 <HAL_I2C_Master_Transmit>
 800032c:	0003      	movs	r3, r0
 800032e:	7023      	strb	r3, [r4, #0]
	 buf[0] = 0x05;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2205      	movs	r2, #5
 8000334:	701a      	strb	r2, [r3, #0]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 8000336:	1dfc      	adds	r4, r7, #7
 8000338:	1d3a      	adds	r2, r7, #4
 800033a:	4812      	ldr	r0, [pc, #72]	; (8000384 <main+0x164>)
 800033c:	23fa      	movs	r3, #250	; 0xfa
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2302      	movs	r3, #2
 8000344:	2144      	movs	r1, #68	; 0x44
 8000346:	f001 faab 	bl	80018a0 <HAL_I2C_Master_Transmit>
 800034a:	0003      	movs	r3, r0
 800034c:	7023      	strb	r3, [r4, #0]
	 buf[0] = 0x06;
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2206      	movs	r2, #6
 8000352:	701a      	strb	r2, [r3, #0]
	 result = HAL_I2C_Master_Transmit(&hi2c1, 0x22 << 1, buf, 2, 1000);
 8000354:	1dfc      	adds	r4, r7, #7
 8000356:	1d3a      	adds	r2, r7, #4
 8000358:	480a      	ldr	r0, [pc, #40]	; (8000384 <main+0x164>)
 800035a:	23fa      	movs	r3, #250	; 0xfa
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2302      	movs	r3, #2
 8000362:	2144      	movs	r1, #68	; 0x44
 8000364:	f001 fa9c 	bl	80018a0 <HAL_I2C_Master_Transmit>
 8000368:	0003      	movs	r3, r0
 800036a:	7023      	strb	r3, [r4, #0]

	 HAL_GPIO_TogglePin(GPIOA, RELAY2_Pin);
 800036c:	2390      	movs	r3, #144	; 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2110      	movs	r1, #16
 8000372:	0018      	movs	r0, r3
 8000374:	f001 f9e3 	bl	800173e <HAL_GPIO_TogglePin>

	 HAL_Delay(2000);
 8000378:	23fa      	movs	r3, #250	; 0xfa
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fc35 	bl	8000bec <HAL_Delay>
	 buf[0] = 0x04;
 8000382:	e78e      	b.n	80002a2 <main+0x82>
 8000384:	20000090 	.word	0x20000090

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b590      	push	{r4, r7, lr}
 800038a:	b099      	sub	sp, #100	; 0x64
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	242c      	movs	r4, #44	; 0x2c
 8000390:	193b      	adds	r3, r7, r4
 8000392:	0018      	movs	r0, r3
 8000394:	2334      	movs	r3, #52	; 0x34
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f002 fd43 	bl	8002e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039e:	231c      	movs	r3, #28
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	0018      	movs	r0, r3
 80003a4:	2310      	movs	r3, #16
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f002 fd3b 	bl	8002e24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	0018      	movs	r0, r3
 80003b2:	2318      	movs	r3, #24
 80003b4:	001a      	movs	r2, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	f002 fd34 	bl	8002e24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80003bc:	0021      	movs	r1, r4
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2213      	movs	r2, #19
 80003c2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2201      	movs	r2, #1
 80003c8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2201      	movs	r2, #1
 80003ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2201      	movs	r2, #1
 80003d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2210      	movs	r2, #16
 80003da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2210      	movs	r2, #16
 80003e0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fe2c 	bl	8002048 <HAL_RCC_OscConfig>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80003f4:	f000 f9ee 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	211c      	movs	r1, #28
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2207      	movs	r2, #7
 80003fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2201      	movs	r2, #1
 8000404:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2101      	movs	r1, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f002 f99c 	bl	8002754 <HAL_RCC_ClockConfig>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000420:	f000 f9d8 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <SystemClock_Config+0xc8>)
 8000428:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	22c0      	movs	r2, #192	; 0xc0
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	0018      	movs	r0, r3
 800043c:	f002 fad8 	bl	80029f0 <HAL_RCCEx_PeriphCLKConfig>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000444:	f000 f9c6 	bl	80007d4 <Error_Handler>
  }
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b019      	add	sp, #100	; 0x64
 800044e:	bd90      	pop	{r4, r7, pc}
 8000450:	00010020 	.word	0x00010020

08000454 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	0018      	movs	r0, r3
 800045e:	230c      	movs	r3, #12
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f002 fcde 	bl	8002e24 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000468:	4b2c      	ldr	r3, [pc, #176]	; (800051c <MX_ADC_Init+0xc8>)
 800046a:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <MX_ADC_Init+0xcc>)
 800046c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_ADC_Init+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <MX_ADC_Init+0xc8>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_ADC_Init+0xc8>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_ADC_Init+0xc8>)
 8000482:	2201      	movs	r2, #1
 8000484:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_ADC_Init+0xc8>)
 8000488:	2204      	movs	r2, #4
 800048a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_ADC_Init+0xc8>)
 800048e:	2200      	movs	r2, #0
 8000490:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_ADC_Init+0xc8>)
 8000494:	2200      	movs	r2, #0
 8000496:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000498:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_ADC_Init+0xc8>)
 800049a:	2201      	movs	r2, #1
 800049c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_ADC_Init+0xc8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_ADC_Init+0xc8>)
 80004a6:	22c2      	movs	r2, #194	; 0xc2
 80004a8:	32ff      	adds	r2, #255	; 0xff
 80004aa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC_Init+0xc8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <MX_ADC_Init+0xc8>)
 80004b4:	2224      	movs	r2, #36	; 0x24
 80004b6:	2100      	movs	r1, #0
 80004b8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_ADC_Init+0xc8>)
 80004bc:	2201      	movs	r2, #1
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_ADC_Init+0xc8>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fbb6 	bl	8000c34 <HAL_ADC_Init>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004cc:	f000 f982 	bl	80007d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2206      	movs	r2, #6
 80004d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	0152      	lsls	r2, r2, #5
 80004dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0552      	lsls	r2, r2, #21
 80004e4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004e6:	1d3a      	adds	r2, r7, #4
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_ADC_Init+0xc8>)
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fce1 	bl	8000eb4 <HAL_ADC_ConfigChannel>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80004f6:	f000 f96d 	bl	80007d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2209      	movs	r2, #9
 80004fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000500:	1d3a      	adds	r2, r7, #4
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_ADC_Init+0xc8>)
 8000504:	0011      	movs	r1, r2
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fcd4 	bl	8000eb4 <HAL_ADC_ConfigChannel>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000510:	f000 f960 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b004      	add	sp, #16
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000028 	.word	0x20000028
 8000520:	40012400 	.word	0x40012400

08000524 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_CAN_Init+0x64>)
 800052a:	4a18      	ldr	r2, [pc, #96]	; (800058c <MX_CAN_Init+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_CAN_Init+0x64>)
 8000530:	2204      	movs	r2, #4
 8000532:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_CAN_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_CAN_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_CAN_Init+0x64>)
 8000542:	22a0      	movs	r2, #160	; 0xa0
 8000544:	02d2      	lsls	r2, r2, #11
 8000546:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_CAN_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_CAN_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_CAN_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_CAN_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_CAN_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_CAN_Init+0x64>)
 8000568:	2200      	movs	r2, #0
 800056a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_CAN_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MX_CAN_Init+0x64>)
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fdab 	bl	80010d0 <HAL_CAN_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800057e:	f000 f929 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000068 	.word	0x20000068
 800058c:	40006400 	.word	0x40006400

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_I2C1_Init+0x74>)
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <MX_I2C1_Init+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_I2C1_Init+0x74>)
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_I2C1_Init+0x7c>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a6:	4b17      	ldr	r3, [pc, #92]	; (8000604 <MX_I2C1_Init+0x74>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C1_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f8d1 	bl	8001774 <HAL_I2C_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d6:	f000 f8fd 	bl	80007d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C1_Init+0x74>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fc9a 	bl	8001f18 <HAL_I2CEx_ConfigAnalogFilter>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e8:	f000 f8f4 	bl	80007d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_I2C1_Init+0x74>)
 80005ee:	2100      	movs	r1, #0
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fcdd 	bl	8001fb0 <HAL_I2CEx_ConfigDigitalFilter>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f8eb 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000090 	.word	0x20000090
 8000608:	40005400 	.word	0x40005400
 800060c:	0000020b 	.word	0x0000020b

08000610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_RTC_Init+0x44>)
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_RTC_Init+0x48>)
 8000618:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_RTC_Init+0x44>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_RTC_Init+0x44>)
 8000622:	2263      	movs	r2, #99	; 0x63
 8000624:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_RTC_Init+0x44>)
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <MX_RTC_Init+0x4c>)
 800062a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_RTC_Init+0x44>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_RTC_Init+0x44>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_RTC_Init+0x44>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_RTC_Init+0x44>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 fac3 	bl	8002bcc <HAL_RTC_Init>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800064a:	f000 f8c3 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000e4 	.word	0x200000e4
 8000658:	40002800 	.word	0x40002800
 800065c:	0000270f 	.word	0x0000270f

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	240c      	movs	r4, #12
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 fbd7 	bl	8002e24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b54      	ldr	r3, [pc, #336]	; (80007c8 <MX_GPIO_Init+0x168>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <MX_GPIO_Init+0x168>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	02c9      	lsls	r1, r1, #11
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <MX_GPIO_Init+0x168>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	02db      	lsls	r3, r3, #11
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <MX_GPIO_Init+0x168>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <MX_GPIO_Init+0x168>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	03c9      	lsls	r1, r1, #15
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <MX_GPIO_Init+0x168>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	03db      	lsls	r3, r3, #15
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b46      	ldr	r3, [pc, #280]	; (80007c8 <MX_GPIO_Init+0x168>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b45      	ldr	r3, [pc, #276]	; (80007c8 <MX_GPIO_Init+0x168>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <MX_GPIO_Init+0x168>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	029b      	lsls	r3, r3, #10
 80006c4:	4013      	ands	r3, r2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|RELAY2_Pin, GPIO_PIN_RESET);
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	2118      	movs	r1, #24
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f816 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006d8:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <MX_GPIO_Init+0x16c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	2168      	movs	r1, #104	; 0x68
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f810 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_RST_GPIO_Port, IO_RST_Pin, GPIO_PIN_SET);
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <MX_GPIO_Init+0x16c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f80a 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin CUR_FAULT_Pin START_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|CUR_FAULT_Pin|START_Pin;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	4a37      	ldr	r2, [pc, #220]	; (80007d0 <MX_GPIO_Init+0x170>)
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	193a      	adds	r2, r7, r4
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fe92 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_Pin RELAY2_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY2_Pin;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2218      	movs	r2, #24
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2203      	movs	r2, #3
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	193a      	adds	r2, r7, r4
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fe7f 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2220      	movs	r2, #32
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2201      	movs	r2, #1
 8000746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000748:	193a      	adds	r2, r7, r4
 800074a:	2390      	movs	r3, #144	; 0x90
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fe6f 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : HORN_IN_Pin */
  GPIO_InitStruct.Pin = HORN_IN_Pin;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HORN_IN_GPIO_Port, &GPIO_InitStruct);
 8000768:	193b      	adds	r3, r7, r4
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_GPIO_Init+0x16c>)
 800076c:	0019      	movs	r1, r3
 800076e:	0010      	movs	r0, r2
 8000770:	f000 fe60 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2208      	movs	r2, #8
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2203      	movs	r2, #3
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <MX_GPIO_Init+0x16c>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f000 fe4e 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_RST_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = IO_RST_Pin|LED1_Pin|LED2_Pin;
 8000798:	0021      	movs	r1, r4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2270      	movs	r2, #112	; 0x70
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <MX_GPIO_Init+0x16c>)
 80007b6:	0019      	movs	r1, r3
 80007b8:	0010      	movs	r0, r2
 80007ba:	f000 fe3b 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b009      	add	sp, #36	; 0x24
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000400 	.word	0x48000400
 80007d0:	00008084 	.word	0x00008084

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x50>)
 80007e8:	699a      	ldr	r2, [r3, #24]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_MspInit+0x50>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	619a      	str	r2, [r3, #24]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x50>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x50>)
 8000800:	69da      	ldr	r2, [r3, #28]
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_MspInit+0x50>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0549      	lsls	r1, r1, #21
 8000808:	430a      	orrs	r2, r1
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_MspInit+0x50>)
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	055b      	lsls	r3, r3, #21
 8000814:	4013      	ands	r3, r2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x54>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_MspInit+0x54>)
 8000820:	2110      	movs	r1, #16
 8000822:	430a      	orrs	r2, r1
 8000824:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2414      	movs	r4, #20
 8000842:	193b      	adds	r3, r7, r4
 8000844:	0018      	movs	r0, r3
 8000846:	2314      	movs	r3, #20
 8000848:	001a      	movs	r2, r3
 800084a:	2100      	movs	r1, #0
 800084c:	f002 faea 	bl	8002e24 <memset>
  if(hadc->Instance==ADC1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <HAL_ADC_MspInit+0xbc>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d148      	bne.n	80008ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0089      	lsls	r1, r1, #2
 8000864:	430a      	orrs	r2, r1
 8000866:	619a      	str	r2, [r3, #24]
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800086a:	699a      	ldr	r2, [r3, #24]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0289      	lsls	r1, r1, #10
 8000880:	430a      	orrs	r2, r1
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	029b      	lsls	r3, r3, #10
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	02c9      	lsls	r1, r1, #11
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_ADC_MspInit+0xc0>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	02db      	lsls	r3, r3, #11
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA6     ------> ADC_IN6
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = CUR_Pin;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2203      	movs	r2, #3
 80008b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CUR_GPIO_Port, &GPIO_InitStruct);
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	2390      	movs	r3, #144	; 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fdb3 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_Pin;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2202      	movs	r2, #2
 80008d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2203      	movs	r2, #3
 80008d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_ADC_MspInit+0xc4>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 fda4 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b00b      	add	sp, #44	; 0x2c
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	40012400 	.word	0x40012400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b08b      	sub	sp, #44	; 0x2c
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	2414      	movs	r4, #20
 800090a:	193b      	adds	r3, r7, r4
 800090c:	0018      	movs	r0, r3
 800090e:	2314      	movs	r3, #20
 8000910:	001a      	movs	r2, r3
 8000912:	2100      	movs	r1, #0
 8000914:	f002 fa86 	bl	8002e24 <memset>
  if(hcan->Instance==CAN)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_CAN_MspInit+0x94>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d133      	bne.n	800098a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_CAN_MspInit+0x98>)
 8000924:	69da      	ldr	r2, [r3, #28]
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_CAN_MspInit+0x98>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	0489      	lsls	r1, r1, #18
 800092c:	430a      	orrs	r2, r1
 800092e:	61da      	str	r2, [r3, #28]
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_CAN_MspInit+0x98>)
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	049b      	lsls	r3, r3, #18
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_CAN_MspInit+0x98>)
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_CAN_MspInit+0x98>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0289      	lsls	r1, r1, #10
 8000948:	430a      	orrs	r2, r1
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_CAN_MspInit+0x98>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	029b      	lsls	r3, r3, #10
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	22c0      	movs	r2, #192	; 0xc0
 800095e:	0152      	lsls	r2, r2, #5
 8000960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	0021      	movs	r1, r4
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2202      	movs	r2, #2
 8000968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2203      	movs	r2, #3
 8000974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2204      	movs	r2, #4
 800097a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	187a      	adds	r2, r7, r1
 800097e:	2390      	movs	r3, #144	; 0x90
 8000980:	05db      	lsls	r3, r3, #23
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f000 fd55 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b00b      	add	sp, #44	; 0x2c
 8000990:	bd90      	pop	{r4, r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40006400 	.word	0x40006400
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08b      	sub	sp, #44	; 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	2414      	movs	r4, #20
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f002 fa38 	bl	8002e24 <memset>
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <HAL_I2C_MspInit+0x90>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d132      	bne.n	8000a24 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	02c9      	lsls	r1, r1, #11
 80009c8:	430a      	orrs	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 80009ce:	695a      	ldr	r2, [r3, #20]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	02db      	lsls	r3, r3, #11
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	22c0      	movs	r2, #192	; 0xc0
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e2:	0021      	movs	r1, r4
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2212      	movs	r2, #18
 80009e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2203      	movs	r2, #3
 80009f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_I2C_MspInit+0x98>)
 8000a00:	0019      	movs	r1, r3
 8000a02:	0010      	movs	r0, r2
 8000a04:	f000 fd16 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	0389      	lsls	r1, r1, #14
 8000a12:	430a      	orrs	r2, r1
 8000a14:	61da      	str	r2, [r3, #28]
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_I2C_MspInit+0x94>)
 8000a18:	69da      	ldr	r2, [r3, #28]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	039b      	lsls	r3, r3, #14
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b00b      	add	sp, #44	; 0x2c
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400

08000a38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_RTC_MspInit+0x28>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_RTC_MspInit+0x2c>)
 8000a4c:	6a1a      	ldr	r2, [r3, #32]
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_RTC_MspInit+0x2c>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0209      	lsls	r1, r1, #8
 8000a54:	430a      	orrs	r2, r1
 8000a56:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40002800 	.word	0x40002800
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f892 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa4:	f7ff fff7 	bl	8000a96 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000aaa:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000aac:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <LoopForever+0xa>)
    CMP R1, R2
 8000ab0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ab2:	d105      	bne.n	8000ac0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ab6:	4912      	ldr	r1, [pc, #72]	; (8000b00 <LoopForever+0x12>)
    STR R1, [R0]
 8000ab8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000abc:	4912      	ldr	r1, [pc, #72]	; (8000b08 <LoopForever+0x1a>)
    STR R1, [R0]
 8000abe:	6001      	str	r1, [r0, #0]

08000ac0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ac2:	4913      	ldr	r1, [pc, #76]	; (8000b10 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <LoopForever+0x26>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ad8:	4c10      	ldr	r4, [pc, #64]	; (8000b1c <LoopForever+0x2e>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f002 f9a5 	bl	8002e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fb99 	bl	8000220 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000af4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000af8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000afc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b00:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b04:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b08:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	20000108 	.word	0x20000108

08000b20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_IRQHandler>
	...

08000b24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_Init+0x24>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_Init+0x24>)
 8000b2e:	2110      	movs	r1, #16
 8000b30:	430a      	orrs	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f809 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3a:	f7ff fe51 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b56:	681c      	ldr	r4, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x60>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	23fa      	movs	r3, #250	; 0xfa
 8000b60:	0098      	lsls	r0, r3, #2
 8000b62:	f7ff fad1 	bl	8000108 <__udivsi3>
 8000b66:	0003      	movs	r3, r0
 8000b68:	0019      	movs	r1, r3
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	f7ff facc 	bl	8000108 <__udivsi3>
 8000b70:	0003      	movs	r3, r0
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fc51 	bl	800141a <HAL_SYSTICK_Config>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e00f      	b.n	8000ba0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d80b      	bhi.n	8000b9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fc2e 	bl	80013f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_InitTick+0x64>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	18d2      	adds	r2, r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000104 	.word	0x20000104

08000bd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000104 	.word	0x20000104

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e125      	b.n	8000e9e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10a      	bne.n	8000c70 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2234      	movs	r2, #52	; 0x34
 8000c64:	2100      	movs	r1, #0
 8000c66:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fde4 	bl	8000838 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c74:	2210      	movs	r2, #16
 8000c76:	4013      	ands	r3, r2
 8000c78:	d000      	beq.n	8000c7c <HAL_ADC_Init+0x48>
 8000c7a:	e103      	b.n	8000e84 <HAL_ADC_Init+0x250>
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d000      	beq.n	8000c88 <HAL_ADC_Init+0x54>
 8000c86:	e0fd      	b.n	8000e84 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c92:	d000      	beq.n	8000c96 <HAL_ADC_Init+0x62>
 8000c94:	e0f6      	b.n	8000e84 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9a:	4a83      	ldr	r2, [pc, #524]	; (8000ea8 <HAL_ADC_Init+0x274>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d112      	bne.n	8000cda <HAL_ADC_Init+0xa6>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d009      	beq.n	8000cd6 <HAL_ADC_Init+0xa2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	401a      	ands	r2, r3
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d101      	bne.n	8000cda <HAL_ADC_Init+0xa6>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_ADC_Init+0xa8>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d116      	bne.n	8000d0e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2218      	movs	r2, #24
 8000ce8:	4393      	bics	r3, r2
 8000cea:	0019      	movs	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	0899      	lsrs	r1, r3, #2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4964      	ldr	r1, [pc, #400]	; (8000eac <HAL_ADC_Init+0x278>)
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7e1b      	ldrb	r3, [r3, #24]
 8000d22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e5b      	ldrb	r3, [r3, #25]
 8000d28:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7e9b      	ldrb	r3, [r3, #26]
 8000d30:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d32:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d002      	beq.n	8000d42 <HAL_ADC_Init+0x10e>
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	e000      	b.n	8000d44 <HAL_ADC_Init+0x110>
 8000d42:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d4a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d101      	bne.n	8000d58 <HAL_ADC_Init+0x124>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e000      	b.n	8000d5a <HAL_ADC_Init+0x126>
 8000d58:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d5a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2124      	movs	r1, #36	; 0x24
 8000d60:	5c5b      	ldrb	r3, [r3, r1]
 8000d62:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d64:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7edb      	ldrb	r3, [r3, #27]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d115      	bne.n	8000da0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e9b      	ldrb	r3, [r3, #26]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d105      	bne.n	8000d88 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	0252      	lsls	r2, r2, #9
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	e00b      	b.n	8000da0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d98:	2201      	movs	r2, #1
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69da      	ldr	r2, [r3, #28]
 8000da4:	23c2      	movs	r3, #194	; 0xc2
 8000da6:	33ff      	adds	r3, #255	; 0xff
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d007      	beq.n	8000dbc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000db4:	4313      	orrs	r3, r2
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68d9      	ldr	r1, [r3, #12]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	055b      	lsls	r3, r3, #21
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d01b      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d017      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d013      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d00f      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d00b      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d007      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b06      	cmp	r3, #6
 8000e06:	d003      	beq.n	8000e10 <HAL_ADC_Init+0x1dc>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	d112      	bne.n	8000e36 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2107      	movs	r1, #7
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6959      	ldr	r1, [r3, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_ADC_Init+0x27c>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d10b      	bne.n	8000e5e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e50:	2203      	movs	r2, #3
 8000e52:	4393      	bics	r3, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e5c:	e01c      	b.n	8000e98 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e62:	2212      	movs	r2, #18
 8000e64:	4393      	bics	r3, r2
 8000e66:	2210      	movs	r2, #16
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e72:	2201      	movs	r2, #1
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e82:	e009      	b.n	8000e98 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	2210      	movs	r2, #16
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	781b      	ldrb	r3, [r3, #0]
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	fffffefd 	.word	0xfffffefd
 8000eac:	fffe0219 	.word	0xfffe0219
 8000eb0:	833fffe7 	.word	0x833fffe7

08000eb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	055b      	lsls	r3, r3, #21
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d011      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x46>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d00d      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x46>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d009      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x46>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d005      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x46>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d001      	beq.n	8000efa <HAL_ADC_ConfigChannel+0x46>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2234      	movs	r2, #52	; 0x34
 8000efe:	5c9b      	ldrb	r3, [r3, r2]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x54>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e0d0      	b.n	80010aa <HAL_ADC_ConfigChannel+0x1f6>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2204      	movs	r2, #4
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d000      	beq.n	8000f1e <HAL_ADC_ConfigChannel+0x6a>
 8000f1c:	e0b4      	b.n	8001088 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a64      	ldr	r2, [pc, #400]	; (80010b4 <HAL_ADC_ConfigChannel+0x200>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d100      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x76>
 8000f28:	e082      	b.n	8001030 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2201      	movs	r2, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d037      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d033      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d02f      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d02b      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d027      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d023      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	2b06      	cmp	r3, #6
 8000f7a:	d01f      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d01b      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	2107      	movs	r1, #7
 8000f90:	400b      	ands	r3, r1
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d012      	beq.n	8000fbc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6959      	ldr	r1, [r3, #20]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	d007      	beq.n	8000fd4 <HAL_ADC_ConfigChannel+0x120>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	d003      	beq.n	8000fd4 <HAL_ADC_ConfigChannel+0x120>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d163      	bne.n	800109c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000fd4:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <HAL_ADC_ConfigChannel+0x204>)
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d009      	beq.n	8000ff4 <HAL_ADC_ConfigChannel+0x140>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d102      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x13a>
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	03db      	lsls	r3, r3, #15
 8000fec:	e004      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x144>
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	045b      	lsls	r3, r3, #17
 8000ff2:	e001      	b.n	8000ff8 <HAL_ADC_ConfigChannel+0x144>
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <HAL_ADC_ConfigChannel+0x204>)
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b10      	cmp	r3, #16
 8001004:	d14a      	bne.n	800109c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_ADC_ConfigChannel+0x208>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	492d      	ldr	r1, [pc, #180]	; (80010c0 <HAL_ADC_ConfigChannel+0x20c>)
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff f87b 	bl	8000108 <__udivsi3>
 8001012:	0003      	movs	r3, r0
 8001014:	001a      	movs	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	189b      	adds	r3, r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001020:	e002      	b.n	8001028 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3b01      	subs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x16e>
 800102e:	e035      	b.n	800109c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2101      	movs	r1, #1
 800103c:	4099      	lsls	r1, r3
 800103e:	000b      	movs	r3, r1
 8001040:	43d9      	mvns	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	400a      	ands	r2, r1
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b10      	cmp	r3, #16
 8001050:	d007      	beq.n	8001062 <HAL_ADC_ConfigChannel+0x1ae>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b11      	cmp	r3, #17
 8001058:	d003      	beq.n	8001062 <HAL_ADC_ConfigChannel+0x1ae>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d11c      	bne.n	800109c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_ADC_ConfigChannel+0x204>)
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b10      	cmp	r3, #16
 800106c:	d007      	beq.n	800107e <HAL_ADC_ConfigChannel+0x1ca>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b11      	cmp	r3, #17
 8001074:	d101      	bne.n	800107a <HAL_ADC_ConfigChannel+0x1c6>
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_ADC_ConfigChannel+0x210>)
 8001078:	e002      	b.n	8001080 <HAL_ADC_ConfigChannel+0x1cc>
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_ADC_ConfigChannel+0x214>)
 800107c:	e000      	b.n	8001080 <HAL_ADC_ConfigChannel+0x1cc>
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_ADC_ConfigChannel+0x218>)
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_ADC_ConfigChannel+0x204>)
 8001082:	400b      	ands	r3, r1
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e009      	b.n	800109c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108c:	2220      	movs	r2, #32
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001094:	230f      	movs	r3, #15
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2234      	movs	r2, #52	; 0x34
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010a4:	230f      	movs	r3, #15
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	00001001 	.word	0x00001001
 80010b8:	40012708 	.word	0x40012708
 80010bc:	20000000 	.word	0x20000000
 80010c0:	000f4240 	.word	0x000f4240
 80010c4:	ffbfffff 	.word	0xffbfffff
 80010c8:	feffffff 	.word	0xfeffffff
 80010cc:	ff7fffff 	.word	0xff7fffff

080010d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0f0      	b.n	80012c4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2220      	movs	r2, #32
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fc05 	bl	8000900 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001106:	f7ff fd67 	bl	8000bd8 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800110e:	e013      	b.n	8001138 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001110:	f7ff fd62 	bl	8000bd8 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90c      	bls.n	8001138 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	0292      	lsls	r2, r2, #10
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	2105      	movs	r1, #5
 8001132:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0c5      	b.n	80012c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d0e5      	beq.n	8001110 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2102      	movs	r1, #2
 8001150:	438a      	bics	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001154:	f7ff fd40 	bl	8000bd8 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800115c:	e013      	b.n	8001186 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800115e:	f7ff fd3b 	bl	8000bd8 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b0a      	cmp	r3, #10
 800116a:	d90c      	bls.n	8001186 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	0292      	lsls	r2, r2, #10
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2220      	movs	r2, #32
 800117e:	2105      	movs	r1, #5
 8001180:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e09e      	b.n	80012c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2202      	movs	r2, #2
 800118e:	4013      	ands	r3, r2
 8001190:	d1e5      	bne.n	800115e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7e1b      	ldrb	r3, [r3, #24]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d108      	bne.n	80011ac <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e007      	b.n	80011bc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	438a      	bics	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	430a      	orrs	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	438a      	bics	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7e9b      	ldrb	r3, [r3, #26]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2120      	movs	r1, #32
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e007      	b.n	8001210 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2120      	movs	r1, #32
 800120c:	438a      	bics	r2, r1
 800120e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7edb      	ldrb	r3, [r3, #27]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2110      	movs	r1, #16
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e007      	b.n	800123a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2110      	movs	r1, #16
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7f1b      	ldrb	r3, [r3, #28]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2108      	movs	r1, #8
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e007      	b.n	8001264 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2108      	movs	r1, #8
 8001260:	438a      	bics	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7f5b      	ldrb	r3, [r3, #29]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2104      	movs	r1, #4
 8001278:	430a      	orrs	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2104      	movs	r1, #4
 800128a:	438a      	bics	r2, r1
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	0011      	movs	r1, r2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	1e5a      	subs	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2220      	movs	r2, #32
 80012be:	2101      	movs	r1, #1
 80012c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b004      	add	sp, #16
 80012ca:	bd80      	pop	{r7, pc}

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	0002      	movs	r2, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	1dfb      	adds	r3, r7, #7
 80012d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b7f      	cmp	r3, #127	; 0x7f
 80012e0:	d828      	bhi.n	8001334 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e2:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <__NVIC_SetPriority+0xd4>)
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	33c0      	adds	r3, #192	; 0xc0
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	589b      	ldr	r3, [r3, r2]
 80012f2:	1dfa      	adds	r2, r7, #7
 80012f4:	7812      	ldrb	r2, [r2, #0]
 80012f6:	0011      	movs	r1, r2
 80012f8:	2203      	movs	r2, #3
 80012fa:	400a      	ands	r2, r1
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	21ff      	movs	r1, #255	; 0xff
 8001300:	4091      	lsls	r1, r2
 8001302:	000a      	movs	r2, r1
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	22ff      	movs	r2, #255	; 0xff
 8001310:	401a      	ands	r2, r3
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	2303      	movs	r3, #3
 800131a:	4003      	ands	r3, r0
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <__NVIC_SetPriority+0xd4>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	430a      	orrs	r2, r1
 800132c:	33c0      	adds	r3, #192	; 0xc0
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001332:	e031      	b.n	8001398 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <__NVIC_SetPriority+0xd8>)
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	0019      	movs	r1, r3
 800133c:	230f      	movs	r3, #15
 800133e:	400b      	ands	r3, r1
 8001340:	3b08      	subs	r3, #8
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3306      	adds	r3, #6
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	3304      	adds	r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	1dfa      	adds	r2, r7, #7
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	0011      	movs	r1, r2
 8001354:	2203      	movs	r2, #3
 8001356:	400a      	ands	r2, r1
 8001358:	00d2      	lsls	r2, r2, #3
 800135a:	21ff      	movs	r1, #255	; 0xff
 800135c:	4091      	lsls	r1, r2
 800135e:	000a      	movs	r2, r1
 8001360:	43d2      	mvns	r2, r2
 8001362:	401a      	ands	r2, r3
 8001364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	401a      	ands	r2, r3
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	0018      	movs	r0, r3
 8001374:	2303      	movs	r3, #3
 8001376:	4003      	ands	r3, r0
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <__NVIC_SetPriority+0xd8>)
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	001c      	movs	r4, r3
 8001384:	230f      	movs	r3, #15
 8001386:	4023      	ands	r3, r4
 8001388:	3b08      	subs	r3, #8
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	430a      	orrs	r2, r1
 800138e:	3306      	adds	r3, #6
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	18c3      	adds	r3, r0, r3
 8001394:	3304      	adds	r3, #4
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b003      	add	sp, #12
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	045b      	lsls	r3, r3, #17
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d301      	bcc.n	80013c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013bc:	2301      	movs	r3, #1
 80013be:	e010      	b.n	80013e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <SysTick_Config+0x44>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	3a01      	subs	r2, #1
 80013c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c8:	2301      	movs	r3, #1
 80013ca:	425b      	negs	r3, r3
 80013cc:	2103      	movs	r1, #3
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff ff7c 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x44>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x44>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	210f      	movs	r1, #15
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	1c02      	adds	r2, r0, #0
 8001400:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	187b      	adds	r3, r7, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ffbf 	bl	80013a8 <SysTick_Config>
 800142a:	0003      	movs	r3, r0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b002      	add	sp, #8
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e149      	b.n	80016d8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d100      	bne.n	800145c <HAL_GPIO_Init+0x28>
 800145a:	e13a      	b.n	80016d2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	2201      	movs	r2, #1
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d017      	beq.n	8001512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	58d3      	ldr	r3, [r2, r3]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2107      	movs	r1, #7
 800154a:	400b      	ands	r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	6939      	ldr	r1, [r7, #16]
 8001564:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	401a      	ands	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_GPIO_Init+0x174>
 80015a6:	e094      	b.n	80016d2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	589b      	ldr	r3, [r3, r2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	409a      	lsls	r2, r3
 80015da:	0013      	movs	r3, r2
 80015dc:	43da      	mvns	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	2390      	movs	r3, #144	; 0x90
 80015e8:	05db      	lsls	r3, r3, #23
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1d6>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1d2>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_GPIO_Init+0x2c8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1ce>
 80015fe:	2302      	movs	r3, #2
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x1d8>
 8001602:	2305      	movs	r3, #5
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x1d8>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x1d8>
 800160a:	2300      	movs	r3, #0
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	2103      	movs	r1, #3
 8001610:	400a      	ands	r2, r1
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2c0>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	035b      	lsls	r3, r3, #13
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_GPIO_Init+0x2cc>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	40da      	lsrs	r2, r3
 80016e0:	1e13      	subs	r3, r2, #0
 80016e2:	d000      	beq.n	80016e6 <HAL_GPIO_Init+0x2b2>
 80016e4:	e6ae      	b.n	8001444 <HAL_GPIO_Init+0x10>
  } 
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	0008      	movs	r0, r1
 800170e:	0011      	movs	r1, r2
 8001710:	1cbb      	adds	r3, r7, #2
 8001712:	1c02      	adds	r2, r0, #0
 8001714:	801a      	strh	r2, [r3, #0]
 8001716:	1c7b      	adds	r3, r7, #1
 8001718:	1c0a      	adds	r2, r1, #0
 800171a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171c:	1c7b      	adds	r3, r7, #1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001724:	1cbb      	adds	r3, r7, #2
 8001726:	881a      	ldrh	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	1cbb      	adds	r3, r7, #2
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	000a      	movs	r2, r1
 8001748:	1cbb      	adds	r3, r7, #2
 800174a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4013      	ands	r3, r2
 800175a:	041a      	lsls	r2, r3, #16
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	1cb9      	adds	r1, r7, #2
 8001762:	8809      	ldrh	r1, [r1, #0]
 8001764:	400b      	ands	r3, r1
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
}
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e082      	b.n	800188c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2241      	movs	r2, #65	; 0x41
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2240      	movs	r2, #64	; 0x40
 8001796:	2100      	movs	r1, #0
 8001798:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff f8fd 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2241      	movs	r2, #65	; 0x41
 80017a6:	2124      	movs	r1, #36	; 0x24
 80017a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4934      	ldr	r1, [pc, #208]	; (8001894 <HAL_I2C_Init+0x120>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4931      	ldr	r1, [pc, #196]	; (8001898 <HAL_I2C_Init+0x124>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d108      	bne.n	80017f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	0209      	lsls	r1, r1, #8
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e007      	b.n	8001802 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2184      	movs	r1, #132	; 0x84
 80017fc:	0209      	lsls	r1, r1, #8
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d104      	bne.n	8001814 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	491f      	ldr	r1, [pc, #124]	; (800189c <HAL_I2C_Init+0x128>)
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	491a      	ldr	r1, [pc, #104]	; (8001898 <HAL_I2C_Init+0x124>)
 8001830:	400a      	ands	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	431a      	orrs	r2, r3
 800183e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69d9      	ldr	r1, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1a      	ldr	r2, [r3, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2241      	movs	r2, #65	; 0x41
 8001878:	2120      	movs	r1, #32
 800187a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2242      	movs	r2, #66	; 0x42
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	0018      	movs	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}
 8001894:	f0ffffff 	.word	0xf0ffffff
 8001898:	ffff7fff 	.word	0xffff7fff
 800189c:	02008000 	.word	0x02008000

080018a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	0008      	movs	r0, r1
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	0019      	movs	r1, r3
 80018ae:	230a      	movs	r3, #10
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	1c02      	adds	r2, r0, #0
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	2308      	movs	r3, #8
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	1c0a      	adds	r2, r1, #0
 80018bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2241      	movs	r2, #65	; 0x41
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	d000      	beq.n	80018cc <HAL_I2C_Master_Transmit+0x2c>
 80018ca:	e0e7      	b.n	8001a9c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_I2C_Master_Transmit+0x3a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0e1      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2240      	movs	r2, #64	; 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018e2:	f7ff f979 	bl	8000bd8 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	0219      	lsls	r1, r3, #8
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2319      	movs	r3, #25
 80018f6:	2201      	movs	r2, #1
 80018f8:	f000 f8fc 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d001      	beq.n	8001904 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0cc      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2241      	movs	r2, #65	; 0x41
 8001908:	2121      	movs	r1, #33	; 0x21
 800190a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2242      	movs	r2, #66	; 0x42
 8001910:	2110      	movs	r1, #16
 8001912:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2208      	movs	r2, #8
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d911      	bls.n	800195e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	22ff      	movs	r2, #255	; 0xff
 800193e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001944:	b2da      	uxtb	r2, r3
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	045c      	lsls	r4, r3, #17
 800194a:	230a      	movs	r3, #10
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	8819      	ldrh	r1, [r3, #0]
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_I2C_Master_Transmit+0x208>)
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	0023      	movs	r3, r4
 8001958:	f000 faa4 	bl	8001ea4 <I2C_TransferConfig>
 800195c:	e075      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049c      	lsls	r4, r3, #18
 8001972:	230a      	movs	r3, #10
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	8819      	ldrh	r1, [r3, #0]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_I2C_Master_Transmit+0x208>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0023      	movs	r3, r4
 8001980:	f000 fa90 	bl	8001ea4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001984:	e061      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f8ff 	bl	8001b90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e081      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03a      	beq.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d136      	bne.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	0013      	movs	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	f000 f883 	bl	8001af4 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e053      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d911      	bls.n	8001a24 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045c      	lsls	r4, r3, #17
 8001a10:	230a      	movs	r3, #10
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	f000 fa41 	bl	8001ea4 <I2C_TransferConfig>
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	049c      	lsls	r4, r3, #18
 8001a38:	230a      	movs	r3, #10
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 fa2d 	bl	8001ea4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d198      	bne.n	8001986 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f8de 	bl	8001c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e01a      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <HAL_I2C_Master_Transmit+0x20c>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2242      	movs	r2, #66	; 0x42
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b007      	add	sp, #28
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	80002000 	.word	0x80002000
 8001aac:	fe00e800 	.word	0xfe00e800

08001ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d103      	bne.n	8001ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d007      	beq.n	8001aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	619a      	str	r2, [r3, #24]
  }
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b04:	e030      	b.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	d02d      	beq.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7ff f864 	bl	8000bd8 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d302      	bcc.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d122      	bne.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	425a      	negs	r2, r3
 8001b32:	4153      	adcs	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	001a      	movs	r2, r3
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d113      	bne.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b44:	2220      	movs	r2, #32
 8001b46:	431a      	orrs	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	2120      	movs	r1, #32
 8001b52:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2242      	movs	r2, #66	; 0x42
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2240      	movs	r2, #64	; 0x40
 8001b60:	2100      	movs	r1, #0
 8001b62:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e00f      	b.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4013      	ands	r3, r2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	425a      	negs	r2, r3
 8001b78:	4153      	adcs	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d0bf      	beq.n	8001b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b004      	add	sp, #16
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b9c:	e032      	b.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f87d 	bl	8001ca4 <I2C_IsErrorOccurred>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d001      	beq.n	8001bb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e030      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	d025      	beq.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb8:	f7ff f80e 	bl	8000bd8 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d302      	bcc.n	8001bce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11a      	bne.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d013      	beq.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	2220      	movs	r2, #32
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2241      	movs	r2, #65	; 0x41
 8001bec:	2120      	movs	r1, #32
 8001bee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2242      	movs	r2, #66	; 0x42
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2240      	movs	r2, #64	; 0x40
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e007      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d1c5      	bne.n	8001b9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c28:	e02f      	b.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f837 	bl	8001ca4 <I2C_IsErrorOccurred>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e02d      	b.n	8001c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe ffcb 	bl	8000bd8 <HAL_GetTick>
 8001c42:	0002      	movs	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11a      	bne.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d013      	beq.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	2220      	movs	r2, #32
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2241      	movs	r2, #65	; 0x41
 8001c72:	2120      	movs	r1, #32
 8001c74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2242      	movs	r2, #66	; 0x42
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	2100      	movs	r1, #0
 8001c84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e007      	b.n	8001c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2220      	movs	r2, #32
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d1c8      	bne.n	8001c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b004      	add	sp, #16
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2327      	movs	r3, #39	; 0x27
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <I2C_IsErrorOccurred+0x2e>
 8001cd0:	e082      	b.n	8001dd8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cda:	e060      	b.n	8001d9e <I2C_IsErrorOccurred+0xfa>
 8001cdc:	2427      	movs	r4, #39	; 0x27
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	193a      	adds	r2, r7, r4
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	d058      	beq.n	8001d9e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7fe ff74 	bl	8000bd8 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d306      	bcc.n	8001d0a <I2C_IsErrorOccurred+0x66>
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	193a      	adds	r2, r7, r4
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d149      	bne.n	8001d9e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	01db      	lsls	r3, r3, #7
 8001d14:	4013      	ands	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d18:	2013      	movs	r0, #19
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	2142      	movs	r1, #66	; 0x42
 8001d20:	5c52      	ldrb	r2, [r2, r1]
 8001d22:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d126      	bne.n	8001d86 <I2C_IsErrorOccurred+0xe2>
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d021      	beq.n	8001d86 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d01d      	beq.n	8001d86 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	01c9      	lsls	r1, r1, #7
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d5c:	f7fe ff3c 	bl	8000bd8 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d64:	e00f      	b.n	8001d86 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d66:	f7fe ff37 	bl	8000bd8 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b19      	cmp	r3, #25
 8001d72:	d908      	bls.n	8001d86 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2220      	movs	r2, #32
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d7c:	2327      	movs	r3, #39	; 0x27
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]

              break;
 8001d84:	e00b      	b.n	8001d9e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2127      	movs	r1, #39	; 0x27
 8001d92:	187a      	adds	r2, r7, r1
 8001d94:	1879      	adds	r1, r7, r1
 8001d96:	7809      	ldrb	r1, [r1, #0]
 8001d98:	7011      	strb	r1, [r2, #0]
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d1e3      	bne.n	8001d66 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2220      	movs	r2, #32
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d004      	beq.n	8001db6 <I2C_IsErrorOccurred+0x112>
 8001dac:	2327      	movs	r3, #39	; 0x27
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d092      	beq.n	8001cdc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001db6:	2327      	movs	r3, #39	; 0x27
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd0:	2327      	movs	r3, #39	; 0x27
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d00c      	beq.n	8001e04 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2201      	movs	r2, #1
 8001dee:	4313      	orrs	r3, r2
 8001df0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	0052      	lsls	r2, r2, #1
 8001dfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dfc:	2327      	movs	r3, #39	; 0x27
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d00c      	beq.n	8001e28 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	2208      	movs	r2, #8
 8001e12:	4313      	orrs	r3, r2
 8001e14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	00d2      	lsls	r2, r2, #3
 8001e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e20:	2327      	movs	r3, #39	; 0x27
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d00c      	beq.n	8001e4c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4313      	orrs	r3, r2
 8001e38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e44:	2327      	movs	r3, #39	; 0x27
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e4c:	2327      	movs	r3, #39	; 0x27
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01d      	beq.n	8001e92 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff fe29 	bl	8001ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <I2C_IsErrorOccurred+0x1fc>)
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2241      	movs	r2, #65	; 0x41
 8001e7e:	2120      	movs	r1, #32
 8001e80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2242      	movs	r2, #66	; 0x42
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2240      	movs	r2, #64	; 0x40
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001e92:	2327      	movs	r3, #39	; 0x27
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	781b      	ldrb	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b00b      	add	sp, #44	; 0x2c
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	fe00e800 	.word	0xfe00e800

08001ea4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	240a      	movs	r4, #10
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	2009      	movs	r0, #9
 8001ebc:	183b      	adds	r3, r7, r0
 8001ebe:	1c0a      	adds	r2, r1, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	059b      	lsls	r3, r3, #22
 8001ec8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	0419      	lsls	r1, r3, #16
 8001ed0:	23ff      	movs	r3, #255	; 0xff
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ed6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	085b      	lsrs	r3, r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eee:	0d51      	lsrs	r1, r2, #21
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	00d2      	lsls	r2, r2, #3
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	4907      	ldr	r1, [pc, #28]	; (8001f14 <I2C_TransferConfig+0x70>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	43d2      	mvns	r2, r2
 8001efc:	401a      	ands	r2, r3
 8001efe:	0011      	movs	r1, r2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b007      	add	sp, #28
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	03ff63ff 	.word	0x03ff63ff

08001f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2241      	movs	r2, #65	; 0x41
 8001f26:	5c9b      	ldrb	r3, [r3, r2]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d138      	bne.n	8001fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e032      	b.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	2101      	movs	r1, #1
 8001f42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2241      	movs	r2, #65	; 0x41
 8001f48:	2124      	movs	r1, #36	; 0x24
 8001f4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4911      	ldr	r1, [pc, #68]	; (8001fac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2241      	movs	r2, #65	; 0x41
 8001f90:	2120      	movs	r1, #32
 8001f92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	ffffefff 	.word	0xffffefff

08001fb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2241      	movs	r2, #65	; 0x41
 8001fbe:	5c9b      	ldrb	r3, [r3, r2]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d139      	bne.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e033      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	2101      	movs	r1, #1
 8001fda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2241      	movs	r2, #65	; 0x41
 8001fe0:	2124      	movs	r1, #36	; 0x24
 8001fe2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	438a      	bics	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2241      	movs	r2, #65	; 0x41
 800202a:	2120      	movs	r1, #32
 800202c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
  }
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}
 8002044:	fffff0ff 	.word	0xfffff0ff

08002048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f000 fb76 	bl	8002748 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d100      	bne.n	8002068 <HAL_RCC_OscConfig+0x20>
 8002066:	e08e      	b.n	8002186 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002068:	4bc5      	ldr	r3, [pc, #788]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	220c      	movs	r2, #12
 800206e:	4013      	ands	r3, r2
 8002070:	2b04      	cmp	r3, #4
 8002072:	d00e      	beq.n	8002092 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002074:	4bc2      	ldr	r3, [pc, #776]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	220c      	movs	r2, #12
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d117      	bne.n	80020b0 <HAL_RCC_OscConfig+0x68>
 8002080:	4bbf      	ldr	r3, [pc, #764]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	23c0      	movs	r3, #192	; 0xc0
 8002086:	025b      	lsls	r3, r3, #9
 8002088:	401a      	ands	r2, r3
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	025b      	lsls	r3, r3, #9
 800208e:	429a      	cmp	r2, r3
 8002090:	d10e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	4bbb      	ldr	r3, [pc, #748]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	4013      	ands	r3, r2
 800209c:	d100      	bne.n	80020a0 <HAL_RCC_OscConfig+0x58>
 800209e:	e071      	b.n	8002184 <HAL_RCC_OscConfig+0x13c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d000      	beq.n	80020aa <HAL_RCC_OscConfig+0x62>
 80020a8:	e06c      	b.n	8002184 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f000 fb4c 	bl	8002748 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x80>
 80020b8:	4bb1      	ldr	r3, [pc, #708]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4bb0      	ldr	r3, [pc, #704]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	0249      	lsls	r1, r1, #9
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e02f      	b.n	8002128 <HAL_RCC_OscConfig+0xe0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10c      	bne.n	80020ea <HAL_RCC_OscConfig+0xa2>
 80020d0:	4bab      	ldr	r3, [pc, #684]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4baa      	ldr	r3, [pc, #680]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020d6:	49ab      	ldr	r1, [pc, #684]	; (8002384 <HAL_RCC_OscConfig+0x33c>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4ba8      	ldr	r3, [pc, #672]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4ba7      	ldr	r3, [pc, #668]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020e2:	49a9      	ldr	r1, [pc, #676]	; (8002388 <HAL_RCC_OscConfig+0x340>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e01e      	b.n	8002128 <HAL_RCC_OscConfig+0xe0>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d10e      	bne.n	8002110 <HAL_RCC_OscConfig+0xc8>
 80020f2:	4ba3      	ldr	r3, [pc, #652]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4ba2      	ldr	r3, [pc, #648]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	02c9      	lsls	r1, r1, #11
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4b9f      	ldr	r3, [pc, #636]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b9e      	ldr	r3, [pc, #632]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	0249      	lsls	r1, r1, #9
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0xe0>
 8002110:	4b9b      	ldr	r3, [pc, #620]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b9a      	ldr	r3, [pc, #616]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002116:	499b      	ldr	r1, [pc, #620]	; (8002384 <HAL_RCC_OscConfig+0x33c>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4b98      	ldr	r3, [pc, #608]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b97      	ldr	r3, [pc, #604]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002122:	4999      	ldr	r1, [pc, #612]	; (8002388 <HAL_RCC_OscConfig+0x340>)
 8002124:	400a      	ands	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d014      	beq.n	800215a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fd52 	bl	8000bd8 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213a:	f7fe fd4d 	bl	8000bd8 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e2fd      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214c:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	4013      	ands	r3, r2
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0xf2>
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fd3d 	bl	8000bd8 <HAL_GetTick>
 800215e:	0003      	movs	r3, r0
 8002160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe fd38 	bl	8000bd8 <HAL_GetTick>
 8002168:	0002      	movs	r2, r0
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e2e8      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	4b82      	ldr	r3, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4013      	ands	r3, r2
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x11c>
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x14a>
 8002190:	e06c      	b.n	800226c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	220c      	movs	r2, #12
 8002198:	4013      	ands	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	220c      	movs	r2, #12
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11f      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1a0>
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	23c0      	movs	r3, #192	; 0xc0
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	401a      	ands	r2, r3
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b71      	ldr	r3, [pc, #452]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2202      	movs	r2, #2
 80021c0:	4013      	ands	r3, r2
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x188>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e2bb      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	22f8      	movs	r2, #248	; 0xf8
 80021d6:	4393      	bics	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00da      	lsls	r2, r3, #3
 80021e0:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e041      	b.n	800226c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d024      	beq.n	800223a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fcec 	bl	8000bd8 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7fe fce7 	bl	8000bd8 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e297      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d0f1      	beq.n	8002206 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22f8      	movs	r2, #248	; 0xf8
 8002228:	4393      	bics	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	00da      	lsls	r2, r3, #3
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e018      	b.n	800226c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002240:	2101      	movs	r1, #1
 8002242:	438a      	bics	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe fcc7 	bl	8000bd8 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7fe fcc2 	bl	8000bd8 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e272      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d1f1      	bne.n	8002250 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	d036      	beq.n	80022e4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b40      	ldr	r3, [pc, #256]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002282:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe fca5 	bl	8000bd8 <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe fca0 	bl	8000bd8 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e250      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	d0f1      	beq.n	8002294 <HAL_RCC_OscConfig+0x24c>
 80022b0:	e018      	b.n	80022e4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fc8b 	bl	8000bd8 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c8:	f7fe fc86 	bl	8000bd8 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e236      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d1f1      	bne.n	80022c8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2204      	movs	r2, #4
 80022ea:	4013      	ands	r3, r2
 80022ec:	d100      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e0b5      	b.n	800245c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f0:	201f      	movs	r0, #31
 80022f2:	183b      	adds	r3, r7, r0
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	4013      	ands	r3, r2
 8002302:	d110      	bne.n	8002326 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0549      	lsls	r1, r1, #21
 800230e:	430a      	orrs	r2, r1
 8002310:	61da      	str	r2, [r3, #28]
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002320:	183b      	adds	r3, r7, r0
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x344>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d11a      	bne.n	8002368 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_RCC_OscConfig+0x344>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_RCC_OscConfig+0x344>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	0049      	lsls	r1, r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe fc4a 	bl	8000bd8 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7fe fc45 	bl	8000bd8 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1f5      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_OscConfig+0x344>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10f      	bne.n	8002390 <HAL_RCC_OscConfig+0x348>
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002372:	6a1a      	ldr	r2, [r3, #32]
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_RCC_OscConfig+0x338>)
 8002376:	2101      	movs	r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	621a      	str	r2, [r3, #32]
 800237c:	e036      	b.n	80023ec <HAL_RCC_OscConfig+0x3a4>
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	fffbffff 	.word	0xfffbffff
 800238c:	40007000 	.word	0x40007000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x36a>
 8002398:	4bca      	ldr	r3, [pc, #808]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	4bc9      	ldr	r3, [pc, #804]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	4bc7      	ldr	r3, [pc, #796]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bc6      	ldr	r3, [pc, #792]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023aa:	2104      	movs	r1, #4
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	e01c      	b.n	80023ec <HAL_RCC_OscConfig+0x3a4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x38c>
 80023ba:	4bc2      	ldr	r3, [pc, #776]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	4bc1      	ldr	r3, [pc, #772]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023c0:	2104      	movs	r1, #4
 80023c2:	430a      	orrs	r2, r1
 80023c4:	621a      	str	r2, [r3, #32]
 80023c6:	4bbf      	ldr	r3, [pc, #764]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	4bbe      	ldr	r3, [pc, #760]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	621a      	str	r2, [r3, #32]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x3a4>
 80023d4:	4bbb      	ldr	r3, [pc, #748]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4bba      	ldr	r3, [pc, #744]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	621a      	str	r2, [r3, #32]
 80023e0:	4bb8      	ldr	r3, [pc, #736]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	4bb7      	ldr	r3, [pc, #732]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80023e6:	2104      	movs	r1, #4
 80023e8:	438a      	bics	r2, r1
 80023ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d014      	beq.n	800241e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fbf0 	bl	8000bd8 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e009      	b.n	8002412 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe fbeb 	bl	8000bd8 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4aaf      	ldr	r2, [pc, #700]	; (80026c8 <HAL_RCC_OscConfig+0x680>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e19a      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	4bac      	ldr	r3, [pc, #688]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x3b6>
 800241c:	e013      	b.n	8002446 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fbdb 	bl	8000bd8 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	e009      	b.n	800243c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fbd6 	bl	8000bd8 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	4aa5      	ldr	r2, [pc, #660]	; (80026c8 <HAL_RCC_OscConfig+0x680>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e185      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4ba1      	ldr	r3, [pc, #644]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2202      	movs	r2, #2
 8002442:	4013      	ands	r3, r2
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002446:	231f      	movs	r3, #31
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b9c      	ldr	r3, [pc, #624]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	4b9b      	ldr	r3, [pc, #620]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002456:	499d      	ldr	r1, [pc, #628]	; (80026cc <HAL_RCC_OscConfig+0x684>)
 8002458:	400a      	ands	r2, r1
 800245a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2210      	movs	r2, #16
 8002462:	4013      	ands	r3, r2
 8002464:	d063      	beq.n	800252e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12a      	bne.n	80024c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800246e:	4b95      	ldr	r3, [pc, #596]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002472:	4b94      	ldr	r3, [pc, #592]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002474:	2104      	movs	r1, #4
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800247a:	4b92      	ldr	r3, [pc, #584]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	4b91      	ldr	r3, [pc, #580]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002480:	2101      	movs	r1, #1
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7fe fba7 	bl	8000bd8 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002490:	f7fe fba2 	bl	8000bd8 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e152      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024a2:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0f1      	beq.n	8002490 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024ac:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	22f8      	movs	r2, #248	; 0xf8
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	00da      	lsls	r2, r3, #3
 80024bc:	4b81      	ldr	r3, [pc, #516]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
 80024c2:	e034      	b.n	800252e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	3305      	adds	r3, #5
 80024ca:	d111      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024cc:	4b7d      	ldr	r3, [pc, #500]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d0:	4b7c      	ldr	r3, [pc, #496]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024d8:	4b7a      	ldr	r3, [pc, #488]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	22f8      	movs	r2, #248	; 0xf8
 80024de:	4393      	bics	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
 80024ee:	e01e      	b.n	800252e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024f0:	4b74      	ldr	r3, [pc, #464]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024f6:	2104      	movs	r1, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024fc:	4b71      	ldr	r3, [pc, #452]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002500:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002502:	2101      	movs	r1, #1
 8002504:	438a      	bics	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002508:	f7fe fb66 	bl	8000bd8 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002512:	f7fe fb61 	bl	8000bd8 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e111      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002524:	4b67      	ldr	r3, [pc, #412]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f1      	bne.n	8002512 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2220      	movs	r2, #32
 8002534:	4013      	ands	r3, r2
 8002536:	d05c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002538:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	220c      	movs	r2, #12
 800253e:	4013      	ands	r3, r2
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d00e      	beq.n	8002562 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002544:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	220c      	movs	r2, #12
 800254a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800254c:	2b08      	cmp	r3, #8
 800254e:	d114      	bne.n	800257a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	23c0      	movs	r3, #192	; 0xc0
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	401a      	ands	r2, r3
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	429a      	cmp	r2, r3
 8002560:	d10b      	bne.n	800257a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002562:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	029b      	lsls	r3, r3, #10
 800256a:	4013      	ands	r3, r2
 800256c:	d040      	beq.n	80025f0 <HAL_RCC_OscConfig+0x5a8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d03c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0e6      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01b      	beq.n	80025ba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002582:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	4b4f      	ldr	r3, [pc, #316]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0249      	lsls	r1, r1, #9
 800258c:	430a      	orrs	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe fb22 	bl	8000bd8 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259a:	f7fe fb1d 	bl	8000bd8 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0cd      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80025ac:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x552>
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025ba:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80025bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80025c0:	4943      	ldr	r1, [pc, #268]	; (80026d0 <HAL_RCC_OscConfig+0x688>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fe fb07 	bl	8000bd8 <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d0:	f7fe fb02 	bl	8000bd8 <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0b2      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	4013      	ands	r3, r2
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x588>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025f0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d100      	bne.n	80025fc <HAL_RCC_OscConfig+0x5b4>
 80025fa:	e0a4      	b.n	8002746 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	220c      	movs	r2, #12
 8002602:	4013      	ands	r3, r2
 8002604:	2b08      	cmp	r3, #8
 8002606:	d100      	bne.n	800260a <HAL_RCC_OscConfig+0x5c2>
 8002608:	e078      	b.n	80026fc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b02      	cmp	r3, #2
 8002610:	d14c      	bne.n	80026ac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002618:	492e      	ldr	r1, [pc, #184]	; (80026d4 <HAL_RCC_OscConfig+0x68c>)
 800261a:	400a      	ands	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fadb 	bl	8000bd8 <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fad6 	bl	8000bd8 <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e086      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	049b      	lsls	r3, r3, #18
 8002642:	4013      	ands	r3, r2
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002646:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	220f      	movs	r2, #15
 800264c:	4393      	bics	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002656:	430a      	orrs	r2, r1
 8002658:	62da      	str	r2, [r3, #44]	; 0x2c
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a1e      	ldr	r2, [pc, #120]	; (80026d8 <HAL_RCC_OscConfig+0x690>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	431a      	orrs	r2, r3
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0449      	lsls	r1, r1, #17
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe faa9 	bl	8000bd8 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe faa4 	bl	8000bd8 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e054      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	049b      	lsls	r3, r3, #18
 80026a6:	4013      	ands	r3, r2
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x644>
 80026aa:	e04c      	b.n	8002746 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <HAL_RCC_OscConfig+0x68c>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fa8e 	bl	8000bd8 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c0:	e015      	b.n	80026ee <HAL_RCC_OscConfig+0x6a6>
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40021000 	.word	0x40021000
 80026c8:	00001388 	.word	0x00001388
 80026cc:	efffffff 	.word	0xefffffff
 80026d0:	fffeffff 	.word	0xfffeffff
 80026d4:	feffffff 	.word	0xfeffffff
 80026d8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fa7c 	bl	8000bd8 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e02c      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	4b18      	ldr	r3, [pc, #96]	; (8002750 <HAL_RCC_OscConfig+0x708>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	049b      	lsls	r3, r3, #18
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x694>
 80026fa:	e024      	b.n	8002746 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01f      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x708>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_RCC_OscConfig+0x708>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	23c0      	movs	r3, #192	; 0xc0
 8002718:	025b      	lsls	r3, r3, #9
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	429a      	cmp	r2, r3
 8002722:	d10e      	bne.n	8002742 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	220f      	movs	r2, #15
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	23f0      	movs	r3, #240	; 0xf0
 8002736:	039b      	lsls	r3, r3, #14
 8002738:	401a      	ands	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b008      	add	sp, #32
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000

08002754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0bf      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d911      	bls.n	800279a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b5e      	ldr	r3, [pc, #376]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2201      	movs	r2, #1
 800277c:	4393      	bics	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2201      	movs	r2, #1
 800278e:	4013      	ands	r3, r2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d001      	beq.n	800279a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0a6      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d015      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	d006      	beq.n	80027bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027b4:	21e0      	movs	r1, #224	; 0xe0
 80027b6:	00c9      	lsls	r1, r1, #3
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	22f0      	movs	r2, #240	; 0xf0
 80027c2:	4393      	bics	r3, r2
 80027c4:	0019      	movs	r1, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d04c      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	4013      	ands	r3, r2
 80027ec:	d120      	bne.n	8002830 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e07a      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	049b      	lsls	r3, r3, #18
 8002802:	4013      	ands	r3, r2
 8002804:	d114      	bne.n	8002830 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06e      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d108      	bne.n	8002830 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e062      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e05b      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	4393      	bics	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7fe f9c8 	bl	8000bd8 <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284c:	e009      	b.n	8002862 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284e:	f7fe f9c3 	bl	8000bd8 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1a4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e042      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	220c      	movs	r2, #12
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1ec      	bne.n	800284e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d211      	bcs.n	80028a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x19c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e020      	b.n	80028e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_RCC_ClockConfig+0x1a8>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028c4:	f000 f820 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c8:	0001      	movs	r1, r0
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1a0>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	220f      	movs	r2, #15
 80028d2:	4013      	ands	r3, r2
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1ac>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	000a      	movs	r2, r1
 80028da:	40da      	lsrs	r2, r3
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1b0>)
 80028de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f7fe f933 	bl	8000b4c <HAL_InitTick>
  
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	00001388 	.word	0x00001388
 80028fc:	fffff8ff 	.word	0xfffff8ff
 8002900:	08002e94 	.word	0x08002e94
 8002904:	20000000 	.word	0x20000000

08002908 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	220c      	movs	r2, #12
 800292c:	4013      	ands	r3, r2
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d046      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8002932:	d848      	bhi.n	80029c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8002934:	2b04      	cmp	r3, #4
 8002936:	d002      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x36>
 8002938:	2b08      	cmp	r3, #8
 800293a:	d003      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x3c>
 800293c:	e043      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002940:	613b      	str	r3, [r7, #16]
      break;
 8002942:	e043      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	220f      	movs	r2, #15
 800294a:	4013      	ands	r3, r2
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	220f      	movs	r2, #15
 8002958:	4013      	ands	r3, r2
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	025b      	lsls	r3, r3, #9
 8002966:	401a      	ands	r2, r3
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	025b      	lsls	r3, r3, #9
 800296c:	429a      	cmp	r2, r3
 800296e:	d109      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	481a      	ldr	r0, [pc, #104]	; (80029dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002974:	f7fd fbc8 	bl	8000108 <__udivsi3>
 8002978:	0003      	movs	r3, r0
 800297a:	001a      	movs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4353      	muls	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e01a      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	025b      	lsls	r3, r3, #9
 800298a:	401a      	ands	r2, r3
 800298c:	23c0      	movs	r3, #192	; 0xc0
 800298e:	025b      	lsls	r3, r3, #9
 8002990:	429a      	cmp	r2, r3
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	4814      	ldr	r0, [pc, #80]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002998:	f7fd fbb6 	bl	8000108 <__udivsi3>
 800299c:	0003      	movs	r3, r0
 800299e:	001a      	movs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4353      	muls	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e008      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	4810      	ldr	r0, [pc, #64]	; (80029ec <HAL_RCC_GetSysClockFreq+0xe4>)
 80029ac:	f7fd fbac 	bl	8000108 <__udivsi3>
 80029b0:	0003      	movs	r3, r0
 80029b2:	001a      	movs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4353      	muls	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	613b      	str	r3, [r7, #16]
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80029c2:	613b      	str	r3, [r7, #16]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_GetSysClockFreq+0xe4>)
 80029c8:	613b      	str	r3, [r7, #16]
      break;
 80029ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029cc:	693b      	ldr	r3, [r7, #16]
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b006      	add	sp, #24
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	40021000 	.word	0x40021000
 80029dc:	01e84800 	.word	0x01e84800
 80029e0:	08002ea4 	.word	0x08002ea4
 80029e4:	08002eb4 	.word	0x08002eb4
 80029e8:	02dc6c00 	.word	0x02dc6c00
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	025b      	lsls	r3, r3, #9
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a0c:	e08e      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2017      	movs	r0, #23
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	055b      	lsls	r3, r3, #21
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d110      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0549      	lsls	r1, r1, #21
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
 8002a30:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	055b      	lsls	r3, r3, #21
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a44:	4b5c      	ldr	r3, [pc, #368]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d11a      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a50:	4b59      	ldr	r3, [pc, #356]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	0049      	lsls	r1, r1, #1
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe f8bb 	bl	8000bd8 <HAL_GetTick>
 8002a62:	0003      	movs	r3, r0
 8002a64:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	e008      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a68:	f7fe f8b6 	bl	8000bd8 <HAL_GetTick>
 8002a6c:	0002      	movs	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e097      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	23c0      	movs	r3, #192	; 0xc0
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d034      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	23c0      	movs	r3, #192	; 0xc0
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d02c      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a43      	ldr	r2, [pc, #268]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab2:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0249      	lsls	r1, r1, #9
 8002abc:	430a      	orrs	r2, r1
 8002abe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac0:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ac6:	493e      	ldr	r1, [pc, #248]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe f87d 	bl	8000bd8 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae4:	f7fe f878 	bl	8000bd8 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e058      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b02:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b16:	2317      	movs	r3, #23
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b26:	4928      	ldr	r1, [pc, #160]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b36:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	4393      	bics	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	4013      	ands	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	2210      	movs	r2, #16
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4013      	ands	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	fffffcff 	.word	0xfffffcff
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	00001388 	.word	0x00001388
 8002bc8:	efffffff 	.word	0xefffffff

08002bcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e081      	b.n	8002cea <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7f5b      	ldrb	r3, [r3, #29]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7fd ff1d 	bl	8000a38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d05c      	beq.n	8002ccc <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	22ca      	movs	r2, #202	; 0xca
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2253      	movs	r2, #83	; 0x53
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c22:	250f      	movs	r5, #15
 8002c24:	197c      	adds	r4, r7, r5
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 f88f 	bl	8002d4c <RTC_EnterInitMode>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002c32:	0028      	movs	r0, r5
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d12c      	bne.n	8002c96 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	492b      	ldr	r1, [pc, #172]	; (8002cf4 <HAL_RTC_Init+0x128>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6919      	ldr	r1, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	041a      	lsls	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c88:	183c      	adds	r4, r7, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 f8a0 	bl	8002dd2 <RTC_ExitInitMode>
 8002c92:	0003      	movs	r3, r0
 8002c94:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002c96:	230f      	movs	r3, #15
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d110      	bne.n	8002cc2 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4913      	ldr	r1, [pc, #76]	; (8002cf8 <HAL_RTC_Init+0x12c>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cca:	e003      	b.n	8002cd4 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	ff8fffbf 	.word	0xff8fffbf
 8002cf8:	fffbffff 	.word	0xfffbffff

08002cfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RTC_WaitForSynchro+0x4c>)
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d10:	f7fd ff62 	bl	8000bd8 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d18:	e00a      	b.n	8002d30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d1a:	f7fd ff5d 	bl	8000bd8 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	23fa      	movs	r3, #250	; 0xfa
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d901      	bls.n	8002d30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e006      	b.n	8002d3e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d0ee      	beq.n	8002d1a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	00017959 	.word	0x00017959

08002d4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	230f      	movs	r3, #15
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d12b      	bne.n	8002dc4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7fd ff2c 	bl	8000bd8 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d84:	e013      	b.n	8002dae <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d86:	f7fd ff27 	bl	8000bd8 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	200f      	movs	r0, #15
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	1839      	adds	r1, r7, r0
 8002d96:	7809      	ldrb	r1, [r1, #0]
 8002d98:	7019      	strb	r1, [r3, #0]
 8002d9a:	23fa      	movs	r3, #250	; 0xfa
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d905      	bls.n	8002dae <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2240      	movs	r2, #64	; 0x40
 8002db6:	4013      	ands	r3, r2
 8002db8:	d104      	bne.n	8002dc4 <RTC_EnterInitMode+0x78>
 8002dba:	230f      	movs	r3, #15
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d1e0      	bne.n	8002d86 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	240f      	movs	r4, #15
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	438a      	bics	r2, r1
 8002df0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d10b      	bne.n	8002e16 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff7b 	bl	8002cfc <HAL_RTC_WaitForSynchro>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d005      	beq.n	8002e16 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b005      	add	sp, #20
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <memset>:
 8002e24:	0003      	movs	r3, r0
 8002e26:	1882      	adds	r2, r0, r2
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d100      	bne.n	8002e2e <memset+0xa>
 8002e2c:	4770      	bx	lr
 8002e2e:	7019      	strb	r1, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e7f9      	b.n	8002e28 <memset+0x4>

08002e34 <__libc_init_array>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	2600      	movs	r6, #0
 8002e38:	4c0c      	ldr	r4, [pc, #48]	; (8002e6c <__libc_init_array+0x38>)
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	; (8002e70 <__libc_init_array+0x3c>)
 8002e3c:	1b64      	subs	r4, r4, r5
 8002e3e:	10a4      	asrs	r4, r4, #2
 8002e40:	42a6      	cmp	r6, r4
 8002e42:	d109      	bne.n	8002e58 <__libc_init_array+0x24>
 8002e44:	2600      	movs	r6, #0
 8002e46:	f000 f819 	bl	8002e7c <_init>
 8002e4a:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x40>)
 8002e4c:	4d0a      	ldr	r5, [pc, #40]	; (8002e78 <__libc_init_array+0x44>)
 8002e4e:	1b64      	subs	r4, r4, r5
 8002e50:	10a4      	asrs	r4, r4, #2
 8002e52:	42a6      	cmp	r6, r4
 8002e54:	d105      	bne.n	8002e62 <__libc_init_array+0x2e>
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	00b3      	lsls	r3, r6, #2
 8002e5a:	58eb      	ldr	r3, [r5, r3]
 8002e5c:	4798      	blx	r3
 8002e5e:	3601      	adds	r6, #1
 8002e60:	e7ee      	b.n	8002e40 <__libc_init_array+0xc>
 8002e62:	00b3      	lsls	r3, r6, #2
 8002e64:	58eb      	ldr	r3, [r5, r3]
 8002e66:	4798      	blx	r3
 8002e68:	3601      	adds	r6, #1
 8002e6a:	e7f2      	b.n	8002e52 <__libc_init_array+0x1e>
 8002e6c:	08002ec4 	.word	0x08002ec4
 8002e70:	08002ec4 	.word	0x08002ec4
 8002e74:	08002ec8 	.word	0x08002ec8
 8002e78:	08002ec4 	.word	0x08002ec4

08002e7c <_init>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr

08002e88 <_fini>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr
