
Horn_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ed8  08004ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed8  08004ed8  00014ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  08004eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004eec  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bda  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a53  00000000  00000000  00030c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000336a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1a  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c1c  00000000  00000000  00035492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f4e  00000000  00000000  0004f0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000953d3  00000000  00000000  00063ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c94  00000000  00000000  000f93d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fd064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e74 	.word	0x08004e74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004e74 	.word	0x08004e74

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Display_SetDigits>:
#include "Display.h"

HAL_StatusTypeDef Display_SetDigits(Display *display, uint8_t digit1, uint8_t digit2, uint8_t digit3, uint8_t mode){
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	; 0x2c
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000c      	movs	r4, r1
 800022a:	0010      	movs	r0, r2
 800022c:	0019      	movs	r1, r3
 800022e:	1cfb      	adds	r3, r7, #3
 8000230:	1c22      	adds	r2, r4, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	1cbb      	adds	r3, r7, #2
 8000236:	1c02      	adds	r2, r0, #0
 8000238:	701a      	strb	r2, [r3, #0]
 800023a:	1c7b      	adds	r3, r7, #1
 800023c:	1c0a      	adds	r2, r1, #0
 800023e:	701a      	strb	r2, [r3, #0]
	if((digit1>9) || (digit2>9) || (digit3>9)){
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b09      	cmp	r3, #9
 8000246:	d807      	bhi.n	8000258 <Display_SetDigits+0x38>
 8000248:	1cbb      	adds	r3, r7, #2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b09      	cmp	r3, #9
 800024e:	d803      	bhi.n	8000258 <Display_SetDigits+0x38>
 8000250:	1c7b      	adds	r3, r7, #1
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b09      	cmp	r3, #9
 8000256:	d901      	bls.n	800025c <Display_SetDigits+0x3c>
		return HAL_ERROR;
 8000258:	2301      	movs	r3, #1
 800025a:	e06f      	b.n	800033c <Display_SetDigits+0x11c>
	}

	uint8_t digit1Values[10] = DIGIT1_VALUES;
 800025c:	2318      	movs	r3, #24
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	4a38      	ldr	r2, [pc, #224]	; (8000344 <Display_SetDigits+0x124>)
 8000262:	ca03      	ldmia	r2!, {r0, r1}
 8000264:	c303      	stmia	r3!, {r0, r1}
 8000266:	8812      	ldrh	r2, [r2, #0]
 8000268:	801a      	strh	r2, [r3, #0]
	uint8_t digit23Values[10] = DIGIT23_VALUES;
 800026a:	230c      	movs	r3, #12
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	4a36      	ldr	r2, [pc, #216]	; (8000348 <Display_SetDigits+0x128>)
 8000270:	ca03      	ldmia	r2!, {r0, r1}
 8000272:	c303      	stmia	r3!, {r0, r1}
 8000274:	8812      	ldrh	r2, [r2, #0]
 8000276:	801a      	strh	r2, [r3, #0]

	uint8_t ports[3];
	for(uint32_t i = 0; i<3; i++){
 8000278:	2300      	movs	r3, #0
 800027a:	627b      	str	r3, [r7, #36]	; 0x24
 800027c:	e008      	b.n	8000290 <Display_SetDigits+0x70>
		ports[i] = 0;
 800027e:	2308      	movs	r3, #8
 8000280:	18fa      	adds	r2, r7, r3
 8000282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000284:	18d3      	adds	r3, r2, r3
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i<3; i++){
 800028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028c:	3301      	adds	r3, #1
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
 8000290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000292:	2b02      	cmp	r3, #2
 8000294:	d9f3      	bls.n	800027e <Display_SetDigits+0x5e>
	}

	if(mode & DISPLAY_MODE_DIGIT1){
 8000296:	2338      	movs	r3, #56	; 0x38
 8000298:	18fb      	adds	r3, r7, r3
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2204      	movs	r2, #4
 800029e:	4013      	ands	r3, r2
 80002a0:	d007      	beq.n	80002b2 <Display_SetDigits+0x92>
		ports[0] = digit1Values[digit1];
 80002a2:	1cfb      	adds	r3, r7, #3
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2218      	movs	r2, #24
 80002a8:	18ba      	adds	r2, r7, r2
 80002aa:	5cd2      	ldrb	r2, [r2, r3]
 80002ac:	2308      	movs	r3, #8
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	701a      	strb	r2, [r3, #0]
	}

	if(mode & DISPLAY_MODE_DIGIT2){
 80002b2:	2338      	movs	r3, #56	; 0x38
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2202      	movs	r2, #2
 80002ba:	4013      	ands	r3, r2
 80002bc:	d017      	beq.n	80002ee <Display_SetDigits+0xce>
		ports[0] = (digit23Values[digit2] << 7) | ports[0];
 80002be:	1cbb      	adds	r3, r7, #2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	200c      	movs	r0, #12
 80002c4:	183a      	adds	r2, r7, r0
 80002c6:	5cd3      	ldrb	r3, [r2, r3]
 80002c8:	01db      	lsls	r3, r3, #7
 80002ca:	b25a      	sxtb	r2, r3
 80002cc:	2108      	movs	r1, #8
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	4313      	orrs	r3, r2
 80002d6:	b25b      	sxtb	r3, r3
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	701a      	strb	r2, [r3, #0]
		ports[1] = digit23Values[digit2] >> 1;
 80002de:	1cbb      	adds	r3, r7, #2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	183a      	adds	r2, r7, r0
 80002e4:	5cd3      	ldrb	r3, [r2, r3]
 80002e6:	085b      	lsrs	r3, r3, #1
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	705a      	strb	r2, [r3, #1]
	}

	if(mode & DISPLAY_MODE_DIGIT3){
 80002ee:	2338      	movs	r3, #56	; 0x38
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2201      	movs	r2, #1
 80002f6:	4013      	ands	r3, r2
 80002f8:	d017      	beq.n	800032a <Display_SetDigits+0x10a>
		ports[1] = ports[1] | (digit23Values[digit3] << 6);
 80002fa:	2008      	movs	r0, #8
 80002fc:	183b      	adds	r3, r7, r0
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	b25a      	sxtb	r2, r3
 8000302:	1c7b      	adds	r3, r7, #1
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	240c      	movs	r4, #12
 8000308:	1939      	adds	r1, r7, r4
 800030a:	5ccb      	ldrb	r3, [r1, r3]
 800030c:	019b      	lsls	r3, r3, #6
 800030e:	b25b      	sxtb	r3, r3
 8000310:	4313      	orrs	r3, r2
 8000312:	b25b      	sxtb	r3, r3
 8000314:	b2da      	uxtb	r2, r3
 8000316:	183b      	adds	r3, r7, r0
 8000318:	705a      	strb	r2, [r3, #1]
		ports[2] = digit23Values[digit3] >> 2;
 800031a:	1c7b      	adds	r3, r7, #1
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	193a      	adds	r2, r7, r4
 8000320:	5cd3      	ldrb	r3, [r2, r3]
 8000322:	089b      	lsrs	r3, r3, #2
 8000324:	b2da      	uxtb	r2, r3
 8000326:	183b      	adds	r3, r7, r0
 8000328:	709a      	strb	r2, [r3, #2]
	}

	return TCA6424_WriteRegisters(display->IOHandle, TCA6424_REG_OUT0 | TCA6424_AUTO_INCREMENT, ports, 3);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	2308      	movs	r3, #8
 8000330:	18fa      	adds	r2, r7, r3
 8000332:	2303      	movs	r3, #3
 8000334:	2184      	movs	r1, #132	; 0x84
 8000336:	f000 f848 	bl	80003ca <TCA6424_WriteRegisters>
 800033a:	0003      	movs	r3, r0
}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	b00b      	add	sp, #44	; 0x2c
 8000342:	bd90      	pop	{r4, r7, pc}
 8000344:	08004e8c 	.word	0x08004e8c
 8000348:	08004e98 	.word	0x08004e98

0800034c <TCA6424_Init>:
#include "TCA6424.h"

HAL_StatusTypeDef TCA6424_Init(TCA6424 *dev, I2C_HandleTypeDef *i2c, GPIO_TypeDef *gpio, uint16_t rstPin){
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af04      	add	r7, sp, #16
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	001a      	movs	r2, r3
 800035a:	1cbb      	adds	r3, r7, #2
 800035c:	801a      	strh	r2, [r3, #0]
	dev->i2cHandle = i2c;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	68ba      	ldr	r2, [r7, #8]
 8000362:	601a      	str	r2, [r3, #0]
	dev->gpioHandle = gpio;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	605a      	str	r2, [r3, #4]
	dev->resetPin = rstPin;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	1cba      	adds	r2, r7, #2
 800036e:	8812      	ldrh	r2, [r2, #0]
 8000370:	811a      	strh	r2, [r3, #8]

	/* Pin needs to be pulled low to reset device to a known state */
	HAL_GPIO_WritePin(dev->gpioHandle, dev->resetPin, GPIO_PIN_RESET);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	6858      	ldr	r0, [r3, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	891b      	ldrh	r3, [r3, #8]
 800037a:	2200      	movs	r2, #0
 800037c:	0019      	movs	r1, r3
 800037e:	f001 fef3 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 ff5c 	bl	8001240 <HAL_Delay>
	HAL_GPIO_WritePin(dev->gpioHandle, dev->resetPin, GPIO_PIN_SET);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	6858      	ldr	r0, [r3, #4]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	891b      	ldrh	r3, [r3, #8]
 8000390:	2201      	movs	r2, #1
 8000392:	0019      	movs	r1, r3
 8000394:	f001 fee8 	bl	8002168 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 ff51 	bl	8001240 <HAL_Delay>

	/* Sets port 0 pins as input to make sure the device is responding */
	uint8_t dummyReg = 0xFF;
 800039e:	2117      	movs	r1, #23
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, TCA6424_REG_CONFIG0, I2C_MEMADD_SIZE_8BIT, &dummyReg, 1, 100);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	2364      	movs	r3, #100	; 0x64
 80003ac:	9302      	str	r3, [sp, #8]
 80003ae:	2301      	movs	r3, #1
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2301      	movs	r3, #1
 80003b8:	220c      	movs	r2, #12
 80003ba:	2144      	movs	r1, #68	; 0x44
 80003bc:	f001 ff88 	bl	80022d0 <HAL_I2C_Mem_Write>
 80003c0:	0003      	movs	r3, r0
}
 80003c2:	0018      	movs	r0, r3
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b006      	add	sp, #24
 80003c8:	bd80      	pop	{r7, pc}

080003ca <TCA6424_WriteRegisters>:

HAL_StatusTypeDef TCA6424_WriteRegister(TCA6424 *dev, uint8_t reg, uint8_t *data){
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
}

HAL_StatusTypeDef TCA6424_WriteRegisters(TCA6424 *dev, uint8_t reg, uint8_t *data, uint8_t size){
 80003ca:	b5b0      	push	{r4, r5, r7, lr}
 80003cc:	b088      	sub	sp, #32
 80003ce:	af04      	add	r7, sp, #16
 80003d0:	60f8      	str	r0, [r7, #12]
 80003d2:	0008      	movs	r0, r1
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	0019      	movs	r1, r3
 80003d8:	240b      	movs	r4, #11
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	1c02      	adds	r2, r0, #0
 80003de:	701a      	strb	r2, [r3, #0]
 80003e0:	250a      	movs	r5, #10
 80003e2:	197b      	adds	r3, r7, r5
 80003e4:	1c0a      	adds	r2, r1, #0
 80003e6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, TCA6424_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, size, 100);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	6818      	ldr	r0, [r3, #0]
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	197b      	adds	r3, r7, r5
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	2164      	movs	r1, #100	; 0x64
 80003fa:	9102      	str	r1, [sp, #8]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	2144      	movs	r1, #68	; 0x44
 8000406:	f001 ff63 	bl	80022d0 <HAL_I2C_Mem_Write>
 800040a:	0003      	movs	r3, r0
}
 800040c:	0018      	movs	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	b004      	add	sp, #16
 8000412:	bdb0      	pop	{r4, r5, r7, pc}

08000414 <TCA6424_SetAsOutputs>:

HAL_StatusTypeDef TCA6424_SetAsOutputs(TCA6424 *dev){
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	uint8_t config[3] = {0x00, 0x00, 0x00};
 800041c:	200c      	movs	r0, #12
 800041e:	183b      	adds	r3, r7, r0
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <TCA6424_SetAsOutputs+0x2c>)
 8000422:	8811      	ldrh	r1, [r2, #0]
 8000424:	8019      	strh	r1, [r3, #0]
 8000426:	7892      	ldrb	r2, [r2, #2]
 8000428:	709a      	strb	r2, [r3, #2]
	return TCA6424_WriteRegisters(dev, TCA6424_REG_CONFIG0 | TCA6424_AUTO_INCREMENT, config, 3);
 800042a:	183a      	adds	r2, r7, r0
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	2303      	movs	r3, #3
 8000430:	218c      	movs	r1, #140	; 0x8c
 8000432:	f7ff ffca 	bl	80003ca <TCA6424_WriteRegisters>
 8000436:	0003      	movs	r3, r0
}
 8000438:	0018      	movs	r0, r3
 800043a:	46bd      	mov	sp, r7
 800043c:	b004      	add	sp, #16
 800043e:	bd80      	pop	{r7, pc}
 8000440:	08004ea4 	.word	0x08004ea4

08000444 <WS2812_Init>:
#include "WS2812.h"

void WS2812_Init(WS2812 *dev, TIM_HandleTypeDef *timer, uint32_t channel){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	dev->tim = timer;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	601a      	str	r2, [r3, #0]
	dev->tim_channel = channel;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	605a      	str	r2, [r3, #4]
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b004      	add	sp, #16
 8000462:	bd80      	pop	{r7, pc}

08000464 <WS2812_Reset_Buf>:

void WS2812_Reset_Buf(uint8_t *buf){
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i<WS2812_BUF_LEN; i++){
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e007      	b.n	8000482 <WS2812_Reset_Buf+0x1e>
		buf[i] = 0;
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	18d3      	adds	r3, r2, r3
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i<WS2812_BUF_LEN; i++){
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	23a3      	movs	r3, #163	; 0xa3
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	429a      	cmp	r2, r3
 800048a:	d9f2      	bls.n	8000472 <WS2812_Reset_Buf+0xe>
	}
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b004      	add	sp, #16
 8000494:	bd80      	pop	{r7, pc}

08000496 <WS2812_Write_Buf>:

void WS2812_Write_Buf(uint8_t *buf, uint8_t r, uint8_t g, uint8_t b, uint8_t led){
 8000496:	b590      	push	{r4, r7, lr}
 8000498:	b087      	sub	sp, #28
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	000c      	movs	r4, r1
 80004a0:	0010      	movs	r0, r2
 80004a2:	0019      	movs	r1, r3
 80004a4:	1cfb      	adds	r3, r7, #3
 80004a6:	1c22      	adds	r2, r4, #0
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	1cbb      	adds	r3, r7, #2
 80004ac:	1c02      	adds	r2, r0, #0
 80004ae:	701a      	strb	r2, [r3, #0]
 80004b0:	1c7b      	adds	r3, r7, #1
 80004b2:	1c0a      	adds	r2, r1, #0
 80004b4:	701a      	strb	r2, [r3, #0]
	uint8_t bitIndex = 0;
 80004b6:	2317      	movs	r3, #23
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
	//G 0-7
	for(uint32_t i = (led*24); i<((led*24)+8); i++){
 80004be:	2328      	movs	r3, #40	; 0x28
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	781a      	ldrb	r2, [r3, #0]
 80004c4:	0013      	movs	r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	e01d      	b.n	800050c <WS2812_Write_Buf+0x76>
		if ((g>>bitIndex) & 0x01){
 80004d0:	1cbb      	adds	r3, r7, #2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	2317      	movs	r3, #23
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	411a      	asrs	r2, r3
 80004dc:	0013      	movs	r3, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	d005      	beq.n	80004f0 <WS2812_Write_Buf+0x5a>
			buf[i] = WS2812_HI_VAL;
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	18d3      	adds	r3, r2, r3
 80004ea:	221c      	movs	r2, #28
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	e004      	b.n	80004fa <WS2812_Write_Buf+0x64>
		} else {
			buf[i] = WS2812_LO_VAL;
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	18d3      	adds	r3, r2, r3
 80004f6:	220a      	movs	r2, #10
 80004f8:	701a      	strb	r2, [r3, #0]
		}
		bitIndex++;
 80004fa:	2117      	movs	r1, #23
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	187b      	adds	r3, r7, r1
 8000502:	3201      	adds	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = (led*24); i<((led*24)+8); i++){
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	3301      	adds	r3, #1
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	2128      	movs	r1, #40	; 0x28
 800050e:	187b      	adds	r3, r7, r1
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	0013      	movs	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	189b      	adds	r3, r3, r2
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	3308      	adds	r3, #8
 800051c:	001a      	movs	r2, r3
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	4293      	cmp	r3, r2
 8000522:	d3d5      	bcc.n	80004d0 <WS2812_Write_Buf+0x3a>
	}
	bitIndex = 0;
 8000524:	2317      	movs	r3, #23
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

	//R 8-15
	for(uint32_t i = ((led*24)+8); i<((led*24)+16); i++){
 800052c:	187b      	adds	r3, r7, r1
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	0013      	movs	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	189b      	adds	r3, r3, r2
 8000536:	00db      	lsls	r3, r3, #3
 8000538:	3308      	adds	r3, #8
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	e01d      	b.n	800057a <WS2812_Write_Buf+0xe4>
		if ((r>>bitIndex) & 0x01){
 800053e:	1cfb      	adds	r3, r7, #3
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	2317      	movs	r3, #23
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	411a      	asrs	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	d005      	beq.n	800055e <WS2812_Write_Buf+0xc8>
			buf[i] = WS2812_HI_VAL;
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	18d3      	adds	r3, r2, r3
 8000558:	221c      	movs	r2, #28
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e004      	b.n	8000568 <WS2812_Write_Buf+0xd2>
		} else {
			buf[i] = WS2812_LO_VAL;
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	18d3      	adds	r3, r2, r3
 8000564:	220a      	movs	r2, #10
 8000566:	701a      	strb	r2, [r3, #0]
		}
		bitIndex++;
 8000568:	2117      	movs	r1, #23
 800056a:	187b      	adds	r3, r7, r1
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	187b      	adds	r3, r7, r1
 8000570:	3201      	adds	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = ((led*24)+8); i<((led*24)+16); i++){
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	2128      	movs	r1, #40	; 0x28
 800057c:	187b      	adds	r3, r7, r1
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	0013      	movs	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	189b      	adds	r3, r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	3310      	adds	r3, #16
 800058a:	001a      	movs	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4293      	cmp	r3, r2
 8000590:	d3d5      	bcc.n	800053e <WS2812_Write_Buf+0xa8>
	}
	bitIndex = 0;
 8000592:	2317      	movs	r3, #23
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]

	//B 16-23
	for(uint32_t i = ((led*24)+16); i<((led*24)+24); i++){
 800059a:	187b      	adds	r3, r7, r1
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	0013      	movs	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	3310      	adds	r3, #16
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	e01d      	b.n	80005e8 <WS2812_Write_Buf+0x152>
		if ((b>>bitIndex) & 0x01){
 80005ac:	1c7b      	adds	r3, r7, #1
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	2317      	movs	r3, #23
 80005b2:	18fb      	adds	r3, r7, r3
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	411a      	asrs	r2, r3
 80005b8:	0013      	movs	r3, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	d005      	beq.n	80005cc <WS2812_Write_Buf+0x136>
			buf[i] = WS2812_HI_VAL;
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	221c      	movs	r2, #28
 80005c8:	701a      	strb	r2, [r3, #0]
 80005ca:	e004      	b.n	80005d6 <WS2812_Write_Buf+0x140>
		} else {
			buf[i] = WS2812_LO_VAL;
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	220a      	movs	r2, #10
 80005d4:	701a      	strb	r2, [r3, #0]
		}
		bitIndex++;
 80005d6:	2117      	movs	r1, #23
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	3201      	adds	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = ((led*24)+16); i<((led*24)+24); i++){
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	2328      	movs	r3, #40	; 0x28
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	0013      	movs	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	001a      	movs	r2, r3
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d3d5      	bcc.n	80005ac <WS2812_Write_Buf+0x116>
	}
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b007      	add	sp, #28
 8000608:	bd90      	pop	{r4, r7, pc}

0800060a <WS2812_Send>:

HAL_StatusTypeDef WS2812_Send(WS2812 *dev, uint8_t *buf){
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
	return HAL_TIM_PWM_Start_DMA(dev->tim, dev->tim_channel, buf, WS2812_BUF_LEN);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6859      	ldr	r1, [r3, #4]
 800061c:	2348      	movs	r3, #72	; 0x48
 800061e:	33ff      	adds	r3, #255	; 0xff
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	f003 fa49 	bl	8003ab8 <HAL_TIM_PWM_Start_DMA>
 8000626:	0003      	movs	r3, r0
}
 8000628:	0018      	movs	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	b002      	add	sp, #8
 800062e:	bd80      	pop	{r7, pc}

08000630 <WS2812_StopDMA>:

HAL_StatusTypeDef WS2812_StopDMA(WS2812 *dev){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	return HAL_TIM_PWM_Stop_DMA(dev->tim, dev->tim_channel);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f003 fbe2 	bl	8003e0c <HAL_TIM_PWM_Stop_DMA>
 8000648:	0003      	movs	r3, r0
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_2);
	WS2812_StopDMA(&rgbLeds);
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff ffe6 	bl	8000630 <WS2812_StopDMA>
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200001a0 	.word	0x200001a0

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fd7f 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f873 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fa71 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f000 fa51 	bl	8000b28 <MX_DMA_Init>
  MX_ADC_Init();
 8000686:	f000 f8d3 	bl	8000830 <MX_ADC_Init>
  MX_CAN_Init();
 800068a:	f000 f92d 	bl	80008e8 <MX_CAN_Init>
  MX_I2C1_Init();
 800068e:	f000 f965 	bl	800095c <MX_I2C1_Init>
  MX_RTC_Init();
 8000692:	f000 f9a3 	bl	80009dc <MX_RTC_Init>
  MX_TIM2_Init();
 8000696:	f000 f9c9 	bl	8000a2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  WS2812_Init(&rgbLeds, &htim2, TIM_CHANNEL_2);
 800069a:	492b      	ldr	r1, [pc, #172]	; (8000748 <main+0xd8>)
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <main+0xdc>)
 800069e:	2204      	movs	r2, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff fecf 	bl	8000444 <WS2812_Init>
  TCA6424_Init(&IOExpander, &hi2c1, GPIOB, IO_RST_Pin);
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0xe0>)
 80006a8:	492a      	ldr	r1, [pc, #168]	; (8000754 <main+0xe4>)
 80006aa:	482b      	ldr	r0, [pc, #172]	; (8000758 <main+0xe8>)
 80006ac:	2310      	movs	r3, #16
 80006ae:	f7ff fe4d 	bl	800034c <TCA6424_Init>
  TCA6424_SetAsOutputs(&IOExpander);
 80006b2:	4b29      	ldr	r3, [pc, #164]	; (8000758 <main+0xe8>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff fead 	bl	8000414 <TCA6424_SetAsOutputs>

  display.IOHandle = &IOExpander;
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <main+0xec>)
 80006bc:	4a26      	ldr	r2, [pc, #152]	; (8000758 <main+0xe8>)
 80006be:	601a      	str	r2, [r3, #0]

  WS2812_Reset_Buf(buf);
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <main+0xf0>)
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff fece 	bl	8000464 <WS2812_Reset_Buf>
  WS2812_Write_Buf(buf, 0, 0, 0, 0);
 80006c8:	4825      	ldr	r0, [pc, #148]	; (8000760 <main+0xf0>)
 80006ca:	2300      	movs	r3, #0
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	f7ff fedf 	bl	8000496 <WS2812_Write_Buf>
  WS2812_Write_Buf(buf, 0, 0, 0, 1);
 80006d8:	4821      	ldr	r0, [pc, #132]	; (8000760 <main+0xf0>)
 80006da:	2301      	movs	r3, #1
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	f7ff fed7 	bl	8000496 <WS2812_Write_Buf>
  WS2812_Write_Buf(buf, 0, 0, 0, 2);
 80006e8:	481d      	ldr	r0, [pc, #116]	; (8000760 <main+0xf0>)
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	f7ff fecf 	bl	8000496 <WS2812_Write_Buf>
  WS2812_Send(&rgbLeds, buf);
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <main+0xf0>)
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <main+0xdc>)
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f7ff ff83 	bl	800060a <WS2812_Send>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 Display_SetDigits(&display, 5, 4, 3, DISPLAY_MODE_DIGIT1);
 8000704:	4815      	ldr	r0, [pc, #84]	; (800075c <main+0xec>)
 8000706:	2304      	movs	r3, #4
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2303      	movs	r3, #3
 800070c:	2204      	movs	r2, #4
 800070e:	2105      	movs	r1, #5
 8000710:	f7ff fd86 	bl	8000220 <Display_SetDigits>
	 HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fd93 	bl	8001240 <HAL_Delay>
	 Display_SetDigits(&display, 5, 4, 3, DISPLAY_MODE_DIGIT2);
 800071a:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0xec>)
 800071c:	2302      	movs	r3, #2
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2303      	movs	r3, #3
 8000722:	2204      	movs	r2, #4
 8000724:	2105      	movs	r1, #5
 8000726:	f7ff fd7b 	bl	8000220 <Display_SetDigits>
	 HAL_Delay(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fd88 	bl	8001240 <HAL_Delay>
	 Display_SetDigits(&display, 5, 4, 3, DISPLAY_MODE_DIGIT3);
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0xec>)
 8000732:	2301      	movs	r3, #1
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2303      	movs	r3, #3
 8000738:	2204      	movs	r2, #4
 800073a:	2105      	movs	r1, #5
 800073c:	f7ff fd70 	bl	8000220 <Display_SetDigits>
	 HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fd7d 	bl	8001240 <HAL_Delay>
	 Display_SetDigits(&display, 5, 4, 3, DISPLAY_MODE_DIGIT1);
 8000746:	e7dd      	b.n	8000704 <main+0x94>
 8000748:	20000104 	.word	0x20000104
 800074c:	200001a0 	.word	0x200001a0
 8000750:	48000400 	.word	0x48000400
 8000754:	20000090 	.word	0x20000090
 8000758:	20000190 	.word	0x20000190
 800075c:	2000019c 	.word	0x2000019c
 8000760:	200001a8 	.word	0x200001a8

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b099      	sub	sp, #100	; 0x64
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	242c      	movs	r4, #44	; 0x2c
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2334      	movs	r3, #52	; 0x34
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f004 fb51 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077a:	231c      	movs	r3, #28
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	0018      	movs	r0, r3
 8000780:	2310      	movs	r3, #16
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f004 fb49 	bl	8004e1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	0018      	movs	r0, r3
 800078e:	2318      	movs	r3, #24
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f004 fb42 	bl	8004e1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000798:	0021      	movs	r1, r4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2213      	movs	r2, #19
 800079e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2210      	movs	r2, #16
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2210      	movs	r2, #16
 80007bc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 f9e0 	bl	8002b8c <HAL_RCC_OscConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007d0:	f000 fa82 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	211c      	movs	r1, #28
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2101      	movs	r1, #1
 80007f2:	0018      	movs	r0, r3
 80007f4:	f002 fd50 	bl	8003298 <HAL_RCC_ClockConfig>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007fc:	f000 fa6c 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SystemClock_Config+0xc8>)
 8000804:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	22c0      	movs	r2, #192	; 0xc0
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fe8c 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000820:	f000 fa5a 	bl	8000cd8 <Error_Handler>
  }
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b019      	add	sp, #100	; 0x64
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	00010020 	.word	0x00010020

08000830 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	230c      	movs	r3, #12
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f004 faec 	bl	8004e1c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000846:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <MX_ADC_Init+0xb4>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_ADC_Init+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_ADC_Init+0xb0>)
 800085e:	2201      	movs	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000864:	2204      	movs	r2, #4
 8000866:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC_Init+0xb0>)
 800086a:	2200      	movs	r2, #0
 800086c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000870:	2200      	movs	r2, #0
 8000872:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000876:	2201      	movs	r2, #1
 8000878:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC_Init+0xb0>)
 800087c:	2200      	movs	r2, #0
 800087e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000882:	22c2      	movs	r2, #194	; 0xc2
 8000884:	32ff      	adds	r2, #255	; 0xff
 8000886:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_ADC_Init+0xb0>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000890:	2224      	movs	r2, #36	; 0x24
 8000892:	2100      	movs	r1, #0
 8000894:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_ADC_Init+0xb0>)
 8000898:	2201      	movs	r2, #1
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_ADC_Init+0xb0>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fcf2 	bl	8001288 <HAL_ADC_Init>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 fa16 	bl	8000cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2209      	movs	r2, #9
 80008b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	0152      	lsls	r2, r2, #5
 80008b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0552      	lsls	r2, r2, #21
 80008c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008c2:	1d3a      	adds	r2, r7, #4
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_ADC_Init+0xb0>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fe1d 	bl	8001508 <HAL_ADC_ConfigChannel>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80008d2:	f000 fa01 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000028 	.word	0x20000028
 80008e4:	40012400 	.word	0x40012400

080008e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_CAN_Init+0x6c>)
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <MX_CAN_Init+0x70>)
 80008f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_CAN_Init+0x6c>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_CAN_Init+0x6c>)
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	05d2      	lsls	r2, r2, #23
 80008fe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_CAN_Init+0x6c>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	0452      	lsls	r2, r2, #17
 8000906:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_CAN_Init+0x6c>)
 800090a:	22c0      	movs	r2, #192	; 0xc0
 800090c:	0292      	lsls	r2, r2, #10
 800090e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_CAN_Init+0x6c>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	0392      	lsls	r2, r2, #14
 8000916:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_CAN_Init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_CAN_Init+0x6c>)
 8000920:	2200      	movs	r2, #0
 8000922:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_CAN_Init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_CAN_Init+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_CAN_Init+0x6c>)
 8000932:	2200      	movs	r2, #0
 8000934:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_CAN_Init+0x6c>)
 8000938:	2200      	movs	r2, #0
 800093a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MX_CAN_Init+0x6c>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fef0 	bl	8001724 <HAL_CAN_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000948:	f000 f9c6 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000068 	.word	0x20000068
 8000958:	40006400 	.word	0x40006400

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_I2C1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fc03 	bl	80021a4 <HAL_I2C_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a2:	f000 f999 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 f856 	bl	8002a5c <HAL_I2CEx_ConfigAnalogFilter>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 f990 	bl	8000cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	0018      	movs	r0, r3
 80009be:	f002 f899 	bl	8002af4 <HAL_I2CEx_ConfigDigitalFilter>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 f987 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000090 	.word	0x20000090
 80009d4:	40005400 	.word	0x40005400
 80009d8:	0000020b 	.word	0x0000020b

080009dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_RTC_Init+0x44>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <MX_RTC_Init+0x48>)
 80009e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_RTC_Init+0x44>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_RTC_Init+0x44>)
 80009ee:	2263      	movs	r2, #99	; 0x63
 80009f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_RTC_Init+0x44>)
 80009f4:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <MX_RTC_Init+0x4c>)
 80009f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_RTC_Init+0x44>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_RTC_Init+0x44>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_RTC_Init+0x44>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <MX_RTC_Init+0x44>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fe7f 	bl	8003710 <HAL_RTC_Init>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a16:	f000 f95f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000e4 	.word	0x200000e4
 8000a24:	40002800 	.word	0x40002800
 8000a28:	0000270f 	.word	0x0000270f

08000a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	2328      	movs	r3, #40	; 0x28
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2310      	movs	r3, #16
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f004 f9ed 	bl	8004e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	2320      	movs	r3, #32
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2308      	movs	r3, #8
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f004 f9e5 	bl	8004e1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	231c      	movs	r3, #28
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f004 f9de 	bl	8004e1c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	05d2      	lsls	r2, r2, #23
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8000a74:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a76:	2227      	movs	r2, #39	; 0x27
 8000a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 ff6d 	bl	8003968 <HAL_TIM_Base_Init>
 8000a8e:	1e03      	subs	r3, r0, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f921 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	2128      	movs	r1, #40	; 0x28
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	0152      	lsls	r2, r2, #5
 8000a9e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa0:	187a      	adds	r2, r7, r1
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f003 fc64 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ab0:	f000 f912 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f002 ffa6 	bl	8003a08 <HAL_TIM_PWM_Init>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ac0:	f000 f90a 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f004 f937 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000ae2:	f000 f8f9 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2260      	movs	r2, #96	; 0x60
 8000aea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000afe:	1d39      	adds	r1, r7, #4
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f003 fb6f 	bl	80041e8 <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000b0e:	f000 f8e3 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <MX_TIM2_Init+0xf8>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 fa79 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b00e      	add	sp, #56	; 0x38
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000104 	.word	0x20000104

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_DMA_Init+0x38>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_DMA_Init+0x38>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_DMA_Init+0x38>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4013      	ands	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f000 ff94 	bl	8001a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b50:	200a      	movs	r0, #10
 8000b52:	f000 ffa6 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	40021000 	.word	0x40021000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	240c      	movs	r4, #12
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2314      	movs	r3, #20
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f004 f951 	bl	8004e1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b54      	ldr	r3, [pc, #336]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	02c9      	lsls	r1, r1, #11
 8000b84:	430a      	orrs	r2, r1
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	02db      	lsls	r3, r3, #11
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	03c9      	lsls	r1, r1, #15
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	03db      	lsls	r3, r3, #15
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <MX_GPIO_Init+0x168>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|RELAY2_Pin, GPIO_PIN_RESET);
 8000bce:	2390      	movs	r3, #144	; 0x90
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2118      	movs	r1, #24
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f001 fac6 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	2168      	movs	r1, #104	; 0x68
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 fac0 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IO_RST_GPIO_Port, IO_RST_Pin, GPIO_PIN_SET);
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 faba 	bl	8002168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MODE_Pin CUR_FAULT_Pin START_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|CUR_FAULT_Pin|START_Pin;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	4a37      	ldr	r2, [pc, #220]	; (8000cd4 <MX_GPIO_Init+0x170>)
 8000bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	193a      	adds	r2, r7, r4
 8000c08:	2390      	movs	r3, #144	; 0x90
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f001 f942 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_Pin RELAY2_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY2_Pin;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	2218      	movs	r2, #24
 8000c18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2203      	movs	r2, #3
 8000c2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	2390      	movs	r3, #144	; 0x90
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 f92f 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	193a      	adds	r2, r7, r4
 8000c4e:	2390      	movs	r3, #144	; 0x90
 8000c50:	05db      	lsls	r3, r3, #23
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 f91f 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : HORN_IN_Pin */
  GPIO_InitStruct.Pin = HORN_IN_Pin;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HORN_IN_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000c70:	0019      	movs	r1, r3
 8000c72:	0010      	movs	r0, r2
 8000c74:	f001 f910 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2201      	movs	r2, #1
 8000c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000c94:	0019      	movs	r1, r3
 8000c96:	0010      	movs	r0, r2
 8000c98:	f001 f8fe 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO_RST_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = IO_RST_Pin|LED1_Pin|LED2_Pin;
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2270      	movs	r2, #112	; 0x70
 8000ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <MX_GPIO_Init+0x16c>)
 8000cba:	0019      	movs	r1, r3
 8000cbc:	0010      	movs	r0, r2
 8000cbe:	f001 f8eb 	bl	8001e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b009      	add	sp, #36	; 0x24
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	00008084 	.word	0x00008084

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_MspInit+0x50>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_MspInit+0x50>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x50>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x50>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_MspInit+0x50>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0549      	lsls	r1, r1, #21
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_MspInit+0x50>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	055b      	lsls	r3, r3, #21
 8000d18:	4013      	ands	r3, r2
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x54>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_MspInit+0x54>)
 8000d24:	2110      	movs	r1, #16
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010000 	.word	0x40010000

08000d3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2414      	movs	r4, #20
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f004 f864 	bl	8004e1c <memset>
  if(hadc->Instance==ADC1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_ADC_MspInit+0xbc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d148      	bne.n	8000df0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	0089      	lsls	r1, r1, #2
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	619a      	str	r2, [r3, #24]
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0289      	lsls	r1, r1, #10
 8000d84:	430a      	orrs	r2, r1
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	029b      	lsls	r3, r3, #10
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	02c9      	lsls	r1, r1, #11
 8000da0:	430a      	orrs	r2, r1
 8000da2:	615a      	str	r2, [r3, #20]
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_ADC_MspInit+0xc0>)
 8000da6:	695a      	ldr	r2, [r3, #20]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	02db      	lsls	r3, r3, #11
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA6     ------> ADC_IN6
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = CUR_Pin;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2203      	movs	r2, #3
 8000dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CUR_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	193a      	adds	r2, r7, r4
 8000dc6:	2390      	movs	r3, #144	; 0x90
 8000dc8:	05db      	lsls	r3, r3, #23
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f001 f863 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_Pin;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2203      	movs	r2, #3
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BAT_GPIO_Port, &GPIO_InitStruct);
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_ADC_MspInit+0xc4>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	0010      	movs	r0, r2
 8000dec:	f001 f854 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b00b      	add	sp, #44	; 0x2c
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	40012400 	.word	0x40012400
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000400 	.word	0x48000400

08000e04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b08b      	sub	sp, #44	; 0x2c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	2414      	movs	r4, #20
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	0018      	movs	r0, r3
 8000e12:	2314      	movs	r3, #20
 8000e14:	001a      	movs	r2, r3
 8000e16:	2100      	movs	r1, #0
 8000e18:	f004 f800 	bl	8004e1c <memset>
  if(hcan->Instance==CAN)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_CAN_MspInit+0x94>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d133      	bne.n	8000e8e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e28:	69da      	ldr	r2, [r3, #28]
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	0489      	lsls	r1, r1, #18
 8000e30:	430a      	orrs	r2, r1
 8000e32:	61da      	str	r2, [r3, #28]
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e36:	69da      	ldr	r2, [r3, #28]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	049b      	lsls	r3, r3, #18
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0289      	lsls	r1, r1, #10
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e52:	695a      	ldr	r2, [r3, #20]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	029b      	lsls	r3, r3, #10
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	22c0      	movs	r2, #192	; 0xc0
 8000e62:	0152      	lsls	r2, r2, #5
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	0021      	movs	r1, r4
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2203      	movs	r2, #3
 8000e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	187a      	adds	r2, r7, r1
 8000e82:	2390      	movs	r3, #144	; 0x90
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 f805 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b00b      	add	sp, #44	; 0x2c
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40006400 	.word	0x40006400
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08b      	sub	sp, #44	; 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	2414      	movs	r4, #20
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f003 ffb2 	bl	8004e1c <memset>
  if(hi2c->Instance==I2C1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_I2C_MspInit+0x90>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d132      	bne.n	8000f28 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	02c9      	lsls	r1, r1, #11
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	02db      	lsls	r3, r3, #11
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	22c0      	movs	r2, #192	; 0xc0
 8000ee2:	0052      	lsls	r2, r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee6:	0021      	movs	r1, r4
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2212      	movs	r2, #18
 8000eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2201      	movs	r2, #1
 8000efe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_I2C_MspInit+0x98>)
 8000f04:	0019      	movs	r1, r3
 8000f06:	0010      	movs	r0, r2
 8000f08:	f000 ffc6 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000f0e:	69da      	ldr	r2, [r3, #28]
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	0389      	lsls	r1, r1, #14
 8000f16:	430a      	orrs	r2, r1
 8000f18:	61da      	str	r2, [r3, #28]
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_I2C_MspInit+0x94>)
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	039b      	lsls	r3, r3, #14
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b00b      	add	sp, #44	; 0x2c
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	40005400 	.word	0x40005400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000400 	.word	0x48000400

08000f3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_RTC_MspInit+0x28>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d106      	bne.n	8000f5c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_RTC_MspInit+0x2c>)
 8000f50:	6a1a      	ldr	r2, [r3, #32]
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_RTC_MspInit+0x2c>)
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0209      	lsls	r1, r1, #8
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40002800 	.word	0x40002800
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d13a      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	61da      	str	r2, [r3, #28]
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2201      	movs	r2, #1
 8000f92:	4013      	ands	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_TIM_Base_MspInit+0x9c>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fd85 	bl	8001adc <HAL_DMA_Init>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000fd6:	f7ff fe7f 	bl	8000cd8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_TIM_Base_MspInit+0x98>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 fd44 	bl	8001a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f000 fd56 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40021000 	.word	0x40021000
 8001004:	2000014c 	.word	0x2000014c
 8001008:	40020030 	.word	0x40020030

0800100c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	240c      	movs	r4, #12
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	2314      	movs	r3, #20
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f003 fefc 	bl	8004e1c <memset>
  if(htim->Instance==TIM2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	05db      	lsls	r3, r3, #23
 800102c:	429a      	cmp	r2, r3
 800102e:	d124      	bne.n	800107a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_TIM_MspPostInit+0x78>)
 8001032:	695a      	ldr	r2, [r3, #20]
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_TIM_MspPostInit+0x78>)
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	0289      	lsls	r1, r1, #10
 800103a:	430a      	orrs	r2, r1
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_TIM_MspPostInit+0x78>)
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	029b      	lsls	r3, r3, #10
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800104c:	0021      	movs	r1, r4
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2202      	movs	r2, #2
 8001052:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2202      	movs	r2, #2
 8001058:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	187a      	adds	r2, r7, r1
 800106e:	2390      	movs	r3, #144	; 0x90
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f000 ff0f 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b009      	add	sp, #36	; 0x24
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	40021000 	.word	0x40021000

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8ac 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <DMA1_Channel2_3_IRQHandler+0x14>)
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fdff 	bl	8001cc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80010c4:	46c0      	nop			; (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000014c 	.word	0x2000014c

080010d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <TIM2_IRQHandler+0x14>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 ff70 	bl	8003fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000104 	.word	0x20000104

080010e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff fff6 	bl	80010e8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80010fc:	4812      	ldr	r0, [pc, #72]	; (8001148 <LoopForever+0x6>)
    LDR R1, [R0]
 80010fe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001100:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <LoopForever+0xa>)
    CMP R1, R2
 8001104:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001106:	d105      	bne.n	8001114 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800110a:	4912      	ldr	r1, [pc, #72]	; (8001154 <LoopForever+0x12>)
    STR R1, [R0]
 800110c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <LoopForever+0x1a>)
    STR R1, [R0]
 8001112:	6001      	str	r1, [r0, #0]

08001114 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001116:	4913      	ldr	r1, [pc, #76]	; (8001164 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001118:	4a13      	ldr	r2, [pc, #76]	; (8001168 <LoopForever+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800112c:	4c10      	ldr	r4, [pc, #64]	; (8001170 <LoopForever+0x2e>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800113a:	f003 fe77 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800113e:	f7ff fa97 	bl	8000670 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   r0, =_estack
 8001144:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001148:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800114c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001150:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001154:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001158:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800115c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001168:	08004ee0 	.word	0x08004ee0
  ldr r2, =_sbss
 800116c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001170:	200002f4 	.word	0x200002f4

08001174 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>
	...

08001178 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_Init+0x24>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_Init+0x24>)
 8001182:	2110      	movs	r1, #16
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f809 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f7ff fda9 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x5c>)
 80011aa:	681c      	ldr	r4, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	0019      	movs	r1, r3
 80011b2:	23fa      	movs	r3, #250	; 0xfa
 80011b4:	0098      	lsls	r0, r3, #2
 80011b6:	f7fe ffa7 	bl	8000108 <__udivsi3>
 80011ba:	0003      	movs	r3, r0
 80011bc:	0019      	movs	r1, r3
 80011be:	0020      	movs	r0, r4
 80011c0:	f7fe ffa2 	bl	8000108 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 fc7b 	bl	8001ac2 <HAL_SYSTICK_Config>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00f      	b.n	80011f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d80b      	bhi.n	80011f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 fc48 	bl	8001a78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_InitTick+0x64>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	20000008 	.word	0x20000008
 8001228:	200002f0 	.word	0x200002f0

0800122c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	200002f0 	.word	0x200002f0

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001a      	movs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	189b      	adds	r3, r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e125      	b.n	80014f2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2234      	movs	r2, #52	; 0x34
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fd3c 	bl	8000d3c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c8:	2210      	movs	r2, #16
 80012ca:	4013      	ands	r3, r2
 80012cc:	d000      	beq.n	80012d0 <HAL_ADC_Init+0x48>
 80012ce:	e103      	b.n	80014d8 <HAL_ADC_Init+0x250>
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <HAL_ADC_Init+0x54>
 80012da:	e0fd      	b.n	80014d8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2204      	movs	r2, #4
 80012e4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80012e6:	d000      	beq.n	80012ea <HAL_ADC_Init+0x62>
 80012e8:	e0f6      	b.n	80014d8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <HAL_ADC_Init+0x274>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	2202      	movs	r2, #2
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2203      	movs	r2, #3
 8001302:	4013      	ands	r3, r2
 8001304:	2b01      	cmp	r3, #1
 8001306:	d112      	bne.n	800132e <HAL_ADC_Init+0xa6>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	4013      	ands	r3, r2
 8001312:	2b01      	cmp	r3, #1
 8001314:	d009      	beq.n	800132a <HAL_ADC_Init+0xa2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	401a      	ands	r2, r3
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	429a      	cmp	r2, r3
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0xa6>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_ADC_Init+0xa8>
 800132e:	2300      	movs	r3, #0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d116      	bne.n	8001362 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2218      	movs	r2, #24
 800133c:	4393      	bics	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	0899      	lsrs	r1, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4964      	ldr	r1, [pc, #400]	; (8001500 <HAL_ADC_Init+0x278>)
 800136e:	400a      	ands	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e1b      	ldrb	r3, [r3, #24]
 8001376:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e5b      	ldrb	r3, [r3, #25]
 800137c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800137e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e9b      	ldrb	r3, [r3, #26]
 8001384:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001386:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	2b01      	cmp	r3, #1
 800138e:	d002      	beq.n	8001396 <HAL_ADC_Init+0x10e>
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	e000      	b.n	8001398 <HAL_ADC_Init+0x110>
 8001396:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001398:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800139e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Init+0x124>
 80013a8:	2304      	movs	r3, #4
 80013aa:	e000      	b.n	80013ae <HAL_ADC_Init+0x126>
 80013ac:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80013ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2124      	movs	r1, #36	; 0x24
 80013b4:	5c5b      	ldrb	r3, [r3, r1]
 80013b6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80013b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7edb      	ldrb	r3, [r3, #27]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d115      	bne.n	80013f4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	0252      	lsls	r2, r2, #9
 80013d6:	4313      	orrs	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	2220      	movs	r2, #32
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	2201      	movs	r2, #1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	23c2      	movs	r3, #194	; 0xc2
 80013fa:	33ff      	adds	r3, #255	; 0xff
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d007      	beq.n	8001410 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001408:	4313      	orrs	r3, r2
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68d9      	ldr	r1, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	430a      	orrs	r2, r1
 800141e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	055b      	lsls	r3, r3, #21
 8001428:	429a      	cmp	r2, r3
 800142a:	d01b      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d017      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2b02      	cmp	r3, #2
 800143a:	d013      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	2b03      	cmp	r3, #3
 8001442:	d00f      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00b      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b05      	cmp	r3, #5
 8001452:	d007      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	2b06      	cmp	r3, #6
 800145a:	d003      	beq.n	8001464 <HAL_ADC_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b07      	cmp	r3, #7
 8001462:	d112      	bne.n	800148a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2107      	movs	r1, #7
 8001470:	438a      	bics	r2, r1
 8001472:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	2207      	movs	r2, #7
 8001480:	401a      	ands	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_ADC_Init+0x27c>)
 8001492:	4013      	ands	r3, r2
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d10b      	bne.n	80014b2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2203      	movs	r2, #3
 80014a6:	4393      	bics	r3, r2
 80014a8:	2201      	movs	r2, #1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014b0:	e01c      	b.n	80014ec <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	2212      	movs	r2, #18
 80014b8:	4393      	bics	r3, r2
 80014ba:	2210      	movs	r2, #16
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80014ce:	230f      	movs	r3, #15
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80014d6:	e009      	b.n	80014ec <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	2210      	movs	r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80014e4:	230f      	movs	r3, #15
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ec:	230f      	movs	r3, #15
 80014ee:	18fb      	adds	r3, r7, r3
 80014f0:	781b      	ldrb	r3, [r3, #0]
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	fffffefd 	.word	0xfffffefd
 8001500:	fffe0219 	.word	0xfffe0219
 8001504:	833fffe7 	.word	0x833fffe7

08001508 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	055b      	lsls	r3, r3, #21
 8001526:	429a      	cmp	r2, r3
 8001528:	d011      	beq.n	800154e <HAL_ADC_ConfigChannel+0x46>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	2b01      	cmp	r3, #1
 8001530:	d00d      	beq.n	800154e <HAL_ADC_ConfigChannel+0x46>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	2b02      	cmp	r3, #2
 8001538:	d009      	beq.n	800154e <HAL_ADC_ConfigChannel+0x46>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	2b03      	cmp	r3, #3
 8001540:	d005      	beq.n	800154e <HAL_ADC_ConfigChannel+0x46>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2b04      	cmp	r3, #4
 8001548:	d001      	beq.n	800154e <HAL_ADC_ConfigChannel+0x46>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2234      	movs	r2, #52	; 0x34
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_ADC_ConfigChannel+0x54>
 8001558:	2302      	movs	r3, #2
 800155a:	e0d0      	b.n	80016fe <HAL_ADC_ConfigChannel+0x1f6>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2234      	movs	r2, #52	; 0x34
 8001560:	2101      	movs	r1, #1
 8001562:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2204      	movs	r2, #4
 800156c:	4013      	ands	r3, r2
 800156e:	d000      	beq.n	8001572 <HAL_ADC_ConfigChannel+0x6a>
 8001570:	e0b4      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4a64      	ldr	r2, [pc, #400]	; (8001708 <HAL_ADC_ConfigChannel+0x200>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d100      	bne.n	800157e <HAL_ADC_ConfigChannel+0x76>
 800157c:	e082      	b.n	8001684 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	055b      	lsls	r3, r3, #21
 800159c:	429a      	cmp	r2, r3
 800159e:	d037      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d033      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d02f      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d02b      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d027      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d023      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d01f      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	2b07      	cmp	r3, #7
 80015d6:	d01b      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2107      	movs	r1, #7
 80015e4:	400b      	ands	r3, r1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d012      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2107      	movs	r1, #7
 80015f6:	438a      	bics	r2, r1
 80015f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6959      	ldr	r1, [r3, #20]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2207      	movs	r2, #7
 8001606:	401a      	ands	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d007      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x120>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b11      	cmp	r3, #17
 800161e:	d003      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x120>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b12      	cmp	r3, #18
 8001626:	d163      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_ADC_ConfigChannel+0x204>)
 800162a:	6819      	ldr	r1, [r3, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b10      	cmp	r3, #16
 8001632:	d009      	beq.n	8001648 <HAL_ADC_ConfigChannel+0x140>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b11      	cmp	r3, #17
 800163a:	d102      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x13a>
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	03db      	lsls	r3, r3, #15
 8001640:	e004      	b.n	800164c <HAL_ADC_ConfigChannel+0x144>
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	045b      	lsls	r3, r3, #17
 8001646:	e001      	b.n	800164c <HAL_ADC_ConfigChannel+0x144>
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_ADC_ConfigChannel+0x204>)
 800164e:	430b      	orrs	r3, r1
 8001650:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b10      	cmp	r3, #16
 8001658:	d14a      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_ADC_ConfigChannel+0x208>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	492d      	ldr	r1, [pc, #180]	; (8001714 <HAL_ADC_ConfigChannel+0x20c>)
 8001660:	0018      	movs	r0, r3
 8001662:	f7fe fd51 	bl	8000108 <__udivsi3>
 8001666:	0003      	movs	r3, r0
 8001668:	001a      	movs	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	189b      	adds	r3, r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001674:	e002      	b.n	800167c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3b01      	subs	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f9      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x16e>
 8001682:	e035      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2101      	movs	r1, #1
 8001690:	4099      	lsls	r1, r3
 8001692:	000b      	movs	r3, r1
 8001694:	43d9      	mvns	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d007      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x1ae>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b11      	cmp	r3, #17
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x1ae>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d11c      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_ADC_ConfigChannel+0x204>)
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d007      	beq.n	80016d2 <HAL_ADC_ConfigChannel+0x1ca>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b11      	cmp	r3, #17
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x1c6>
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_ADC_ConfigChannel+0x210>)
 80016cc:	e002      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1cc>
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_ADC_ConfigChannel+0x214>)
 80016d0:	e000      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1cc>
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_ADC_ConfigChannel+0x218>)
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_ADC_ConfigChannel+0x204>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e009      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	2220      	movs	r2, #32
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016e8:	230f      	movs	r3, #15
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2234      	movs	r2, #52	; 0x34
 80016f4:	2100      	movs	r1, #0
 80016f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	781b      	ldrb	r3, [r3, #0]
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	00001001 	.word	0x00001001
 800170c:	40012708 	.word	0x40012708
 8001710:	20000000 	.word	0x20000000
 8001714:	000f4240 	.word	0x000f4240
 8001718:	ffbfffff 	.word	0xffbfffff
 800171c:	feffffff 	.word	0xfeffffff
 8001720:	ff7fffff 	.word	0xff7fffff

08001724 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0f0      	b.n	8001918 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff fb5d 	bl	8000e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800175a:	f7ff fd67 	bl	800122c <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001762:	e013      	b.n	800178c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001764:	f7ff fd62 	bl	800122c <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b0a      	cmp	r3, #10
 8001770:	d90c      	bls.n	800178c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	0292      	lsls	r2, r2, #10
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	2105      	movs	r1, #5
 8001786:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0c5      	b.n	8001918 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d0e5      	beq.n	8001764 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2102      	movs	r1, #2
 80017a4:	438a      	bics	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a8:	f7ff fd40 	bl	800122c <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017b0:	e013      	b.n	80017da <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017b2:	f7ff fd3b 	bl	800122c <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b0a      	cmp	r3, #10
 80017be:	d90c      	bls.n	80017da <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	0292      	lsls	r2, r2, #10
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2220      	movs	r2, #32
 80017d2:	2105      	movs	r1, #5
 80017d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e09e      	b.n	8001918 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1e5      	bne.n	80017b2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7e1b      	ldrb	r3, [r3, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e007      	b.n	8001810 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	438a      	bics	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e5b      	ldrb	r3, [r3, #25]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e007      	b.n	800183a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	438a      	bics	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7e9b      	ldrb	r3, [r3, #26]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d108      	bne.n	8001854 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2120      	movs	r1, #32
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e007      	b.n	8001864 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2120      	movs	r1, #32
 8001860:	438a      	bics	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7edb      	ldrb	r3, [r3, #27]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2110      	movs	r1, #16
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2110      	movs	r1, #16
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7f1b      	ldrb	r3, [r3, #28]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2108      	movs	r1, #8
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2108      	movs	r1, #8
 80018b4:	438a      	bics	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7f5b      	ldrb	r3, [r3, #29]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2104      	movs	r1, #4
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2104      	movs	r1, #4
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	0011      	movs	r1, r2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	0002      	movs	r2, r0
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b7f      	cmp	r3, #127	; 0x7f
 8001932:	d809      	bhi.n	8001948 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	001a      	movs	r2, r3
 800193a:	231f      	movs	r3, #31
 800193c:	401a      	ands	r2, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_EnableIRQ+0x30>)
 8001940:	2101      	movs	r1, #1
 8001942:	4091      	lsls	r1, r2
 8001944:	000a      	movs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
  }
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	0002      	movs	r2, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d828      	bhi.n	80019bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	33c0      	adds	r3, #192	; 0xc0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	589b      	ldr	r3, [r3, r2]
 800197a:	1dfa      	adds	r2, r7, #7
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	0011      	movs	r1, r2
 8001980:	2203      	movs	r2, #3
 8001982:	400a      	ands	r2, r1
 8001984:	00d2      	lsls	r2, r2, #3
 8001986:	21ff      	movs	r1, #255	; 0xff
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	43d2      	mvns	r2, r2
 800198e:	401a      	ands	r2, r3
 8001990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	401a      	ands	r2, r3
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	0018      	movs	r0, r3
 80019a0:	2303      	movs	r3, #3
 80019a2:	4003      	ands	r3, r0
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a8:	481f      	ldr	r0, [pc, #124]	; (8001a28 <__NVIC_SetPriority+0xd4>)
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	430a      	orrs	r2, r1
 80019b4:	33c0      	adds	r3, #192	; 0xc0
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ba:	e031      	b.n	8001a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019bc:	4a1b      	ldr	r2, [pc, #108]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0019      	movs	r1, r3
 80019c4:	230f      	movs	r3, #15
 80019c6:	400b      	ands	r3, r1
 80019c8:	3b08      	subs	r3, #8
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3306      	adds	r3, #6
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1dfa      	adds	r2, r7, #7
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	0011      	movs	r1, r2
 80019dc:	2203      	movs	r2, #3
 80019de:	400a      	ands	r2, r1
 80019e0:	00d2      	lsls	r2, r2, #3
 80019e2:	21ff      	movs	r1, #255	; 0xff
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	43d2      	mvns	r2, r2
 80019ea:	401a      	ands	r2, r3
 80019ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	401a      	ands	r2, r3
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0018      	movs	r0, r3
 80019fc:	2303      	movs	r3, #3
 80019fe:	4003      	ands	r3, r0
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a04:	4809      	ldr	r0, [pc, #36]	; (8001a2c <__NVIC_SetPriority+0xd8>)
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	4023      	ands	r3, r4
 8001a10:	3b08      	subs	r3, #8
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	430a      	orrs	r2, r1
 8001a16:	3306      	adds	r3, #6
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	18c3      	adds	r3, r0, r3
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b003      	add	sp, #12
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	045b      	lsls	r3, r3, #17
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d301      	bcc.n	8001a48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a44:	2301      	movs	r3, #1
 8001a46:	e010      	b.n	8001a6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <SysTick_Config+0x44>)
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	3a01      	subs	r2, #1
 8001a4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a50:	2301      	movs	r3, #1
 8001a52:	425b      	negs	r3, r3
 8001a54:	2103      	movs	r1, #3
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff7c 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x44>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x44>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b002      	add	sp, #8
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	210f      	movs	r1, #15
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	1c02      	adds	r2, r0, #0
 8001a88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	0011      	movs	r1, r2
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ff33 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff ffaf 	bl	8001a30 <SysTick_Config>
 8001ad2:	0003      	movs	r3, r0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e036      	b.n	8001b60 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2221      	movs	r2, #33	; 0x21
 8001af6:	2102      	movs	r1, #2
 8001af8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a18      	ldr	r2, [pc, #96]	; (8001b68 <HAL_DMA_Init+0x8c>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f98c 	bl	8001e60 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2221      	movs	r2, #33	; 0x21
 8001b52:	2101      	movs	r1, #1
 8001b54:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	ffffc00f 	.word	0xffffc00f

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2317      	movs	r3, #23
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Start_IT+0x24>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e04f      	b.n	8001c30 <HAL_DMA_Start_IT+0xc4>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	2101      	movs	r1, #1
 8001b96:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2221      	movs	r2, #33	; 0x21
 8001b9c:	5c9b      	ldrb	r3, [r3, r2]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d13a      	bne.n	8001c1a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2221      	movs	r2, #33	; 0x21
 8001ba8:	2102      	movs	r1, #2
 8001baa:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	438a      	bics	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f91c 	bl	8001e06 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	210e      	movs	r1, #14
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e00f      	b.n	8001c08 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	210a      	movs	r1, #10
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2104      	movs	r1, #4
 8001c04:	438a      	bics	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2101      	movs	r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c22:	2317      	movs	r3, #23
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2202      	movs	r2, #2
 8001c28:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b006      	add	sp, #24
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c40:	210f      	movs	r1, #15
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2221      	movs	r2, #33	; 0x21
 8001c4c:	5c9b      	ldrb	r3, [r3, r2]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d006      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e028      	b.n	8001cb4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	210e      	movs	r1, #14
 8001c6e:	438a      	bics	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	438a      	bics	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4091      	lsls	r1, r2
 8001c8e:	000a      	movs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2221      	movs	r2, #33	; 0x21
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	4798      	blx	r3
    }
  }
  return status;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2204      	movs	r2, #4
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d024      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x72>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d020      	beq.n	8001d34 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d107      	bne.n	8001d0e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2104      	movs	r1, #4
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2104      	movs	r1, #4
 8001d18:	4091      	lsls	r1, r2
 8001d1a:	000a      	movs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x66>
 8001d26:	e06a      	b.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	0010      	movs	r0, r2
 8001d30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d32:	e064      	b.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2202      	movs	r2, #2
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	d02b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xda>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2202      	movs	r2, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d027      	beq.n	8001d9c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	4013      	ands	r3, r2
 8001d56:	d10b      	bne.n	8001d70 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	210a      	movs	r1, #10
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2221      	movs	r2, #33	; 0x21
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	2102      	movs	r1, #2
 8001d7a:	4091      	lsls	r1, r2
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d036      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	0010      	movs	r0, r2
 8001d98:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d9a:	e030      	b.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2208      	movs	r2, #8
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	d028      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2208      	movs	r2, #8
 8001db0:	4013      	ands	r3, r2
 8001db2:	d024      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	210e      	movs	r1, #14
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4091      	lsls	r1, r2
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2221      	movs	r2, #33	; 0x21
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	2100      	movs	r1, #0
 8001de8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	0010      	movs	r0, r2
 8001dfa:	4798      	blx	r3
    }
  }
}
 8001dfc:	e7ff      	b.n	8001dfe <HAL_DMA_IRQHandler+0x13c>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4091      	lsls	r1, r2
 8001e20:	000a      	movs	r2, r1
 8001e22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d108      	bne.n	8001e46 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e44:	e007      	b.n	8001e56 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	60da      	str	r2, [r3, #12]
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <DMA_CalcBaseAndBitshift+0x30>)
 8001e6e:	4694      	mov	ip, r2
 8001e70:	4463      	add	r3, ip
 8001e72:	2114      	movs	r1, #20
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe f947 	bl	8000108 <__udivsi3>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <DMA_CalcBaseAndBitshift+0x34>)
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	bffdfff8 	.word	0xbffdfff8
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e149      	b.n	800213c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4091      	lsls	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d100      	bne.n	8001ec0 <HAL_GPIO_Init+0x28>
 8001ebe:	e13a      	b.n	8002136 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d130      	bne.n	8001f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	0013      	movs	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	2201      	movs	r2, #1
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d123      	bne.n	8001fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	58d3      	ldr	r3, [r2, r3]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2107      	movs	r1, #7
 8001fae:	400b      	ands	r3, r1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	6939      	ldr	r1, [r7, #16]
 8001fc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	401a      	ands	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_GPIO_Init+0x174>
 800200a:	e094      	b.n	8002136 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x2bc>)
 800200e:	699a      	ldr	r2, [r3, #24]
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x2bc>)
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	619a      	str	r2, [r3, #24]
 8002018:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_GPIO_Init+0x2bc>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x2c0>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	589b      	ldr	r3, [r3, r2]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2203      	movs	r2, #3
 8002036:	4013      	ands	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	409a      	lsls	r2, r3
 800203e:	0013      	movs	r3, r2
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	2390      	movs	r3, #144	; 0x90
 800204c:	05db      	lsls	r3, r3, #23
 800204e:	429a      	cmp	r2, r3
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x1d6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_GPIO_Init+0x2c4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x1d2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HAL_GPIO_Init+0x2c8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x1ce>
 8002062:	2302      	movs	r3, #2
 8002064:	e004      	b.n	8002070 <HAL_GPIO_Init+0x1d8>
 8002066:	2305      	movs	r3, #5
 8002068:	e002      	b.n	8002070 <HAL_GPIO_Init+0x1d8>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x1d8>
 800206e:	2300      	movs	r3, #0
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2103      	movs	r1, #3
 8002074:	400a      	ands	r2, r1
 8002076:	0092      	lsls	r2, r2, #2
 8002078:	4093      	lsls	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <HAL_GPIO_Init+0x2c0>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800208e:	4b35      	ldr	r3, [pc, #212]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	035b      	lsls	r3, r3, #13
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	039b      	lsls	r3, r3, #14
 80020d0:	4013      	ands	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	4013      	ands	r3, r2
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43da      	mvns	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	4013      	ands	r3, r2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_GPIO_Init+0x2cc>)
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	40da      	lsrs	r2, r3
 8002144:	1e13      	subs	r3, r2, #0
 8002146:	d000      	beq.n	800214a <HAL_GPIO_Init+0x2b2>
 8002148:	e6ae      	b.n	8001ea8 <HAL_GPIO_Init+0x10>
  } 
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	0008      	movs	r0, r1
 8002172:	0011      	movs	r1, r2
 8002174:	1cbb      	adds	r3, r7, #2
 8002176:	1c02      	adds	r2, r0, #0
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	1c7b      	adds	r3, r7, #1
 800217c:	1c0a      	adds	r2, r1, #0
 800217e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002180:	1c7b      	adds	r3, r7, #1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002188:	1cbb      	adds	r3, r7, #2
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002192:	1cbb      	adds	r3, r7, #2
 8002194:	881a      	ldrh	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e082      	b.n	80022bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2241      	movs	r2, #65	; 0x41
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7fe fe67 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2241      	movs	r2, #65	; 0x41
 80021d6:	2124      	movs	r1, #36	; 0x24
 80021d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	438a      	bics	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4934      	ldr	r1, [pc, #208]	; (80022c4 <HAL_I2C_Init+0x120>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4931      	ldr	r1, [pc, #196]	; (80022c8 <HAL_I2C_Init+0x124>)
 8002204:	400a      	ands	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0209      	lsls	r1, r1, #8
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e007      	b.n	8002232 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2184      	movs	r1, #132	; 0x84
 800222c:	0209      	lsls	r1, r1, #8
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d104      	bne.n	8002244 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	491f      	ldr	r1, [pc, #124]	; (80022cc <HAL_I2C_Init+0x128>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	491a      	ldr	r1, [pc, #104]	; (80022c8 <HAL_I2C_Init+0x124>)
 8002260:	400a      	ands	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	431a      	orrs	r2, r3
 800226e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69d9      	ldr	r1, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1a      	ldr	r2, [r3, #32]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2241      	movs	r2, #65	; 0x41
 80022a8:	2120      	movs	r1, #32
 80022aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2242      	movs	r2, #66	; 0x42
 80022b6:	2100      	movs	r1, #0
 80022b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	f0ffffff 	.word	0xf0ffffff
 80022c8:	ffff7fff 	.word	0xffff7fff
 80022cc:	02008000 	.word	0x02008000

080022d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	000c      	movs	r4, r1
 80022da:	0010      	movs	r0, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	230a      	movs	r3, #10
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	1c22      	adds	r2, r4, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	2308      	movs	r3, #8
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	1c02      	adds	r2, r0, #0
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	1dbb      	adds	r3, r7, #6
 80022f0:	1c0a      	adds	r2, r1, #0
 80022f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	5c9b      	ldrb	r3, [r3, r2]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d000      	beq.n	8002302 <HAL_I2C_Mem_Write+0x32>
 8002300:	e10c      	b.n	800251c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_I2C_Mem_Write+0x42>
 8002308:	232c      	movs	r3, #44	; 0x2c
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0ff      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2240      	movs	r2, #64	; 0x40
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_I2C_Mem_Write+0x5c>
 8002328:	2302      	movs	r3, #2
 800232a:	e0f8      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002334:	f7fe ff7a 	bl	800122c <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	0219      	lsls	r1, r3, #8
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2319      	movs	r3, #25
 8002348:	2201      	movs	r2, #1
 800234a:	f000 f975 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0e3      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2241      	movs	r2, #65	; 0x41
 800235a:	2121      	movs	r1, #33	; 0x21
 800235c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2242      	movs	r2, #66	; 0x42
 8002362:	2140      	movs	r1, #64	; 0x40
 8002364:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	222c      	movs	r2, #44	; 0x2c
 8002376:	18ba      	adds	r2, r7, r2
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002382:	1dbb      	adds	r3, r7, #6
 8002384:	881c      	ldrh	r4, [r3, #0]
 8002386:	2308      	movs	r3, #8
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	230a      	movs	r3, #10
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	8819      	ldrh	r1, [r3, #0]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	0023      	movs	r3, r4
 800239e:	f000 f8c5 	bl	800252c <I2C_RequestMemoryWrite>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2240      	movs	r2, #64	; 0x40
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0b5      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d911      	bls.n	80023e0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	045c      	lsls	r4, r3, #17
 80023cc:	230a      	movs	r3, #10
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	8819      	ldrh	r1, [r3, #0]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	2300      	movs	r3, #0
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	0023      	movs	r3, r4
 80023da:	f000 fb05 	bl	80029e8 <I2C_TransferConfig>
 80023de:	e012      	b.n	8002406 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	049c      	lsls	r4, r3, #18
 80023f4:	230a      	movs	r3, #10
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	8819      	ldrh	r1, [r3, #0]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	2300      	movs	r3, #0
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	0023      	movs	r3, r4
 8002402:	f000 faf1 	bl	80029e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f961 	bl	80026d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002412:	1e03      	subs	r3, r0, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e081      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d03a      	beq.n	80024ca <HAL_I2C_Mem_Write+0x1fa>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d136      	bne.n	80024ca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0013      	movs	r3, r2
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	f000 f8e5 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e053      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2bff      	cmp	r3, #255	; 0xff
 800247e:	d911      	bls.n	80024a4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	b2da      	uxtb	r2, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	045c      	lsls	r4, r3, #17
 8002490:	230a      	movs	r3, #10
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	8819      	ldrh	r1, [r3, #0]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	0023      	movs	r3, r4
 800249e:	f000 faa3 	bl	80029e8 <I2C_TransferConfig>
 80024a2:	e012      	b.n	80024ca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	049c      	lsls	r4, r3, #18
 80024b8:	230a      	movs	r3, #10
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	8819      	ldrh	r1, [r3, #0]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	0023      	movs	r3, r4
 80024c6:	f000 fa8f 	bl	80029e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d198      	bne.n	8002406 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 f940 	bl	8002760 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e01a      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2220      	movs	r2, #32
 80024ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	490b      	ldr	r1, [pc, #44]	; (8002528 <HAL_I2C_Mem_Write+0x258>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2241      	movs	r2, #65	; 0x41
 8002504:	2120      	movs	r1, #32
 8002506:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2242      	movs	r2, #66	; 0x42
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	2100      	movs	r1, #0
 8002516:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
  }
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b007      	add	sp, #28
 8002524:	bd90      	pop	{r4, r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	fe00e800 	.word	0xfe00e800

0800252c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800252c:	b5b0      	push	{r4, r5, r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	000c      	movs	r4, r1
 8002536:	0010      	movs	r0, r2
 8002538:	0019      	movs	r1, r3
 800253a:	250a      	movs	r5, #10
 800253c:	197b      	adds	r3, r7, r5
 800253e:	1c22      	adds	r2, r4, #0
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	2308      	movs	r3, #8
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	1c02      	adds	r2, r0, #0
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	1dbb      	adds	r3, r7, #6
 800254c:	1c0a      	adds	r2, r1, #0
 800254e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	045c      	lsls	r4, r3, #17
 800255a:	197b      	adds	r3, r7, r5
 800255c:	8819      	ldrh	r1, [r3, #0]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <I2C_RequestMemoryWrite+0xc4>)
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	0023      	movs	r3, r4
 8002566:	f000 fa3f 	bl	80029e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 f8af 	bl	80026d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e033      	b.n	80025e6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257e:	1dbb      	adds	r3, r7, #6
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002586:	2308      	movs	r3, #8
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
 8002594:	e019      	b.n	80025ca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002596:	2308      	movs	r3, #8
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025aa:	6a39      	ldr	r1, [r7, #32]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f890 	bl	80026d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d001      	beq.n	80025bc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e014      	b.n	80025e6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025bc:	2308      	movs	r3, #8
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025ca:	6a3a      	ldr	r2, [r7, #32]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0013      	movs	r3, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	f000 f82e 	bl	8002638 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	80002000 	.word	0x80002000

080025f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d103      	bne.n	8002612 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2201      	movs	r2, #1
 800261a:	4013      	ands	r3, r2
 800261c:	2b01      	cmp	r3, #1
 800261e:	d007      	beq.n	8002630 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	619a      	str	r2, [r3, #24]
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	1dfb      	adds	r3, r7, #7
 8002646:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002648:	e030      	b.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	d02d      	beq.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7fe fdec 	bl	800122c <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d302      	bcc.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d122      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	425a      	negs	r2, r3
 8002676:	4153      	adcs	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	001a      	movs	r2, r3
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d113      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	2220      	movs	r2, #32
 800268a:	431a      	orrs	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2241      	movs	r2, #65	; 0x41
 8002694:	2120      	movs	r1, #32
 8002696:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2242      	movs	r2, #66	; 0x42
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	2100      	movs	r1, #0
 80026a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e00f      	b.n	80026cc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	4013      	ands	r3, r2
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	425a      	negs	r2, r3
 80026bc:	4153      	adcs	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	001a      	movs	r2, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d0bf      	beq.n	800264a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026e0:	e032      	b.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f87d 	bl	80027e8 <I2C_IsErrorOccurred>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e030      	b.n	8002758 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3301      	adds	r3, #1
 80026fa:	d025      	beq.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fc:	f7fe fd96 	bl	800122c <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11a      	bne.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d013      	beq.n	8002748 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	2220      	movs	r2, #32
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	2120      	movs	r1, #32
 8002732:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2242      	movs	r2, #66	; 0x42
 8002738:	2100      	movs	r1, #0
 800273a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d1c5      	bne.n	80026e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b004      	add	sp, #16
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800276c:	e02f      	b.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 f837 	bl	80027e8 <I2C_IsErrorOccurred>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e02d      	b.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002782:	f7fe fd53 	bl	800122c <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11a      	bne.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2220      	movs	r2, #32
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d013      	beq.n	80027ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	2220      	movs	r2, #32
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2241      	movs	r2, #65	; 0x41
 80027b6:	2120      	movs	r1, #32
 80027b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2242      	movs	r2, #66	; 0x42
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e007      	b.n	80027de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2220      	movs	r2, #32
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d1c8      	bne.n	800276e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b004      	add	sp, #16
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b08b      	sub	sp, #44	; 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2327      	movs	r3, #39	; 0x27
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2210      	movs	r2, #16
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <I2C_IsErrorOccurred+0x2e>
 8002814:	e082      	b.n	800291c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800281e:	e060      	b.n	80028e2 <I2C_IsErrorOccurred+0xfa>
 8002820:	2427      	movs	r4, #39	; 0x27
 8002822:	193b      	adds	r3, r7, r4
 8002824:	193a      	adds	r2, r7, r4
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	d058      	beq.n	80028e2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002830:	f7fe fcfc 	bl	800122c <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	d306      	bcc.n	800284e <I2C_IsErrorOccurred+0x66>
 8002840:	193b      	adds	r3, r7, r4
 8002842:	193a      	adds	r2, r7, r4
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d149      	bne.n	80028e2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	01db      	lsls	r3, r3, #7
 8002858:	4013      	ands	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800285c:	2013      	movs	r0, #19
 800285e:	183b      	adds	r3, r7, r0
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	2142      	movs	r1, #66	; 0x42
 8002864:	5c52      	ldrb	r2, [r2, r1]
 8002866:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	401a      	ands	r2, r3
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	429a      	cmp	r2, r3
 800287a:	d126      	bne.n	80028ca <I2C_IsErrorOccurred+0xe2>
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	01db      	lsls	r3, r3, #7
 8002882:	429a      	cmp	r2, r3
 8002884:	d021      	beq.n	80028ca <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002886:	183b      	adds	r3, r7, r0
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b20      	cmp	r3, #32
 800288c:	d01d      	beq.n	80028ca <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	01c9      	lsls	r1, r1, #7
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028a0:	f7fe fcc4 	bl	800122c <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a8:	e00f      	b.n	80028ca <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028aa:	f7fe fcbf 	bl	800122c <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b19      	cmp	r3, #25
 80028b6:	d908      	bls.n	80028ca <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2220      	movs	r2, #32
 80028bc:	4313      	orrs	r3, r2
 80028be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028c0:	2327      	movs	r3, #39	; 0x27
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]

              break;
 80028c8:	e00b      	b.n	80028e2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	2127      	movs	r1, #39	; 0x27
 80028d6:	187a      	adds	r2, r7, r1
 80028d8:	1879      	adds	r1, r7, r1
 80028da:	7809      	ldrb	r1, [r1, #0]
 80028dc:	7011      	strb	r1, [r2, #0]
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d1e3      	bne.n	80028aa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2220      	movs	r2, #32
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d004      	beq.n	80028fa <I2C_IsErrorOccurred+0x112>
 80028f0:	2327      	movs	r3, #39	; 0x27
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d092      	beq.n	8002820 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028fa:	2327      	movs	r3, #39	; 0x27
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2220      	movs	r2, #32
 800290a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2204      	movs	r2, #4
 8002910:	4313      	orrs	r3, r2
 8002912:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002914:	2327      	movs	r3, #39	; 0x27
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d00c      	beq.n	8002948 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2201      	movs	r2, #1
 8002932:	4313      	orrs	r3, r2
 8002934:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002940:	2327      	movs	r3, #39	; 0x27
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4013      	ands	r3, r2
 8002950:	d00c      	beq.n	800296c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2208      	movs	r2, #8
 8002956:	4313      	orrs	r3, r2
 8002958:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002964:	2327      	movs	r3, #39	; 0x27
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d00c      	beq.n	8002990 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2202      	movs	r2, #2
 800297a:	4313      	orrs	r3, r2
 800297c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2280      	movs	r2, #128	; 0x80
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002988:	2327      	movs	r3, #39	; 0x27
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002990:	2327      	movs	r3, #39	; 0x27
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01d      	beq.n	80029d6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff fe29 	bl	80025f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	490d      	ldr	r1, [pc, #52]	; (80029e4 <I2C_IsErrorOccurred+0x1fc>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2241      	movs	r2, #65	; 0x41
 80029c2:	2120      	movs	r1, #32
 80029c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2242      	movs	r2, #66	; 0x42
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2240      	movs	r2, #64	; 0x40
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80029d6:	2327      	movs	r3, #39	; 0x27
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b00b      	add	sp, #44	; 0x2c
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	0008      	movs	r0, r1
 80029f2:	0011      	movs	r1, r2
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	240a      	movs	r4, #10
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	1c02      	adds	r2, r0, #0
 80029fc:	801a      	strh	r2, [r3, #0]
 80029fe:	2009      	movs	r0, #9
 8002a00:	183b      	adds	r3, r7, r0
 8002a02:	1c0a      	adds	r2, r1, #0
 8002a04:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	059b      	lsls	r3, r3, #22
 8002a0c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	0419      	lsls	r1, r3, #16
 8002a14:	23ff      	movs	r3, #255	; 0xff
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a1a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	4313      	orrs	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a32:	0d51      	lsrs	r1, r2, #21
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	00d2      	lsls	r2, r2, #3
 8002a38:	400a      	ands	r2, r1
 8002a3a:	4907      	ldr	r1, [pc, #28]	; (8002a58 <I2C_TransferConfig+0x70>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	43d2      	mvns	r2, r2
 8002a40:	401a      	ands	r2, r3
 8002a42:	0011      	movs	r1, r2
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b007      	add	sp, #28
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	03ff63ff 	.word	0x03ff63ff

08002a5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2241      	movs	r2, #65	; 0x41
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d138      	bne.n	8002ae4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e032      	b.n	8002ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2241      	movs	r2, #65	; 0x41
 8002a8c:	2124      	movs	r1, #36	; 0x24
 8002a8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4911      	ldr	r1, [pc, #68]	; (8002af0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2241      	movs	r2, #65	; 0x41
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	2100      	movs	r1, #0
 8002ade:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b002      	add	sp, #8
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	ffffefff 	.word	0xffffefff

08002af4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2241      	movs	r2, #65	; 0x41
 8002b02:	5c9b      	ldrb	r3, [r3, r2]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d139      	bne.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e033      	b.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2241      	movs	r2, #65	; 0x41
 8002b24:	2124      	movs	r1, #36	; 0x24
 8002b26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2101      	movs	r1, #1
 8002b34:	438a      	bics	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2241      	movs	r2, #65	; 0x41
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	fffff0ff 	.word	0xfffff0ff

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f000 fb76 	bl	800328c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d100      	bne.n	8002bac <HAL_RCC_OscConfig+0x20>
 8002baa:	e08e      	b.n	8002cca <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bac:	4bc5      	ldr	r3, [pc, #788]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	220c      	movs	r2, #12
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4bc2      	ldr	r3, [pc, #776]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d117      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x68>
 8002bc4:	4bbf      	ldr	r3, [pc, #764]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	23c0      	movs	r3, #192	; 0xc0
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	401a      	ands	r2, r3
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd6:	4bbb      	ldr	r3, [pc, #748]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d100      	bne.n	8002be4 <HAL_RCC_OscConfig+0x58>
 8002be2:	e071      	b.n	8002cc8 <HAL_RCC_OscConfig+0x13c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d000      	beq.n	8002bee <HAL_RCC_OscConfig+0x62>
 8002bec:	e06c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f000 fb4c 	bl	800328c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x80>
 8002bfc:	4bb1      	ldr	r3, [pc, #708]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4bb0      	ldr	r3, [pc, #704]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c02:	2180      	movs	r1, #128	; 0x80
 8002c04:	0249      	lsls	r1, r1, #9
 8002c06:	430a      	orrs	r2, r1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e02f      	b.n	8002c6c <HAL_RCC_OscConfig+0xe0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0xa2>
 8002c14:	4bab      	ldr	r3, [pc, #684]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4baa      	ldr	r3, [pc, #680]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	49ab      	ldr	r1, [pc, #684]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4ba8      	ldr	r3, [pc, #672]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4ba7      	ldr	r3, [pc, #668]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c26:	49a9      	ldr	r1, [pc, #676]	; (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	e01e      	b.n	8002c6c <HAL_RCC_OscConfig+0xe0>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d10e      	bne.n	8002c54 <HAL_RCC_OscConfig+0xc8>
 8002c36:	4ba3      	ldr	r3, [pc, #652]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4ba2      	ldr	r3, [pc, #648]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c3c:	2180      	movs	r1, #128	; 0x80
 8002c3e:	02c9      	lsls	r1, r1, #11
 8002c40:	430a      	orrs	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4b9f      	ldr	r3, [pc, #636]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b9e      	ldr	r3, [pc, #632]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	0249      	lsls	r1, r1, #9
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xe0>
 8002c54:	4b9b      	ldr	r3, [pc, #620]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b9a      	ldr	r3, [pc, #616]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c5a:	499b      	ldr	r1, [pc, #620]	; (8002ec8 <HAL_RCC_OscConfig+0x33c>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	4b98      	ldr	r3, [pc, #608]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b97      	ldr	r3, [pc, #604]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c66:	4999      	ldr	r1, [pc, #612]	; (8002ecc <HAL_RCC_OscConfig+0x340>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d014      	beq.n	8002c9e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fada 	bl	800122c <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fad5 	bl	800122c <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e2fd      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0xf2>
 8002c9c:	e015      	b.n	8002cca <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fac5 	bl	800122c <HAL_GetTick>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fac0 	bl	800122c <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e2e8      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b82      	ldr	r3, [pc, #520]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x11c>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x14a>
 8002cd4:	e06c      	b.n	8002db0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cd6:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	220c      	movs	r2, #12
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce0:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	220c      	movs	r2, #12
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d11f      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1a0>
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	23c0      	movs	r3, #192	; 0xc0
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_OscConfig+0x188>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e2bb      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	22f8      	movs	r2, #248	; 0xf8
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e041      	b.n	8002db0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d024      	beq.n	8002d7e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b62      	ldr	r3, [pc, #392]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fa74 	bl	800122c <HAL_GetTick>
 8002d44:	0003      	movs	r3, r0
 8002d46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fa6f 	bl	800122c <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e297      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d0f1      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	22f8      	movs	r2, #248	; 0xf8
 8002d6c:	4393      	bics	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	00da      	lsls	r2, r3, #3
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	438a      	bics	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fa4f 	bl	800122c <HAL_GetTick>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fa4a 	bl	800122c <HAL_GetTick>
 8002d98:	0002      	movs	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e272      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	d1f1      	bne.n	8002d94 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2208      	movs	r2, #8
 8002db6:	4013      	ands	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fa2d 	bl	800122c <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fa28 	bl	800122c <HAL_GetTick>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e250      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0f1      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
 8002df4:	e018      	b.n	8002e28 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	438a      	bics	r2, r1
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fa13 	bl	800122c <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fa0e 	bl	800122c <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e236      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	d1f1      	bne.n	8002e0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d100      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
 8002e32:	e0b5      	b.n	8002fa0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	201f      	movs	r0, #31
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	055b      	lsls	r3, r3, #21
 8002e44:	4013      	ands	r3, r2
 8002e46:	d110      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	0549      	lsls	r1, r1, #21
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	055b      	lsls	r3, r3, #21
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e64:	183b      	adds	r3, r7, r0
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4013      	ands	r3, r2
 8002e74:	d11a      	bne.n	8002eac <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0049      	lsls	r1, r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e84:	f7fe f9d2 	bl	800122c <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fe f9cd 	bl	800122c <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1f5      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x344>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x348>
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <HAL_RCC_OscConfig+0x338>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	621a      	str	r2, [r3, #32]
 8002ec0:	e036      	b.n	8002f30 <HAL_RCC_OscConfig+0x3a4>
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	fffeffff 	.word	0xfffeffff
 8002ecc:	fffbffff 	.word	0xfffbffff
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x36a>
 8002edc:	4bca      	ldr	r3, [pc, #808]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	4bc9      	ldr	r3, [pc, #804]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	621a      	str	r2, [r3, #32]
 8002ee8:	4bc7      	ldr	r3, [pc, #796]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4bc6      	ldr	r3, [pc, #792]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002eee:	2104      	movs	r1, #4
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	e01c      	b.n	8002f30 <HAL_RCC_OscConfig+0x3a4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x38c>
 8002efe:	4bc2      	ldr	r3, [pc, #776]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	4bc1      	ldr	r3, [pc, #772]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f04:	2104      	movs	r1, #4
 8002f06:	430a      	orrs	r2, r1
 8002f08:	621a      	str	r2, [r3, #32]
 8002f0a:	4bbf      	ldr	r3, [pc, #764]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	4bbe      	ldr	r3, [pc, #760]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	621a      	str	r2, [r3, #32]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0x3a4>
 8002f18:	4bbb      	ldr	r3, [pc, #748]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	4bba      	ldr	r3, [pc, #744]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	438a      	bics	r2, r1
 8002f22:	621a      	str	r2, [r3, #32]
 8002f24:	4bb8      	ldr	r3, [pc, #736]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	4bb7      	ldr	r3, [pc, #732]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe f978 	bl	800122c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e009      	b.n	8002f56 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe f973 	bl	800122c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4aaf      	ldr	r2, [pc, #700]	; (800320c <HAL_RCC_OscConfig+0x680>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e19a      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	4bac      	ldr	r3, [pc, #688]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3b6>
 8002f60:	e013      	b.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f62:	f7fe f963 	bl	800122c <HAL_GetTick>
 8002f66:	0003      	movs	r3, r0
 8002f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6a:	e009      	b.n	8002f80 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe f95e 	bl	800122c <HAL_GetTick>
 8002f70:	0002      	movs	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	4aa5      	ldr	r2, [pc, #660]	; (800320c <HAL_RCC_OscConfig+0x680>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e185      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	4ba1      	ldr	r3, [pc, #644]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f8a:	231f      	movs	r3, #31
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b9c      	ldr	r3, [pc, #624]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	4b9b      	ldr	r3, [pc, #620]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002f9a:	499d      	ldr	r1, [pc, #628]	; (8003210 <HAL_RCC_OscConfig+0x684>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d12a      	bne.n	8003008 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fb2:	4b95      	ldr	r3, [pc, #596]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb6:	4b94      	ldr	r3, [pc, #592]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002fb8:	2104      	movs	r1, #4
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fbe:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	4b91      	ldr	r3, [pc, #580]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe f92f 	bl	800122c <HAL_GetTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fd4:	f7fe f92a 	bl	800122c <HAL_GetTick>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e152      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	2202      	movs	r2, #2
 8002fec:	4013      	ands	r3, r2
 8002fee:	d0f1      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ff0:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	22f8      	movs	r2, #248	; 0xf8
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	00da      	lsls	r2, r3, #3
 8003000:	4b81      	ldr	r3, [pc, #516]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003002:	430a      	orrs	r2, r1
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
 8003006:	e034      	b.n	8003072 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	3305      	adds	r3, #5
 800300e:	d111      	bne.n	8003034 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003010:	4b7d      	ldr	r3, [pc, #500]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003014:	4b7c      	ldr	r3, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003016:	2104      	movs	r1, #4
 8003018:	438a      	bics	r2, r1
 800301a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800301c:	4b7a      	ldr	r3, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	22f8      	movs	r2, #248	; 0xf8
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	00da      	lsls	r2, r3, #3
 800302c:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800302e:	430a      	orrs	r2, r1
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
 8003032:	e01e      	b.n	8003072 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003034:	4b74      	ldr	r3, [pc, #464]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003038:	4b73      	ldr	r3, [pc, #460]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800303a:	2104      	movs	r1, #4
 800303c:	430a      	orrs	r2, r1
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003040:	4b71      	ldr	r3, [pc, #452]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003044:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003046:	2101      	movs	r1, #1
 8003048:	438a      	bics	r2, r1
 800304a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe f8ee 	bl	800122c <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003056:	f7fe f8e9 	bl	800122c <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e111      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003068:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d1f1      	bne.n	8003056 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2220      	movs	r2, #32
 8003078:	4013      	ands	r3, r2
 800307a:	d05c      	beq.n	8003136 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800307c:	4b62      	ldr	r3, [pc, #392]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	220c      	movs	r2, #12
 8003082:	4013      	ands	r3, r2
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d00e      	beq.n	80030a6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003088:	4b5f      	ldr	r3, [pc, #380]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	220c      	movs	r2, #12
 800308e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003090:	2b08      	cmp	r3, #8
 8003092:	d114      	bne.n	80030be <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003094:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	23c0      	movs	r3, #192	; 0xc0
 800309a:	025b      	lsls	r3, r3, #9
 800309c:	401a      	ands	r2, r3
 800309e:	23c0      	movs	r3, #192	; 0xc0
 80030a0:	025b      	lsls	r3, r3, #9
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10b      	bne.n	80030be <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	4013      	ands	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_RCC_OscConfig+0x5a8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d03c      	beq.n	8003134 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0e6      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01b      	beq.n	80030fe <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80030c6:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80030c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ca:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	0249      	lsls	r1, r1, #9
 80030d0:	430a      	orrs	r2, r1
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe f8aa 	bl	800122c <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030de:	f7fe f8a5 	bl	800122c <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0cd      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80030f0:	4b45      	ldr	r3, [pc, #276]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	4013      	ands	r3, r2
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x552>
 80030fc:	e01b      	b.n	8003136 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80030fe:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003104:	4943      	ldr	r1, [pc, #268]	; (8003214 <HAL_RCC_OscConfig+0x688>)
 8003106:	400a      	ands	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fe f88f 	bl	800122c <HAL_GetTick>
 800310e:	0003      	movs	r3, r0
 8003110:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003114:	f7fe f88a 	bl	800122c <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0b2      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	029b      	lsls	r3, r3, #10
 800312e:	4013      	ands	r3, r2
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x588>
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003134:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d100      	bne.n	8003140 <HAL_RCC_OscConfig+0x5b4>
 800313e:	e0a4      	b.n	800328a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003140:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	220c      	movs	r2, #12
 8003146:	4013      	ands	r3, r2
 8003148:	2b08      	cmp	r3, #8
 800314a:	d100      	bne.n	800314e <HAL_RCC_OscConfig+0x5c2>
 800314c:	e078      	b.n	8003240 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b02      	cmp	r3, #2
 8003154:	d14c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800315c:	492e      	ldr	r1, [pc, #184]	; (8003218 <HAL_RCC_OscConfig+0x68c>)
 800315e:	400a      	ands	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7fe f863 	bl	800122c <HAL_GetTick>
 8003166:	0003      	movs	r3, r0
 8003168:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe f85e 	bl	800122c <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e086      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	049b      	lsls	r3, r3, #18
 8003186:	4013      	ands	r3, r2
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	220f      	movs	r2, #15
 8003190:	4393      	bics	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 800319a:	430a      	orrs	r2, r1
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_RCC_OscConfig+0x690>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	431a      	orrs	r2, r3
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0449      	lsls	r1, r1, #17
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe f831 	bl	800122c <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f82c 	bl	800122c <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e054      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	049b      	lsls	r3, r3, #18
 80031ea:	4013      	ands	r3, r2
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x644>
 80031ee:	e04c      	b.n	800328a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <HAL_RCC_OscConfig+0x67c>)
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <HAL_RCC_OscConfig+0x68c>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe f816 	bl	800122c <HAL_GetTick>
 8003200:	0003      	movs	r3, r0
 8003202:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x6a6>
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	40021000 	.word	0x40021000
 800320c:	00001388 	.word	0x00001388
 8003210:	efffffff 	.word	0xefffffff
 8003214:	fffeffff 	.word	0xfffeffff
 8003218:	feffffff 	.word	0xfeffffff
 800321c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe f804 	bl	800122c <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e02c      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_RCC_OscConfig+0x708>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	049b      	lsls	r3, r3, #18
 800323a:	4013      	ands	r3, r2
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x694>
 800323e:	e024      	b.n	800328a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01f      	b.n	800328c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x708>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x708>)
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	23c0      	movs	r3, #192	; 0xc0
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	429a      	cmp	r2, r3
 8003266:	d10e      	bne.n	8003286 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	220f      	movs	r2, #15
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	23f0      	movs	r3, #240	; 0xf0
 800327a:	039b      	lsls	r3, r3, #14
 800327c:	401a      	ands	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b008      	add	sp, #32
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000

08003298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0bf      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b61      	ldr	r3, [pc, #388]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d911      	bls.n	80032de <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	4393      	bics	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0a6      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2202      	movs	r2, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	d015      	beq.n	8003314 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2204      	movs	r2, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	d006      	beq.n	8003300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032f2:	4b51      	ldr	r3, [pc, #324]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4b50      	ldr	r3, [pc, #320]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 80032f8:	21e0      	movs	r1, #224	; 0xe0
 80032fa:	00c9      	lsls	r1, r1, #3
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b4d      	ldr	r3, [pc, #308]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	22f0      	movs	r2, #240	; 0xf0
 8003306:	4393      	bics	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b4a      	ldr	r3, [pc, #296]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d04c      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b44      	ldr	r3, [pc, #272]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	029b      	lsls	r3, r3, #10
 800332e:	4013      	ands	r3, r2
 8003330:	d120      	bne.n	8003374 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e07a      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	049b      	lsls	r3, r3, #18
 8003346:	4013      	ands	r3, r2
 8003348:	d114      	bne.n	8003374 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06e      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335a:	2380      	movs	r3, #128	; 0x80
 800335c:	029b      	lsls	r3, r3, #10
 800335e:	4013      	ands	r3, r2
 8003360:	d108      	bne.n	8003374 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e062      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e05b      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003374:	4b30      	ldr	r3, [pc, #192]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	4393      	bics	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7fd ff50 	bl	800122c <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003390:	e009      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003392:	f7fd ff4b 	bl	800122c <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_RCC_ClockConfig+0x1a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e042      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	220c      	movs	r2, #12
 80033ac:	401a      	ands	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1ec      	bne.n	8003392 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d211      	bcs.n	80033ea <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x19c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e020      	b.n	800342c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2204      	movs	r2, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_RCC_ClockConfig+0x1a8>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003408:	f000 f820 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340c:	0001      	movs	r1, r0
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1a0>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	220f      	movs	r2, #15
 8003416:	4013      	ands	r3, r2
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1ac>)
 800341a:	5cd3      	ldrb	r3, [r2, r3]
 800341c:	000a      	movs	r2, r1
 800341e:	40da      	lsrs	r2, r3
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1b0>)
 8003422:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003424:	2003      	movs	r0, #3
 8003426:	f7fd febb 	bl	80011a0 <HAL_InitTick>
  
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40022000 	.word	0x40022000
 8003438:	40021000 	.word	0x40021000
 800343c:	00001388 	.word	0x00001388
 8003440:	fffff8ff 	.word	0xfffff8ff
 8003444:	08004ea8 	.word	0x08004ea8
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	220c      	movs	r2, #12
 8003470:	4013      	ands	r3, r2
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d046      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0xb8>
 8003476:	d848      	bhi.n	800350a <HAL_RCC_GetSysClockFreq+0xbe>
 8003478:	2b04      	cmp	r3, #4
 800347a:	d002      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x36>
 800347c:	2b08      	cmp	r3, #8
 800347e:	d003      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x3c>
 8003480:	e043      	b.n	800350a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003484:	613b      	str	r3, [r7, #16]
      break;
 8003486:	e043      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0c9b      	lsrs	r3, r3, #18
 800348c:	220f      	movs	r2, #15
 800348e:	4013      	ands	r3, r2
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	220f      	movs	r2, #15
 800349c:	4013      	ands	r3, r2
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_RCC_GetSysClockFreq+0xdc>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	23c0      	movs	r3, #192	; 0xc0
 80034a8:	025b      	lsls	r3, r3, #9
 80034aa:	401a      	ands	r2, r3
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	025b      	lsls	r3, r3, #9
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	481a      	ldr	r0, [pc, #104]	; (8003520 <HAL_RCC_GetSysClockFreq+0xd4>)
 80034b8:	f7fc fe26 	bl	8000108 <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	001a      	movs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4353      	muls	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e01a      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	23c0      	movs	r3, #192	; 0xc0
 80034cc:	025b      	lsls	r3, r3, #9
 80034ce:	401a      	ands	r2, r3
 80034d0:	23c0      	movs	r3, #192	; 0xc0
 80034d2:	025b      	lsls	r3, r3, #9
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d109      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4814      	ldr	r0, [pc, #80]	; (800352c <HAL_RCC_GetSysClockFreq+0xe0>)
 80034dc:	f7fc fe14 	bl	8000108 <__udivsi3>
 80034e0:	0003      	movs	r3, r0
 80034e2:	001a      	movs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4353      	muls	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e008      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	4810      	ldr	r0, [pc, #64]	; (8003530 <HAL_RCC_GetSysClockFreq+0xe4>)
 80034f0:	f7fc fe0a 	bl	8000108 <__udivsi3>
 80034f4:	0003      	movs	r3, r0
 80034f6:	001a      	movs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4353      	muls	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	613b      	str	r3, [r7, #16]
      break;
 8003502:	e005      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_RCC_GetSysClockFreq+0xe0>)
 8003506:	613b      	str	r3, [r7, #16]
      break;
 8003508:	e002      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_GetSysClockFreq+0xe4>)
 800350c:	613b      	str	r3, [r7, #16]
      break;
 800350e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003510:	693b      	ldr	r3, [r7, #16]
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b006      	add	sp, #24
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40021000 	.word	0x40021000
 8003520:	01e84800 	.word	0x01e84800
 8003524:	08004eb8 	.word	0x08004eb8
 8003528:	08004ec8 	.word	0x08004ec8
 800352c:	02dc6c00 	.word	0x02dc6c00
 8003530:	007a1200 	.word	0x007a1200

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	025b      	lsls	r3, r3, #9
 800354c:	4013      	ands	r3, r2
 800354e:	d100      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003550:	e08e      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003552:	2017      	movs	r0, #23
 8003554:	183b      	adds	r3, r7, r0
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	055b      	lsls	r3, r3, #21
 8003562:	4013      	ands	r3, r2
 8003564:	d110      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0549      	lsls	r1, r1, #21
 8003570:	430a      	orrs	r2, r1
 8003572:	61da      	str	r2, [r3, #28]
 8003574:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	055b      	lsls	r3, r3, #21
 800357c:	4013      	ands	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	183b      	adds	r3, r7, r0
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	4b5c      	ldr	r3, [pc, #368]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4013      	ands	r3, r2
 8003592:	d11a      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b58      	ldr	r3, [pc, #352]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	0049      	lsls	r1, r1, #1
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a2:	f7fd fe43 	bl	800122c <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fd fe3e 	bl	800122c <HAL_GetTick>
 80035b0:	0002      	movs	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e097      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b4f      	ldr	r3, [pc, #316]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	23c0      	movs	r3, #192	; 0xc0
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d034      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	23c0      	movs	r3, #192	; 0xc0
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4013      	ands	r3, r2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d02c      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ec:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a43      	ldr	r2, [pc, #268]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0249      	lsls	r1, r1, #9
 8003600:	430a      	orrs	r2, r1
 8003602:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003604:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800360a:	493e      	ldr	r1, [pc, #248]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	400a      	ands	r2, r1
 800360e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003610:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fd fe05 	bl	800122c <HAL_GetTick>
 8003622:	0003      	movs	r3, r0
 8003624:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	e009      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fe00 	bl	800122c <HAL_GetTick>
 800362c:	0002      	movs	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e058      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	2202      	movs	r2, #2
 8003642:	4013      	ands	r3, r2
 8003644:	d0f0      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800364c:	4013      	ands	r3, r2
 800364e:	0019      	movs	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003656:	430a      	orrs	r2, r1
 8003658:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800365a:	2317      	movs	r3, #23
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800366a:	4928      	ldr	r1, [pc, #160]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800366c:	400a      	ands	r2, r1
 800366e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	d009      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	2203      	movs	r2, #3
 8003680:	4393      	bics	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800368a:	430a      	orrs	r2, r1
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	4013      	ands	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2210      	movs	r2, #16
 800369e:	4393      	bics	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	029b      	lsls	r3, r3, #10
 80036b4:	4013      	ands	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	4393      	bics	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036c8:	430a      	orrs	r2, r1
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4013      	ands	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	4393      	bics	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	fffffcff 	.word	0xfffffcff
 8003704:	fffeffff 	.word	0xfffeffff
 8003708:	00001388 	.word	0x00001388
 800370c:	efffffff 	.word	0xefffffff

08003710 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e081      	b.n	800382e <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7f5b      	ldrb	r3, [r3, #29]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f7fd fbfd 	bl	8000f3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2210      	movs	r2, #16
 8003750:	4013      	ands	r3, r2
 8003752:	2b10      	cmp	r3, #16
 8003754:	d05c      	beq.n	8003810 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	22ca      	movs	r2, #202	; 0xca
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2253      	movs	r2, #83	; 0x53
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003766:	250f      	movs	r5, #15
 8003768:	197c      	adds	r4, r7, r5
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f88f 	bl	8003890 <RTC_EnterInitMode>
 8003772:	0003      	movs	r3, r0
 8003774:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003776:	0028      	movs	r0, r5
 8003778:	183b      	adds	r3, r7, r0
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d12c      	bne.n	80037da <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	492b      	ldr	r1, [pc, #172]	; (8003838 <HAL_RTC_Init+0x128>)
 800378c:	400a      	ands	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	041a      	lsls	r2, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80037cc:	183c      	adds	r4, r7, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f8a0 	bl	8003916 <RTC_ExitInitMode>
 80037d6:	0003      	movs	r3, r0
 80037d8:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80037da:	230f      	movs	r3, #15
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d110      	bne.n	8003806 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4913      	ldr	r1, [pc, #76]	; (800383c <HAL_RTC_Init+0x12c>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	22ff      	movs	r2, #255	; 0xff
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
 800380e:	e003      	b.n	8003818 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003828:	230f      	movs	r3, #15
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	781b      	ldrb	r3, [r3, #0]
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bdb0      	pop	{r4, r5, r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	ff8fffbf 	.word	0xff8fffbf
 800383c:	fffbffff 	.word	0xfffbffff

08003840 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RTC_WaitForSynchro+0x4c>)
 8003852:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003854:	f7fd fcea 	bl	800122c <HAL_GetTick>
 8003858:	0003      	movs	r3, r0
 800385a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800385c:	e00a      	b.n	8003874 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800385e:	f7fd fce5 	bl	800122c <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	23fa      	movs	r3, #250	; 0xfa
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d901      	bls.n	8003874 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	4013      	ands	r3, r2
 800387e:	d0ee      	beq.n	800385e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	00017959 	.word	0x00017959

08003890 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	230f      	movs	r3, #15
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	4013      	ands	r3, r2
 80038ae:	d12b      	bne.n	8003908 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2180      	movs	r1, #128	; 0x80
 80038bc:	430a      	orrs	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fd fcb4 	bl	800122c <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038c8:	e013      	b.n	80038f2 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038ca:	f7fd fcaf 	bl	800122c <HAL_GetTick>
 80038ce:	0002      	movs	r2, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1ad2      	subs	r2, r2, r3
 80038d4:	200f      	movs	r0, #15
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	1839      	adds	r1, r7, r0
 80038da:	7809      	ldrb	r1, [r1, #0]
 80038dc:	7019      	strb	r1, [r3, #0]
 80038de:	23fa      	movs	r3, #250	; 0xfa
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d905      	bls.n	80038f2 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038ec:	183b      	adds	r3, r7, r0
 80038ee:	2201      	movs	r2, #1
 80038f0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	4013      	ands	r3, r2
 80038fc:	d104      	bne.n	8003908 <RTC_EnterInitMode+0x78>
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d1e0      	bne.n	80038ca <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003908:	230f      	movs	r3, #15
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}

08003916 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003916:	b590      	push	{r4, r7, lr}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	240f      	movs	r4, #15
 8003920:	193b      	adds	r3, r7, r4
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	438a      	bics	r2, r1
 8003934:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2220      	movs	r2, #32
 800393e:	4013      	ands	r3, r2
 8003940:	d10b      	bne.n	800395a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff ff7b 	bl	8003840 <HAL_RTC_WaitForSynchro>
 800394a:	1e03      	subs	r3, r0, #0
 800394c:	d005      	beq.n	800395a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2204      	movs	r2, #4
 8003952:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003954:	193b      	adds	r3, r7, r4
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800395a:	230f      	movs	r3, #15
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b005      	add	sp, #20
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e042      	b.n	8003a00 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	223d      	movs	r2, #61	; 0x3d
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223c      	movs	r2, #60	; 0x3c
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0018      	movs	r0, r3
 8003992:	f7fd faeb 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223d      	movs	r2, #61	; 0x3d
 800399a:	2102      	movs	r1, #2
 800399c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f000 febb 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2246      	movs	r2, #70	; 0x46
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223e      	movs	r2, #62	; 0x3e
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223f      	movs	r2, #63	; 0x3f
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2240      	movs	r2, #64	; 0x40
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2241      	movs	r2, #65	; 0x41
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2242      	movs	r2, #66	; 0x42
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2243      	movs	r2, #67	; 0x43
 80039e2:	2101      	movs	r1, #1
 80039e4:	5499      	strb	r1, [r3, r2]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2244      	movs	r2, #68	; 0x44
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2245      	movs	r2, #69	; 0x45
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	223d      	movs	r2, #61	; 0x3d
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e042      	b.n	8003aa0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	223d      	movs	r2, #61	; 0x3d
 8003a1e:	5c9b      	ldrb	r3, [r3, r2]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223c      	movs	r2, #60	; 0x3c
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 f839 	bl	8003aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223d      	movs	r2, #61	; 0x3d
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	0019      	movs	r1, r3
 8003a48:	0010      	movs	r0, r2
 8003a4a:	f000 fe6b 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2246      	movs	r2, #70	; 0x46
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	223e      	movs	r2, #62	; 0x3e
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	223f      	movs	r2, #63	; 0x3f
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2240      	movs	r2, #64	; 0x40
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2241      	movs	r2, #65	; 0x41
 8003a72:	2101      	movs	r1, #1
 8003a74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2242      	movs	r2, #66	; 0x42
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2243      	movs	r2, #67	; 0x43
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2244      	movs	r2, #68	; 0x44
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2245      	movs	r2, #69	; 0x45
 8003a92:	2101      	movs	r1, #1
 8003a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	223d      	movs	r2, #61	; 0x3d
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	1cbb      	adds	r3, r7, #2
 8003ac8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2317      	movs	r3, #23
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d108      	bne.n	8003aea <HAL_TIM_PWM_Start_DMA+0x32>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	223e      	movs	r2, #62	; 0x3e
 8003adc:	5c9b      	ldrb	r3, [r3, r2]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3b02      	subs	r3, #2
 8003ae2:	425a      	negs	r2, r3
 8003ae4:	4153      	adcs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e01f      	b.n	8003b2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d108      	bne.n	8003b02 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3b02      	subs	r3, #2
 8003afa:	425a      	negs	r2, r3
 8003afc:	4153      	adcs	r3, r2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e013      	b.n	8003b2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d108      	bne.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x62>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	3b02      	subs	r3, #2
 8003b12:	425a      	negs	r2, r3
 8003b14:	4153      	adcs	r3, r2
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	e007      	b.n	8003b2a <HAL_TIM_PWM_Start_DMA+0x72>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2241      	movs	r2, #65	; 0x41
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	3b02      	subs	r3, #2
 8003b24:	425a      	negs	r2, r3
 8003b26:	4153      	adcs	r3, r2
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e15a      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <HAL_TIM_PWM_Start_DMA+0x92>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	223e      	movs	r2, #62	; 0x3e
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	425a      	negs	r2, r3
 8003b44:	4153      	adcs	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e01f      	b.n	8003b8a <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d108      	bne.n	8003b62 <HAL_TIM_PWM_Start_DMA+0xaa>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	223f      	movs	r2, #63	; 0x3f
 8003b54:	5c9b      	ldrb	r3, [r3, r2]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	425a      	negs	r2, r3
 8003b5c:	4153      	adcs	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	e013      	b.n	8003b8a <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d108      	bne.n	8003b7a <HAL_TIM_PWM_Start_DMA+0xc2>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	5c9b      	ldrb	r3, [r3, r2]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	425a      	negs	r2, r3
 8003b74:	4153      	adcs	r3, r2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	e007      	b.n	8003b8a <HAL_TIM_PWM_Start_DMA+0xd2>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2241      	movs	r2, #65	; 0x41
 8003b7e:	5c9b      	ldrb	r3, [r3, r2]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	425a      	negs	r2, r3
 8003b86:	4153      	adcs	r3, r2
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d025      	beq.n	8003bda <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_TIM_PWM_Start_DMA+0xe4>
 8003b94:	1cbb      	adds	r3, r7, #2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e123      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	223e      	movs	r2, #62	; 0x3e
 8003baa:	2102      	movs	r1, #2
 8003bac:	5499      	strb	r1, [r3, r2]
 8003bae:	e016      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0x126>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d104      	bne.n	8003bc0 <HAL_TIM_PWM_Start_DMA+0x108>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	223f      	movs	r2, #63	; 0x3f
 8003bba:	2102      	movs	r1, #2
 8003bbc:	5499      	strb	r1, [r3, r2]
 8003bbe:	e00e      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0x126>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d104      	bne.n	8003bd0 <HAL_TIM_PWM_Start_DMA+0x118>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	2102      	movs	r1, #2
 8003bcc:	5499      	strb	r1, [r3, r2]
 8003bce:	e006      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0x126>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2241      	movs	r2, #65	; 0x41
 8003bd4:	2102      	movs	r1, #2
 8003bd6:	5499      	strb	r1, [r3, r2]
 8003bd8:	e001      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e104      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d100      	bne.n	8003be6 <HAL_TIM_PWM_Start_DMA+0x12e>
 8003be4:	e080      	b.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x230>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	d900      	bls.n	8003bee <HAL_TIM_PWM_Start_DMA+0x136>
 8003bec:	e0a1      	b.n	8003d32 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d054      	beq.n	8003c9e <HAL_TIM_PWM_Start_DMA+0x1e6>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d900      	bls.n	8003bfc <HAL_TIM_PWM_Start_DMA+0x144>
 8003bfa:	e09a      	b.n	8003d32 <HAL_TIM_PWM_Start_DMA+0x27a>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_PWM_Start_DMA+0x152>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d025      	beq.n	8003c54 <HAL_TIM_PWM_Start_DMA+0x19c>
 8003c08:	e093      	b.n	8003d32 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	4a78      	ldr	r2, [pc, #480]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	4a77      	ldr	r2, [pc, #476]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	4a76      	ldr	r2, [pc, #472]	; (8003df8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3334      	adds	r3, #52	; 0x34
 8003c2e:	001a      	movs	r2, r3
 8003c30:	1cbb      	adds	r3, r7, #2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f7fd ff9a 	bl	8001b6c <HAL_DMA_Start_IT>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0d3      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	0089      	lsls	r1, r1, #2
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	60da      	str	r2, [r3, #12]
      break;
 8003c52:	e073      	b.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	4a64      	ldr	r2, [pc, #400]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	4a63      	ldr	r2, [pc, #396]	; (8003df8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3338      	adds	r3, #56	; 0x38
 8003c78:	001a      	movs	r2, r3
 8003c7a:	1cbb      	adds	r3, r7, #2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	f7fd ff75 	bl	8001b6c <HAL_DMA_Start_IT>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e0ae      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	00c9      	lsls	r1, r1, #3
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]
      break;
 8003c9c:	e04e      	b.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4a53      	ldr	r2, [pc, #332]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a51      	ldr	r2, [pc, #324]	; (8003df8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	333c      	adds	r3, #60	; 0x3c
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	1cbb      	adds	r3, r7, #2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	f7fd ff50 	bl	8001b6c <HAL_DMA_Start_IT>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e089      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	0109      	lsls	r1, r1, #4
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]
      break;
 8003ce6:	e029      	b.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a3f      	ldr	r2, [pc, #252]	; (8003df4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4a3e      	ldr	r2, [pc, #248]	; (8003df8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3340      	adds	r3, #64	; 0x40
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	1cbb      	adds	r3, r7, #2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	f7fd ff2b 	bl	8001b6c <HAL_DMA_Start_IT>
 8003d16:	1e03      	subs	r3, r0, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e064      	b.n	8003de8 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0149      	lsls	r1, r1, #5
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]
      break;
 8003d30:	e004      	b.n	8003d3c <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8003d32:	2317      	movs	r3, #23
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
      break;
 8003d3a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d14d      	bne.n	8003de2 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f000 ffd8 	bl	8004d04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a28      	ldr	r2, [pc, #160]	; (8003dfc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIM_PWM_Start_DMA+0x2ba>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_TIM_PWM_Start_DMA+0x2c0>
 8003d76:	2300      	movs	r3, #0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	0209      	lsls	r1, r1, #8
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_TIM_PWM_Start_DMA+0x344>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00a      	beq.n	8003dae <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	05db      	lsls	r3, r3, #23
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d004      	beq.n	8003dae <HAL_TIM_PWM_Start_DMA+0x2f6>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d111      	bne.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2207      	movs	r2, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d010      	beq.n	8003de2 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	e007      	b.n	8003de2 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003de2:	2317      	movs	r3, #23
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	781b      	ldrb	r3, [r3, #0]
}
 8003de8:	0018      	movs	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b006      	add	sp, #24
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08004611 	.word	0x08004611
 8003df4:	080046bb 	.word	0x080046bb
 8003df8:	0800457d 	.word	0x0800457d
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800
 8003e08:	40000400 	.word	0x40000400

08003e0c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	230f      	movs	r3, #15
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d039      	beq.n	8003e98 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d844      	bhi.n	8003eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d025      	beq.n	8003e7c <HAL_TIM_PWM_Stop_DMA+0x70>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d83e      	bhi.n	8003eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d00e      	beq.n	8003e60 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003e42:	e037      	b.n	8003eb4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4951      	ldr	r1, [pc, #324]	; (8003f94 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7fd feed 	bl	8001c38 <HAL_DMA_Abort_IT>
      break;
 8003e5e:	e02e      	b.n	8003ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	494b      	ldr	r1, [pc, #300]	; (8003f98 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fd fedf 	bl	8001c38 <HAL_DMA_Abort_IT>
      break;
 8003e7a:	e020      	b.n	8003ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4945      	ldr	r1, [pc, #276]	; (8003f9c <HAL_TIM_PWM_Stop_DMA+0x190>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fd fed1 	bl	8001c38 <HAL_DMA_Abort_IT>
      break;
 8003e96:	e012      	b.n	8003ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fd fec3 	bl	8001c38 <HAL_DMA_Abort_IT>
      break;
 8003eb2:	e004      	b.n	8003ebe <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	230f      	movs	r3, #15
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
      break;
 8003ebc:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d15e      	bne.n	8003f86 <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 ff17 	bl	8004d04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_PWM_Stop_DMA+0xec>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_TIM_PWM_Stop_DMA+0xee>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d013      	beq.n	8003f26 <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	d10d      	bne.n	8003f26 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4925      	ldr	r1, [pc, #148]	; (8003fb8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d10d      	bne.n	8003f4e <HAL_TIM_PWM_Stop_DMA+0x142>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_PWM_Stop_DMA+0x142>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Stop_DMA+0x152>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223e      	movs	r2, #62	; 0x3e
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]
 8003f5c:	e013      	b.n	8003f86 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_Stop_DMA+0x162>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223f      	movs	r2, #63	; 0x3f
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5499      	strb	r1, [r3, r2]
 8003f6c:	e00b      	b.n	8003f86 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_PWM_Stop_DMA+0x172>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	2101      	movs	r1, #1
 8003f7a:	5499      	strb	r1, [r3, r2]
 8003f7c:	e003      	b.n	8003f86 <HAL_TIM_PWM_Stop_DMA+0x17a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2241      	movs	r2, #65	; 0x41
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003f86:	230f      	movs	r3, #15
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	781b      	ldrb	r3, [r3, #0]
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b004      	add	sp, #16
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	fffffdff 	.word	0xfffffdff
 8003f98:	fffffbff 	.word	0xfffffbff
 8003f9c:	fffff7ff 	.word	0xfffff7ff
 8003fa0:	ffffefff 	.word	0xffffefff
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	00001111 	.word	0x00001111
 8003fb4:	00000444 	.word	0x00000444
 8003fb8:	ffff7fff 	.word	0xffff7fff

08003fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d124      	bne.n	800401c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d11d      	bne.n	800401c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	4252      	negs	r2, r2
 8003fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 fa9c 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 8004004:	e007      	b.n	8004016 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0018      	movs	r0, r3
 800400a:	f000 fa8f 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc fb1f 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2204      	movs	r2, #4
 8004024:	4013      	ands	r3, r2
 8004026:	2b04      	cmp	r3, #4
 8004028:	d125      	bne.n	8004076 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2204      	movs	r2, #4
 8004032:	4013      	ands	r3, r2
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11e      	bne.n	8004076 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2205      	movs	r2, #5
 800403e:	4252      	negs	r2, r2
 8004040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	23c0      	movs	r3, #192	; 0xc0
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4013      	ands	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fa6f 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 800405e:	e007      	b.n	8004070 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	0018      	movs	r0, r3
 8004064:	f000 fa62 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0018      	movs	r0, r3
 800406c:	f7fc faf2 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2208      	movs	r2, #8
 800407e:	4013      	ands	r3, r2
 8004080:	2b08      	cmp	r3, #8
 8004082:	d124      	bne.n	80040ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2208      	movs	r2, #8
 800408c:	4013      	ands	r3, r2
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11d      	bne.n	80040ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2209      	movs	r2, #9
 8004098:	4252      	negs	r2, r2
 800409a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4013      	ands	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 fa43 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 80040b6:	e007      	b.n	80040c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 fa36 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fc fac6 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	2210      	movs	r2, #16
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d125      	bne.n	8004128 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2210      	movs	r2, #16
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d11e      	bne.n	8004128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2211      	movs	r2, #17
 80040f0:	4252      	negs	r2, r2
 80040f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2208      	movs	r2, #8
 80040f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	23c0      	movs	r3, #192	; 0xc0
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4013      	ands	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 fa16 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 8004110:	e007      	b.n	8004122 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 fa09 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f7fc fa99 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2201      	movs	r2, #1
 8004130:	4013      	ands	r3, r2
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10f      	bne.n	8004156 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	2b01      	cmp	r3, #1
 8004142:	d108      	bne.n	8004156 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2202      	movs	r2, #2
 800414a:	4252      	negs	r2, r2
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 f9e3 	bl	800451c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	4013      	ands	r3, r2
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d10f      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	4013      	ands	r3, r2
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d108      	bne.n	8004184 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2281      	movs	r2, #129	; 0x81
 8004178:	4252      	negs	r2, r2
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fe44 	bl	8004e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	4013      	ands	r3, r2
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d10f      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	4013      	ands	r3, r2
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d108      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2241      	movs	r2, #65	; 0x41
 80041a6:	4252      	negs	r2, r2
 80041a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f9d5 	bl	800455c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2220      	movs	r2, #32
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d10f      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d108      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2221      	movs	r2, #33	; 0x21
 80041d4:	4252      	negs	r2, r2
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fe0e 	bl	8004dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2317      	movs	r3, #23
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	223c      	movs	r2, #60	; 0x3c
 8004200:	5c9b      	ldrb	r3, [r3, r2]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004206:	2302      	movs	r3, #2
 8004208:	e0ad      	b.n	8004366 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	223c      	movs	r2, #60	; 0x3c
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b0c      	cmp	r3, #12
 8004216:	d100      	bne.n	800421a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004218:	e076      	b.n	8004308 <HAL_TIM_PWM_ConfigChannel+0x120>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d900      	bls.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004220:	e095      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d04e      	beq.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d900      	bls.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x48>
 800422e:	e08e      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x166>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_PWM_ConfigChannel+0x56>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d021      	beq.n	8004280 <HAL_TIM_PWM_ConfigChannel+0x98>
 800423c:	e087      	b.n	800434e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f000 fae2 	bl	8004810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2108      	movs	r1, #8
 8004258:	430a      	orrs	r2, r1
 800425a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2104      	movs	r1, #4
 8004268:	438a      	bics	r2, r1
 800426a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	619a      	str	r2, [r3, #24]
      break;
 800427e:	e06b      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f000 fb3f 	bl	800490c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	0109      	lsls	r1, r1, #4
 800429c:	430a      	orrs	r2, r1
 800429e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4931      	ldr	r1, [pc, #196]	; (8004370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80042ac:	400a      	ands	r2, r1
 80042ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6999      	ldr	r1, [r3, #24]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]
      break;
 80042c4:	e048      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 fb9a 	bl	8004a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2108      	movs	r1, #8
 80042e0:	430a      	orrs	r2, r1
 80042e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2104      	movs	r1, #4
 80042f0:	438a      	bics	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69d9      	ldr	r1, [r3, #28]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	61da      	str	r2, [r3, #28]
      break;
 8004306:	e027      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	0011      	movs	r1, r2
 8004310:	0018      	movs	r0, r3
 8004312:	f000 fbf9 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	0109      	lsls	r1, r1, #4
 8004324:	430a      	orrs	r2, r1
 8004326:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	490f      	ldr	r1, [pc, #60]	; (8004370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004334:	400a      	ands	r2, r1
 8004336:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69d9      	ldr	r1, [r3, #28]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
      break;
 800434c:	e004      	b.n	8004358 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800434e:	2317      	movs	r3, #23
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
      break;
 8004356:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	223c      	movs	r2, #60	; 0x3c
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

  return status;
 8004360:	2317      	movs	r3, #23
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	781b      	ldrb	r3, [r3, #0]
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b006      	add	sp, #24
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	fffffbff 	.word	0xfffffbff

08004374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223c      	movs	r2, #60	; 0x3c
 800438a:	5c9b      	ldrb	r3, [r3, r2]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIM_ConfigClockSource+0x20>
 8004390:	2302      	movs	r3, #2
 8004392:	e0bc      	b.n	800450e <HAL_TIM_ConfigClockSource+0x19a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223c      	movs	r2, #60	; 0x3c
 8004398:	2101      	movs	r1, #1
 800439a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223d      	movs	r2, #61	; 0x3d
 80043a0:	2102      	movs	r1, #2
 80043a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2277      	movs	r2, #119	; 0x77
 80043b0:	4393      	bics	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_TIM_ConfigClockSource+0x1a4>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0192      	lsls	r2, r2, #6
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d040      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0xde>
 80043d0:	2280      	movs	r2, #128	; 0x80
 80043d2:	0192      	lsls	r2, r2, #6
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d900      	bls.n	80043da <HAL_TIM_ConfigClockSource+0x66>
 80043d8:	e088      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	0152      	lsls	r2, r2, #5
 80043de:	4293      	cmp	r3, r2
 80043e0:	d100      	bne.n	80043e4 <HAL_TIM_ConfigClockSource+0x70>
 80043e2:	e088      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x182>
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	0152      	lsls	r2, r2, #5
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d900      	bls.n	80043ee <HAL_TIM_ConfigClockSource+0x7a>
 80043ec:	e07e      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 80043ee:	2b70      	cmp	r3, #112	; 0x70
 80043f0:	d018      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0xb0>
 80043f2:	d900      	bls.n	80043f6 <HAL_TIM_ConfigClockSource+0x82>
 80043f4:	e07a      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 80043f6:	2b60      	cmp	r3, #96	; 0x60
 80043f8:	d04f      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x126>
 80043fa:	d900      	bls.n	80043fe <HAL_TIM_ConfigClockSource+0x8a>
 80043fc:	e076      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 80043fe:	2b50      	cmp	r3, #80	; 0x50
 8004400:	d03b      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x106>
 8004402:	d900      	bls.n	8004406 <HAL_TIM_ConfigClockSource+0x92>
 8004404:	e072      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d057      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x146>
 800440a:	d900      	bls.n	800440e <HAL_TIM_ConfigClockSource+0x9a>
 800440c:	e06e      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 800440e:	2b30      	cmp	r3, #48	; 0x30
 8004410:	d063      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x166>
 8004412:	d86b      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d060      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x166>
 8004418:	d868      	bhi.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d05d      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x166>
 800441e:	2b10      	cmp	r3, #16
 8004420:	d05b      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x166>
 8004422:	e063      	b.n	80044ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004434:	f000 fc46 	bl	8004cc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2277      	movs	r2, #119	; 0x77
 8004444:	4313      	orrs	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	609a      	str	r2, [r3, #8]
      break;
 8004450:	e052      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004462:	f000 fc2f 	bl	8004cc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2180      	movs	r1, #128	; 0x80
 8004472:	01c9      	lsls	r1, r1, #7
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
      break;
 8004478:	e03e      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	001a      	movs	r2, r3
 8004488:	f000 fba2 	bl	8004bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2150      	movs	r1, #80	; 0x50
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fbfc 	bl	8004c90 <TIM_ITRx_SetConfig>
      break;
 8004498:	e02e      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a6:	001a      	movs	r2, r3
 80044a8:	f000 fbc0 	bl	8004c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2160      	movs	r1, #96	; 0x60
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 fbec 	bl	8004c90 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e01e      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c6:	001a      	movs	r2, r3
 80044c8:	f000 fb82 	bl	8004bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2140      	movs	r1, #64	; 0x40
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 fbdc 	bl	8004c90 <TIM_ITRx_SetConfig>
      break;
 80044d8:	e00e      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0019      	movs	r1, r3
 80044e4:	0010      	movs	r0, r2
 80044e6:	f000 fbd3 	bl	8004c90 <TIM_ITRx_SetConfig>
      break;
 80044ea:	e005      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044ec:	230f      	movs	r3, #15
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	223d      	movs	r2, #61	; 0x3d
 80044fc:	2101      	movs	r1, #1
 80044fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	2100      	movs	r1, #0
 8004506:	5499      	strb	r1, [r3, r2]

  return status;
 8004508:	230f      	movs	r3, #15
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	781b      	ldrb	r3, [r3, #0]
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	ffff00ff 	.word	0xffff00ff

0800451c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	b002      	add	sp, #8
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b002      	add	sp, #8
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b002      	add	sp, #8
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004564:	46c0      	nop			; (mov r8, r8)
 8004566:	46bd      	mov	sp, r7
 8004568:	b002      	add	sp, #8
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d107      	bne.n	80045a4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	223e      	movs	r2, #62	; 0x3e
 800459e:	2101      	movs	r1, #1
 80045a0:	5499      	strb	r1, [r3, r2]
 80045a2:	e02a      	b.n	80045fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d107      	bne.n	80045be <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2202      	movs	r2, #2
 80045b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	223f      	movs	r2, #63	; 0x3f
 80045b8:	2101      	movs	r1, #1
 80045ba:	5499      	strb	r1, [r3, r2]
 80045bc:	e01d      	b.n	80045fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d107      	bne.n	80045d8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2204      	movs	r2, #4
 80045cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	2101      	movs	r1, #1
 80045d4:	5499      	strb	r1, [r3, r2]
 80045d6:	e010      	b.n	80045fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d107      	bne.n	80045f2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2208      	movs	r2, #8
 80045e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2241      	movs	r2, #65	; 0x41
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]
 80045f0:	e003      	b.n	80045fa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	223d      	movs	r2, #61	; 0x3d
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff ffb5 	bl	800456c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}

08004610 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	d10b      	bne.n	8004640 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d136      	bne.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	223e      	movs	r2, #62	; 0x3e
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]
 800463e:	e031      	b.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d10b      	bne.n	8004662 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2202      	movs	r2, #2
 800464e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d125      	bne.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	223f      	movs	r2, #63	; 0x3f
 800465c:	2101      	movs	r1, #1
 800465e:	5499      	strb	r1, [r3, r2]
 8004660:	e020      	b.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d10b      	bne.n	8004684 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2204      	movs	r2, #4
 8004670:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d114      	bne.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2240      	movs	r2, #64	; 0x40
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]
 8004682:	e00f      	b.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d10a      	bne.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2208      	movs	r2, #8
 8004692:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2241      	movs	r2, #65	; 0x41
 80046a0:	2101      	movs	r1, #1
 80046a2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f7fb ffd4 	bl	8000654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	771a      	strb	r2, [r3, #28]
}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bd80      	pop	{r7, pc}

080046ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d103      	bne.n	80046da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]
 80046d8:	e019      	b.n	800470e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d103      	bne.n	80046ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2202      	movs	r2, #2
 80046e8:	771a      	strb	r2, [r3, #28]
 80046ea:	e010      	b.n	800470e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d103      	bne.n	80046fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2204      	movs	r2, #4
 80046fa:	771a      	strb	r2, [r3, #28]
 80046fc:	e007      	b.n	800470e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d102      	bne.n	800470e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2208      	movs	r2, #8
 800470c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	0018      	movs	r0, r3
 8004712:	f7ff ff1b 	bl	800454c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	46bd      	mov	sp, r7
 8004720:	b004      	add	sp, #16
 8004722:	bd80      	pop	{r7, pc}

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a30      	ldr	r2, [pc, #192]	; (80047f8 <TIM_Base_SetConfig+0xd4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d008      	beq.n	800474e <TIM_Base_SetConfig+0x2a>
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d003      	beq.n	800474e <TIM_Base_SetConfig+0x2a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0xd8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d108      	bne.n	8004760 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2270      	movs	r2, #112	; 0x70
 8004752:	4393      	bics	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0xd4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d014      	beq.n	8004792 <TIM_Base_SetConfig+0x6e>
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	429a      	cmp	r2, r3
 8004770:	d00f      	beq.n	8004792 <TIM_Base_SetConfig+0x6e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a21      	ldr	r2, [pc, #132]	; (80047fc <TIM_Base_SetConfig+0xd8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00b      	beq.n	8004792 <TIM_Base_SetConfig+0x6e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a20      	ldr	r2, [pc, #128]	; (8004800 <TIM_Base_SetConfig+0xdc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d007      	beq.n	8004792 <TIM_Base_SetConfig+0x6e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <TIM_Base_SetConfig+0xe0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d003      	beq.n	8004792 <TIM_Base_SetConfig+0x6e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <TIM_Base_SetConfig+0xe4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d108      	bne.n	80047a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a1d      	ldr	r2, [pc, #116]	; (800480c <TIM_Base_SetConfig+0xe8>)
 8004796:	4013      	ands	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	4393      	bics	r3, r2
 80047aa:	001a      	movs	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <TIM_Base_SetConfig+0xd4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <TIM_Base_SetConfig+0xbe>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <TIM_Base_SetConfig+0xe0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <TIM_Base_SetConfig+0xbe>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <TIM_Base_SetConfig+0xe4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d103      	bne.n	80047ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	615a      	str	r2, [r3, #20]
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40002000 	.word	0x40002000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800
 800480c:	fffffcff 	.word	0xfffffcff

08004810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2201      	movs	r2, #1
 8004820:	4393      	bics	r3, r2
 8004822:	001a      	movs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2270      	movs	r2, #112	; 0x70
 800483e:	4393      	bics	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2203      	movs	r2, #3
 8004846:	4393      	bics	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2202      	movs	r2, #2
 8004858:	4393      	bics	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a23      	ldr	r2, [pc, #140]	; (80048f8 <TIM_OC1_SetConfig+0xe8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_OC1_SetConfig+0x6e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <TIM_OC1_SetConfig+0xec>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_OC1_SetConfig+0x6e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a21      	ldr	r2, [pc, #132]	; (8004900 <TIM_OC1_SetConfig+0xf0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10c      	bne.n	8004898 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2208      	movs	r2, #8
 8004882:	4393      	bics	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2204      	movs	r2, #4
 8004894:	4393      	bics	r3, r2
 8004896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <TIM_OC1_SetConfig+0xe8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d007      	beq.n	80048b0 <TIM_OC1_SetConfig+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a16      	ldr	r2, [pc, #88]	; (80048fc <TIM_OC1_SetConfig+0xec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_OC1_SetConfig+0xa0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <TIM_OC1_SetConfig+0xf0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4a14      	ldr	r2, [pc, #80]	; (8004904 <TIM_OC1_SetConfig+0xf4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <TIM_OC1_SetConfig+0xf8>)
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b006      	add	sp, #24
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800
 8004904:	fffffeff 	.word	0xfffffeff
 8004908:	fffffdff 	.word	0xfffffdff

0800490c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	2210      	movs	r2, #16
 800491c:	4393      	bics	r3, r2
 800491e:	001a      	movs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <TIM_OC2_SetConfig+0xe0>)
 800493a:	4013      	ands	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a2b      	ldr	r2, [pc, #172]	; (80049f0 <TIM_OC2_SetConfig+0xe4>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2220      	movs	r2, #32
 8004956:	4393      	bics	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <TIM_OC2_SetConfig+0xe8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10d      	bne.n	800498a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	4393      	bics	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2240      	movs	r2, #64	; 0x40
 8004986:	4393      	bics	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <TIM_OC2_SetConfig+0xe8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_OC2_SetConfig+0x96>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <TIM_OC2_SetConfig+0xec>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC2_SetConfig+0x96>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC2_SetConfig+0xf0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d113      	bne.n	80049ca <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC2_SetConfig+0xf4>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <TIM_OC2_SetConfig+0xf8>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b006      	add	sp, #24
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	ffff8fff 	.word	0xffff8fff
 80049f0:	fffffcff 	.word	0xfffffcff
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800
 8004a00:	fffffbff 	.word	0xfffffbff
 8004a04:	fffff7ff 	.word	0xfffff7ff

08004a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	4a33      	ldr	r2, [pc, #204]	; (8004ae4 <TIM_OC3_SetConfig+0xdc>)
 8004a18:	401a      	ands	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2270      	movs	r2, #112	; 0x70
 8004a34:	4393      	bics	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4393      	bics	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <TIM_OC3_SetConfig+0xe0>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <TIM_OC3_SetConfig+0xe4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <TIM_OC3_SetConfig+0xe8>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <TIM_OC3_SetConfig+0xec>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <TIM_OC3_SetConfig+0xe4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC3_SetConfig+0x92>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <TIM_OC3_SetConfig+0xf0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC3_SetConfig+0x92>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <TIM_OC3_SetConfig+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d113      	bne.n	8004ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC3_SetConfig+0xf8>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC3_SetConfig+0xfc>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	46c0      	nop			; (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b006      	add	sp, #24
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	fffffeff 	.word	0xfffffeff
 8004ae8:	fffffdff 	.word	0xfffffdff
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	fffff7ff 	.word	0xfffff7ff
 8004af4:	fffffbff 	.word	0xfffffbff
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	ffffefff 	.word	0xffffefff
 8004b04:	ffffdfff 	.word	0xffffdfff

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <TIM_OC4_SetConfig+0xa8>)
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <TIM_OC4_SetConfig+0xac>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a1f      	ldr	r2, [pc, #124]	; (8004bb8 <TIM_OC4_SetConfig+0xb0>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <TIM_OC4_SetConfig+0xb4>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC4_SetConfig+0xb8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_OC4_SetConfig+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <TIM_OC4_SetConfig+0xbc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC4_SetConfig+0x70>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <TIM_OC4_SetConfig+0xc0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d109      	bne.n	8004b8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <TIM_OC4_SetConfig+0xc4>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b006      	add	sp, #24
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	ffffefff 	.word	0xffffefff
 8004bb4:	ffff8fff 	.word	0xffff8fff
 8004bb8:	fffffcff 	.word	0xfffffcff
 8004bbc:	ffffdfff 	.word	0xffffdfff
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800
 8004bcc:	ffffbfff 	.word	0xffffbfff

08004bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2201      	movs	r2, #1
 8004be8:	4393      	bics	r3, r2
 8004bea:	001a      	movs	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	22f0      	movs	r2, #240	; 0xf0
 8004bfa:	4393      	bics	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	220a      	movs	r2, #10
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	621a      	str	r2, [r3, #32]
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b006      	add	sp, #24
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	4393      	bics	r3, r2
 8004c40:	001a      	movs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4a0d      	ldr	r2, [pc, #52]	; (8004c8c <TIM_TI2_ConfigInputStage+0x60>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	031b      	lsls	r3, r3, #12
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	22a0      	movs	r2, #160	; 0xa0
 8004c68:	4393      	bics	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b006      	add	sp, #24
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	ffff0fff 	.word	0xffff0fff

08004c90 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2270      	movs	r2, #112	; 0x70
 8004ca4:	4393      	bics	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	2207      	movs	r2, #7
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	609a      	str	r2, [r3, #8]
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b004      	add	sp, #16
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <TIM_ETR_SetConfig+0x3c>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	021a      	lsls	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	609a      	str	r2, [r3, #8]
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	ffff00ff 	.word	0xffff00ff

08004d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	221f      	movs	r2, #31
 8004d14:	4013      	ands	r3, r2
 8004d16:	2201      	movs	r2, #1
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	43d2      	mvns	r2, r2
 8004d26:	401a      	ands	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	211f      	movs	r1, #31
 8004d34:	400b      	ands	r3, r1
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4099      	lsls	r1, r3
 8004d3a:	000b      	movs	r3, r1
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b006      	add	sp, #24
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	223c      	movs	r2, #60	; 0x3c
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e042      	b.n	8004dea <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	223c      	movs	r2, #60	; 0x3c
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	223d      	movs	r2, #61	; 0x3d
 8004d70:	2102      	movs	r1, #2
 8004d72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2270      	movs	r2, #112	; 0x70
 8004d88:	4393      	bics	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00a      	beq.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	05db      	lsls	r3, r3, #23
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d004      	beq.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2280      	movs	r2, #128	; 0x80
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	223d      	movs	r2, #61	; 0x3d
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	223c      	movs	r2, #60	; 0x3c
 8004de4:	2100      	movs	r1, #0
 8004de6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	0018      	movs	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40000400 	.word	0x40000400

08004dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e14:	46c0      	nop			; (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <memset>:
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	1882      	adds	r2, r0, r2
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	7019      	strb	r1, [r3, #0]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	2600      	movs	r6, #0
 8004e30:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x38>)
 8004e32:	4d0d      	ldr	r5, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	f000 f819 	bl	8004e74 <_init>
 8004e42:	4c0a      	ldr	r4, [pc, #40]	; (8004e6c <__libc_init_array+0x40>)
 8004e44:	4d0a      	ldr	r5, [pc, #40]	; (8004e70 <__libc_init_array+0x44>)
 8004e46:	1b64      	subs	r4, r4, r5
 8004e48:	10a4      	asrs	r4, r4, #2
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	00b3      	lsls	r3, r6, #2
 8004e52:	58eb      	ldr	r3, [r5, r3]
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	00b3      	lsls	r3, r6, #2
 8004e5c:	58eb      	ldr	r3, [r5, r3]
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004ed8 	.word	0x08004ed8
 8004e68:	08004ed8 	.word	0x08004ed8
 8004e6c:	08004edc 	.word	0x08004edc
 8004e70:	08004ed8 	.word	0x08004ed8

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
